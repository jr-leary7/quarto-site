{
  "hash": "a0f7b5d8f9cba7f24ed28630f137ed77",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"scRNA-seq Reclustering with `SCISSORS`\"\nauthor:\n  name: Jack Leary\n  email: j.leary@ufl.edu\n  orcid: 0009-0004-8821-3269\n  affiliations:\n    - name: University of Florida\n      department: Biostatistics \n      city: Gainesville\n      state: FL\ndate: today\ndate-format: long\nformat:\n  html:\n    code-fold: show\n    code-copy: true\n    code-tools: true\n    toc: true\n    embed-resources: true\n    fig-format: retina\n    df-print: kable\n    link-external-newwindow: true\nexecute: \n  cache: true\n  freeze: auto\n---\n\n\n# Introduction \n\nIn this tutorial we'll walk through a basic single cell analysis, with a focus on fine-tuning clustering results using the `SCISSORS` package, which I wrote during my time at UNC Chapel Hill. \n\n# Libraries \n\nIf you haven't already, install the development version (currently v1.2.0) of `SCISSORS` from [the GitHub repository](https://github.com/jr-leary7/SCISSORS).\n\n\n::: {.cell hash='SCISSORS_Reclustering_cache/html/unnamed-chunk-1_d41ee18ac5474cacb9378acede52d251'}\n\n```{.r .cell-code}\nremotes:: install_github(\"jr-leary7/SCISSORS\")\n```\n:::\n\n\nNext, we'll load the packages we need to process our single cell data, recluster the cells, and visualize the results. \n\n\n::: {.cell hash='SCISSORS_Reclustering_cache/html/unnamed-chunk-2_1a38b24bf61afbfb3012cc73426f5eda'}\n\n```{.r .cell-code}\nlibrary(dplyr)       # data manipulation\nlibrary(Seurat)      # scRNA-seq tools \nlibrary(ggplot2)     # plot utilities \nlibrary(SCISSORS)    # scRNA-seq reclustering \nlibrary(paletteer)   # color palettes \nlibrary(patchwork)   # plot combination\nlibrary(SeuratData)  # datasets \n```\n:::\n\n\n# Data \n\nWe'll load in the well-known [PBMC3k data from 10X Genomics](https://support.10xgenomics.com/single-cell-gene-expression/datasets/1.1.0/pbmc3k), which is often used in example workflows such as the [`Seurat` clustering vignette](https://satijalab.org/seurat/articles/pbmc3k_tutorial.html) and the [`scanpy` vignette](https://scanpy-tutorials.readthedocs.io/en/latest/pbmc3k.html). If you haven't already downloaded the dataset, this function will download the raw data for you and load it into your R session. \n\n\n::: {.cell hash='SCISSORS_Reclustering_cache/html/unnamed-chunk-3_7ae21bae59e397c2727ec6cc37d5db7c'}\n\n```{.r .cell-code}\npbmc <- LoadData(\"pbmc3k\")\n```\n:::\n\n\n# Analysis \n\n## Preprocessing \n\nWe'll do some minor quality-control checking first by filtering out cells with a high percentage of mitochondrial reads or very low or high numbers of detected genes. \n\n\n::: {.cell hash='SCISSORS_Reclustering_cache/html/unnamed-chunk-4_af71daa2067f4db9a0a14a44ab3d1f56'}\n\n```{.r .cell-code}\npbmc <- PercentageFeatureSet(pbmc, \n                             pattern = \"^MT-\", \n                             col.name = \"percent_MT\")\npbmc <- pbmc[, pbmc$nFeature_RNA >= 200 & pbmc$nFeature_RNA <= 2500 & pbmc$percent_MT <= 10]\n```\n:::\n\n\nWe'll process the raw counts in the usual fashion: QC, normalization, identification of highly variable genes (HVGs), linear & non-linear dimension reduction, and a broad clustering that will (hopefully) capture our major celltypes. When computing the shared nearest-neighbor (SNN) graph, we use the heuristic $k = \\sqrt{n}$ for the number of nearest-neighbors to consider for each cell. This ensures that the clustering will be broad i.e., a smaller number of large clusters will be returned instead of a larger number of small clusters. \n\n\n::: {.cell hash='SCISSORS_Reclustering_cache/html/unnamed-chunk-5_59572e6feccc52785caa4266c70a079c'}\n\n```{.r .cell-code}\npbmc <- NormalizeData(pbmc, \n                      normalization.method = \"LogNormalize\", \n                      verbose = FALSE) %>% \n        FindVariableFeatures(selection.method = \"vst\", \n                             nfeatures = 3000, \n                             verbose = FALSE) %>% \n        CellCycleScoring(s.features = cc.genes.updated.2019$s.genes, \n                         g2m.features = cc.genes.updated.2019$g2m.genes, \n                         set.ident = FALSE) %>% \n        AddMetaData(metadata = c(.$S.Score - .$G2M.Score), col.name = \"CC_difference\") %>% \n        ScaleData(vars.to.regress = \"CC_difference\", verbose = FALSE) %>% \n        RunPCA(features = VariableFeatures(.), \n               npcs = 50, \n               verbose = FALSE, \n               seed.use = 312) %>% \n        RunUMAP(reduction = \"pca\",\n                dims = 1:20, \n                n.components = 2, \n                metric = \"cosine\", \n                seed.use = 312, \n                verbose = FALSE) %>% \n        FindNeighbors(reduction = \"pca\", \n                      dims = 1:20, \n                      k.param = sqrt(ncol(.)), \n                      nn.method = \"annoy\", \n                      annoy.metric = \"cosine\", \n                      verbose = FALSE) %>% \n        FindClusters(resolution = 0.3, \n                     random.seed = 312, \n                     verbose = FALSE)\n```\n:::\n\n\nLet's visualize the principal components. Notable genes in PC 1 include *MALAT1*, high abundance of which is [a common artifact of 10X-sequenced data](https://kb.10xgenomics.com/hc/en-us/articles/360004729092-Why-do-I-see-high-levels-of-Malat1-in-my-gene-expression-data-). PC 2 seems to separate NK cells (*NKG7*, *GZMB*) and myeloid cells (*HLA-DRA*, *CD79A*). PC 3 is composed of variation that could originate from platelets (*PPBP*). PCs 4-6 look like they separate several types of monocytic, T, NK, and dendritic cells. \n\n\n::: {.cell hash='SCISSORS_Reclustering_cache/html/unnamed-chunk-6_e6ac0541389a439ce81d1110215f6638'}\n\n```{.r .cell-code}\nDimHeatmap(pbmc, \n           reduction = \"pca\", \n           dims = 1:6, \n           nfeatures = 15, \n           combine = TRUE)\n```\n\n::: {.cell-output-display}\n![](SCISSORS_Reclustering_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nWe visualize the Louvain clustering via a UMAP plot. We see 5 major clusters, which we'll annotate next. \n\n\n::: {.cell hash='SCISSORS_Reclustering_cache/html/unnamed-chunk-7_e2a857219258e896cf2a4bc78762bd21'}\n\n```{.r .cell-code}\nDimPlot(pbmc, pt.size = 1) + \n  scale_color_paletteer_d(\"ggsci::nrc_npg\") + \n  labs(x = \"UMAP 1\", y = \"UMAP 2\") + \n  theme(axis.ticks = element_blank(), \n        axis.text = element_blank())\n```\n\n::: {.cell-output-display}\n![](SCISSORS_Reclustering_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n## Broad Annotations \n\nFirst we identify CD8+ T-cells via *CD8A*, and CD4+ T-cells with *IL7R*. Lastly, *FCGR3A* (aka *CD16*) is specific to CD16+ monocytes. We can combine the plots using the excellent `patchwork` package. \n\n\n::: {.cell hash='SCISSORS_Reclustering_cache/html/unnamed-chunk-8_39a9e170a230dff207cc4214f67e7adf'}\n\n```{.r .cell-code}\np1 <- FeaturePlot(pbmc, features = \"CD8A\", pt.size = 1) + \n      scale_color_gradientn(colours = paletteer_d(\"wesanderson::Zissou1\")) + \n      labs(x = \"UMAP 1\", y = \"UMAP 2\") + \n      theme(axis.ticks = element_blank(), \n            axis.text = element_blank())\np2 <- FeaturePlot(pbmc, features = \"IL7R\", pt.size = 1) + \n      scale_color_gradientn(colours = paletteer_d(\"wesanderson::Zissou1\")) + \n      labs(x = \"UMAP 1\", y = \"UMAP 2\") + \n      theme(axis.ticks = element_blank(), \n            axis.text = element_blank())\np1 / p2\n```\n\n::: {.cell-output-display}\n![](SCISSORS_Reclustering_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nNext, we use *HLA-DRA* to broadly identify monocytic cells, and *FCGR3A* (aka *CD16*) to single out the CD16+ monocytes.  \n\n\n::: {.cell hash='SCISSORS_Reclustering_cache/html/unnamed-chunk-9_8d908ece2a358d675ee83d948644b6e2'}\n\n```{.r .cell-code}\np1 <- FeaturePlot(pbmc, features = \"HLA-DRA\", pt.size = 1) + \n      scale_color_gradientn(colours = paletteer_d(\"wesanderson::Zissou1\")) + \n      labs(x = \"UMAP 1\", y = \"UMAP 2\") + \n      theme(axis.ticks = element_blank(), \n            axis.text = element_blank())\np2 <- FeaturePlot(pbmc, features = \"FCGR3A\", pt.size = 1) + \n      scale_color_gradientn(colours = paletteer_d(\"wesanderson::Zissou1\")) + \n      labs(x = \"UMAP 1\", y = \"UMAP 2\") + \n      theme(axis.ticks = element_blank(), \n            axis.text = element_blank())\np1 / p2\n```\n\n::: {.cell-output-display}\n![](SCISSORS_Reclustering_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nLastly, abundance of *MS4A1* points out a cluster of B cells. \n\n\n::: {.cell hash='SCISSORS_Reclustering_cache/html/unnamed-chunk-10_b4595efbe2a89f5238eeca350d8db960'}\n\n```{.r .cell-code}\nFeaturePlot(pbmc, features = \"MS4A1\", pt.size = 1) + \n  scale_color_gradientn(colours = paletteer_d(\"wesanderson::Zissou1\")) + \n  labs(x = \"UMAP 1\", y = \"UMAP 2\") + \n  theme(axis.ticks = element_blank(), \n        axis.text = element_blank())\n```\n\n::: {.cell-output-display}\n![](SCISSORS_Reclustering_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nWe'll add broad celltype labels to our object's metadata. \n\n\n::: {.cell hash='SCISSORS_Reclustering_cache/html/unnamed-chunk-11_0a7ff9c2357ca0bdcd9353f9c15d6cd4'}\n\n```{.r .cell-code}\npbmc@meta.data <- mutate(pbmc@meta.data, \n                         broad_celltype = case_when(seurat_clusters == 0 ~ \"CD4+ T\", \n                                                    seurat_clusters == 1 ~ \"Monocyte\", \n                                                    seurat_clusters == 2 ~ \"CD8+ T\", \n                                                    seurat_clusters == 3 ~ \"B\", \n                                                    seurat_clusters == 4 ~ \"CD16+ Monocyte\", \n                                                    TRUE ~ NA_character_), \n                         broad_celltype = factor(broad_celltype, levels = c(\"CD4+ T\", \n                                                                            \"Monocyte\", \n                                                                            \"CD8+ T\", \n                                                                            \"B\", \n                                                                            \"CD16+ Monocyte\")))\n```\n:::\n\n\nAnd visualize the results. \n\n\n::: {.cell hash='SCISSORS_Reclustering_cache/html/unnamed-chunk-12_df5f3048eb698a226384d0bd90443477'}\n\n```{.r .cell-code}\nDimPlot(pbmc, pt.size = 1, group.by = \"broad_celltype\") + \n  scale_color_paletteer_d(\"ggsci::nrc_npg\") + \n  labs(x = \"UMAP 1\", \n       y = \"UMAP 2\", \n       color = \"Broad Celltype\") + \n  theme(axis.ticks = element_blank(), \n        axis.text = element_blank(), \n        plot.title = element_blank())\n```\n\n::: {.cell-output-display}\n![](SCISSORS_Reclustering_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n## Reclustering \n\nFrom the plot above, there appears to be some visible subgroups in the monocyte cluster. With that being said - I would generally be very cautious about using UMAPs alone to define heterogeneous groups. In general, I would suggest using something like silhouette score distributions, other clustering statistics, or biological knowledge to determine subclustering targets. We can do this below using `ComputeSilhouetteScores()`, which returns a silhouette score for each individual cell. Visualizing the results can help us identify which clusters are \"poor\" fits. For more information, check out [the Wikipedia article on clustering scores](https://en.wikipedia.org/wiki/Cluster_analysis#Evaluation_and_assessment).  \n\n\n::: {.cell hash='SCISSORS_Reclustering_cache/html/unnamed-chunk-13_2298cccd16c12eca3bbd46bbcc059c31'}\n\n```{.r .cell-code}\nsil_scores <- ComputeSilhouetteScores(pbmc, avg = FALSE)\n```\n:::\n\n\nWe can see that the B cell and CD16+ monocyte clusters seem to be well-fit, but the other clusters are less so. We'll focus on the other monocyte cluster, as it seems to have the highest variance. \n\n\n::: {.cell hash='SCISSORS_Reclustering_cache/html/unnamed-chunk-14_4429147fafd90a2aaba252ab13f65745'}\n\n```{.r .cell-code}\nsil_scores %>% \n  left_join(distinct(pbmc@meta.data, seurat_clusters, broad_celltype), \n            by = c(\"Cluster\" = \"seurat_clusters\")) %>% \n  ggplot(aes(x = broad_celltype, y = Score, fill = broad_celltype)) + \n  geom_violin(scale = \"width\", \n              color = \"black\", \n              draw_quantiles = 0.5, \n              size = 0.75) + \n  scale_fill_paletteer_d(\"ggsci::nrc_npg\") + \n  labs(y = \"Silhouette Score\", fill = \"Broad Celltype\") + \n  theme_classic(base_size = 14) + \n  theme(panel.grid.major.y = element_line(), \n        axis.title.x = element_blank())\n```\n\n::: {.cell-output-display}\n![](SCISSORS_Reclustering_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n### Monocytes \n\n\n::: {.cell hash='SCISSORS_Reclustering_cache/html/unnamed-chunk-15_0405ac2686ff5d0b9e0adcea60e843c6'}\n\n```{.r .cell-code}\nmono_reclust <- ReclusterCells(pbmc, \n                               which.clust = 1, \n                               use.parallel = FALSE, \n                               n.HVG = 3000,\n                               n.PC = 15, \n                               k.vals = c(20, 30, 40), \n                               resolution.vals = c(.2, .3, .4), \n                               random.seed = 312)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Reclustering cells in cluster 1 using k = 20 & resolution = 0.2; S = 0.419\"\n```\n\n\n:::\n:::\n\n\nLet's check out the UMAP embedding:\n\n\n::: {.cell hash='SCISSORS_Reclustering_cache/html/unnamed-chunk-16_df0584ac26e38d26a6fc0282e62efb85'}\n\n```{.r .cell-code}\nDimPlot(mono_reclust) + \n  scale_color_paletteer_d(\"MetBrewer::Egypt\") + \n  labs(x = \"UMAP 1\", \n       y = \"UMAP 2\", \n       color = \"Subcluster\") + \n  theme(axis.ticks = element_blank(), \n        axis.text = element_blank(), \n        plot.title = element_blank())\n```\n\n::: {.cell-output-display}\n![](SCISSORS_Reclustering_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\nHighly-specific abundance of *FCER1A* allows us to identify the dendritic cells in cluster 2. \n\n\n::: {.cell hash='SCISSORS_Reclustering_cache/html/unnamed-chunk-17_16b2c2d298b9b46b73e82f7f93e5ab80'}\n\n```{.r .cell-code}\ndata.frame(exp = mono_reclust@assays$RNA@data[\"FCER1A\", ], \n           label = mono_reclust$seurat_clusters) %>% \n  ggplot(aes(x = label, y = exp, fill = label)) + \n  geom_violin(scale = \"width\",\n              color = \"black\", \n              draw_quantiles = 0.5, \n              size = 0.75) + \n  scale_fill_paletteer_d(\"MetBrewer::Egypt\") + \n  labs(y = \"FCER1A\", fill = \"Subcluster\") + \n  theme_classic(base_size = 14) + \n  theme(panel.grid.major.y = element_line(), \n        axis.title.x = element_blank())\n```\n\n::: {.cell-output-display}\n![](SCISSORS_Reclustering_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\nBoth cluster 0 & cluster 1 seem to be CD14+, and cluster 1 appears to have slightly higher (but still low) abundance of *FCGR3A*. \n\n\n::: {.cell hash='SCISSORS_Reclustering_cache/html/unnamed-chunk-18_1ed279aa47ec42983d47f4097e26a7dd'}\n\n```{.r .cell-code}\np1 <- data.frame(exp = mono_reclust@assays$RNA@data[\"CD14\", ], \n                 label = mono_reclust$seurat_clusters) %>% \n      filter(label %in% c(0, 1)) %>% \n      ggplot(aes(x = label, y = exp, fill = label)) + \n      geom_violin(scale = \"width\",\n                  color = \"black\", \n                  draw_quantiles = 0.5, \n                  size = 0.75) + \n      scale_fill_paletteer_d(\"MetBrewer::Egypt\") + \n      labs(y = \"CD14\", fill = \"Subcluster\") + \n      theme_classic(base_size = 14) + \n      theme(panel.grid.major.y = element_line(), \n            axis.title.x = element_blank())\np2 <- data.frame(exp = mono_reclust@assays$RNA@data[\"FCGR3A\", ], \n                 label = mono_reclust$seurat_clusters) %>% \n      filter(label %in% c(0, 1)) %>% \n      ggplot(aes(x = label, y = exp, fill = label)) + \n      geom_violin(scale = \"width\",\n                  color = \"black\", \n                  draw_quantiles = 0.5, \n                  size = 0.75) + \n      scale_fill_paletteer_d(\"MetBrewer::Egypt\") + \n      labs(y = \"FCGR3A\", fill = \"Subcluster\") + \n      theme_classic(base_size = 14) + \n      theme(panel.grid.major.y = element_line(), \n            axis.title.x = element_blank())\np1 / p2\n```\n\n::: {.cell-output-display}\n![](SCISSORS_Reclustering_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\nFrom [Kapellos *et al* (2019)](https://doi.org/10.3389/fimmu.2019.02035), we know that intermediate monocytes have high abundance of *CD14*, low but non-zero abundance of *CD16* (which again is denoted *FCGR3A* in this dataset), and can be identified through higher abundance of other markers like *HLA-DPB1* and *CD74* in comparison to CD14+ monocytes. With all this information, we'll conclude that cluster 0 is likely composed of CD14+ monocytes and cluster 1 of intermediate monocytes. \n\n\n::: {.cell hash='SCISSORS_Reclustering_cache/html/unnamed-chunk-19_e6998b996b6a439b41f68d09b835b688'}\n\n```{.r .cell-code}\np1 <- data.frame(exp = mono_reclust@assays$RNA@data[\"HLA-DQB1\", ], \n                 label = mono_reclust$seurat_clusters) %>% \n      filter(label %in% c(0, 1)) %>% \n      ggplot(aes(x = label, y = exp, fill = label)) + \n      geom_violin(scale = \"width\",\n                  color = \"black\", \n                  draw_quantiles = 0.5, \n                  size = 0.75) + \n      scale_fill_paletteer_d(\"MetBrewer::Egypt\") + \n      labs(y = \"HLA-DQB1\", fill = \"Subcluster\") + \n      theme_classic(base_size = 14) + \n      theme(panel.grid.major.y = element_line(), \n            axis.title.x = element_blank())\np2 <- data.frame(exp = mono_reclust@assays$RNA@data[\"CD74\", ], \n                 label = mono_reclust$seurat_clusters) %>% \n      filter(label %in% c(0, 1)) %>% \n      ggplot(aes(x = label, y = exp, fill = label)) + \n      geom_violin(scale = \"width\",\n                  color = \"black\", \n                  draw_quantiles = 0.5, \n                  size = 0.75) + \n      scale_fill_paletteer_d(\"MetBrewer::Egypt\") + \n      labs(y = \"CD74\", fill = \"Subcluster\") + \n      theme_classic(base_size = 14) + \n      theme(panel.grid.major.y = element_line(), \n            axis.title.x = element_blank())\np1 / p2\n```\n\n::: {.cell-output-display}\n![](SCISSORS_Reclustering_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\nLastly, we can tell that cluster 3 is composed of platelets thanks to high abundance of *PPBP*. \n\n\n::: {.cell hash='SCISSORS_Reclustering_cache/html/unnamed-chunk-20_6e5167b9b570ba81e05af8b516f8caec'}\n\n```{.r .cell-code}\ndata.frame(exp = mono_reclust@assays$RNA@data[\"PPBP\", ], \n           label = mono_reclust$seurat_clusters) %>% \n  ggplot(aes(x = label, y = exp, fill = label)) + \n  geom_violin(scale = \"width\",\n              color = \"black\", \n              draw_quantiles = 0.5, \n              size = 0.75) + \n  scale_fill_paletteer_d(\"MetBrewer::Egypt\") + \n  labs(y = \"PPBP\", fill = \"Subcluster\") + \n  theme_classic(base_size = 14) + \n  theme(panel.grid.major.y = element_line(), \n        axis.title.x = element_blank())\n```\n\n::: {.cell-output-display}\n![](SCISSORS_Reclustering_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\nWe can add the new subcluster labels back in to our original object using `IntegrateSubclusters()`. We also add labels to the original object reflecting the subcluster annotations. \n\n\n::: {.cell hash='SCISSORS_Reclustering_cache/html/unnamed-chunk-21_8f1afe7c4ffeda61119d391e2a4bcc10'}\n\n```{.r .cell-code}\npbmc <- IntegrateSubclusters(pbmc, reclust.results = mono_reclust)\npbmc@meta.data <- mutate(pbmc@meta.data, \n                         celltype = case_when(seurat_clusters == 0 ~ \"CD4+ T\", \n                                              seurat_clusters == 1 ~ \"Platelet\", \n                                              seurat_clusters == 2 ~ \"CD8+ T\", \n                                              seurat_clusters == 3 ~ \"B\", \n                                              seurat_clusters == 4 ~ \"CD16+ Monocyte\", \n                                              seurat_clusters == 5 ~ \"CD14+ Monocyte\", \n                                              seurat_clusters == 6 ~ \"Intermediate Monocyte\", \n                                              seurat_clusters == 7 ~ \"Dendritic Cell\", \n                                              TRUE ~ NA_character_))\n```\n:::\n\n\nHere's the final celltype annotations on our original UMAP embedding. \n\n\n::: {.cell hash='SCISSORS_Reclustering_cache/html/unnamed-chunk-22_49b656dfe49548a0350296b4db9a00bb'}\n\n```{.r .cell-code}\nDimPlot(pbmc, group.by = \"celltype\", pt.size = 1) + \n  scale_color_paletteer_d(\"ggsci::default_nejm\") + \n  labs(x = \"UMAP 1\", \n       y = \"UMAP 2\", \n       color = \"Celltype\") + \n  theme(axis.ticks = element_blank(), \n        axis.text = element_blank(), \n        plot.title = element_blank())\n```\n\n::: {.cell-output-display}\n![](SCISSORS_Reclustering_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n# Conclusions \n\nWe were able to use `SCISSORS` to estimate a biologically meaningful subclustering that is to some degree supported by canonical marker genes from the literature. I'll note that while these monocyte subtype annotations might be useful, we didn't analyze the entire dataset;  those familiar with the PBMC3k dataset will know that what we labelled the CD8+ T cell cluster actually also contains NK cells. This analysis is not meant to be exhaustive or final, and serves mostly to show how and why `SCISSORS` is used. Please reach out to me with questions on the package [via email](mailto:jrleary@live.unc.edu), or by [opening an issueon the GitHub repository](https://github.com/jr-leary7/SCISSORS/issues). \n\n# Session Info \n\n\n::: {.cell hash='SCISSORS_Reclustering_cache/html/unnamed-chunk-23_47df15ba376447a3233f33a42551ab9f'}\n\n```{.r .cell-code}\nsessioninfo::session_info()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.1 (2022-06-23)\n os       macOS Big Sur ... 10.16\n system   x86_64, darwin17.0\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/New_York\n date     2023-11-02\n pandoc   2.19.2 @ /usr/local/bin/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package           * version   date (UTC) lib source\n abind               1.4-5     2016-07-21 [1] CRAN (R 4.2.0)\n AnnotationDbi       1.58.0    2022-04-26 [1] Bioconductor\n assertthat          0.2.1     2019-03-21 [1] CRAN (R 4.2.0)\n Biobase             2.56.0    2022-04-26 [1] Bioconductor\n BiocFileCache       2.4.0     2022-04-26 [1] Bioconductor\n BiocGenerics        0.42.0    2022-04-26 [1] Bioconductor\n biomaRt             2.52.0    2022-04-26 [1] Bioconductor\n Biostrings          2.64.1    2022-08-18 [1] Bioconductor\n bit                 4.0.4     2020-08-04 [1] CRAN (R 4.2.0)\n bit64               4.0.5     2020-08-30 [1] CRAN (R 4.2.0)\n bitops              1.0-7     2021-04-24 [1] CRAN (R 4.2.0)\n blob                1.2.3     2022-04-10 [1] CRAN (R 4.2.0)\n cachem              1.0.6     2021-08-19 [1] CRAN (R 4.2.0)\n cli                 3.6.1     2023-03-23 [1] CRAN (R 4.2.0)\n cluster             2.1.4     2022-08-22 [1] CRAN (R 4.2.0)\n codetools           0.2-18    2020-11-04 [1] CRAN (R 4.2.1)\n colorspace          2.0-3     2022-02-21 [1] CRAN (R 4.2.0)\n coop                0.6-3     2021-09-19 [1] CRAN (R 4.2.0)\n cowplot             1.1.1     2020-12-30 [1] CRAN (R 4.2.0)\n crayon              1.5.1     2022-03-26 [1] CRAN (R 4.2.0)\n curl                4.3.2     2021-06-23 [1] CRAN (R 4.2.0)\n data.table          1.14.2    2021-09-27 [1] CRAN (R 4.2.0)\n DBI                 1.1.3     2022-06-18 [1] CRAN (R 4.2.0)\n dbplyr              2.2.1     2022-06-27 [1] CRAN (R 4.2.0)\n deldir              1.0-6     2021-10-23 [1] CRAN (R 4.2.0)\n digest              0.6.29    2021-12-01 [1] CRAN (R 4.2.0)\n doParallel          1.0.17    2022-02-07 [1] CRAN (R 4.2.0)\n dplyr             * 1.0.9     2022-04-28 [1] CRAN (R 4.2.0)\n ellipsis            0.3.2     2021-04-29 [1] CRAN (R 4.2.0)\n evaluate            0.16      2022-08-09 [1] CRAN (R 4.2.0)\n fansi               1.0.3     2022-03-24 [1] CRAN (R 4.2.0)\n farver              2.1.1     2022-07-06 [1] CRAN (R 4.2.0)\n fastmap             1.1.0     2021-01-25 [1] CRAN (R 4.2.0)\n filelock            1.0.2     2018-10-05 [1] CRAN (R 4.2.0)\n fitdistrplus        1.1-8     2022-03-10 [1] CRAN (R 4.2.0)\n foreach             1.5.2     2022-02-02 [1] CRAN (R 4.2.0)\n future              1.27.0    2022-07-22 [1] CRAN (R 4.2.0)\n future.apply        1.9.0     2022-04-25 [1] CRAN (R 4.2.0)\n generics            0.1.3     2022-07-05 [1] CRAN (R 4.2.0)\n GenomeInfoDb        1.32.3    2022-08-09 [1] Bioconductor\n GenomeInfoDbData    1.2.8     2022-08-29 [1] Bioconductor\n ggplot2           * 3.4.2     2023-04-03 [1] CRAN (R 4.2.0)\n ggrepel             0.9.1     2021-01-15 [1] CRAN (R 4.2.0)\n ggridges            0.5.3     2021-01-08 [1] CRAN (R 4.2.0)\n globals             0.16.1    2022-08-28 [1] CRAN (R 4.2.1)\n glue                1.6.2     2022-02-24 [1] CRAN (R 4.2.0)\n goftest             1.2-3     2021-10-07 [1] CRAN (R 4.2.0)\n gridExtra           2.3       2017-09-09 [1] CRAN (R 4.2.0)\n gtable              0.3.0     2019-03-25 [1] CRAN (R 4.2.0)\n hms                 1.1.2     2022-08-19 [1] CRAN (R 4.2.0)\n htmltools           0.5.3     2022-07-18 [1] CRAN (R 4.2.0)\n htmlwidgets         1.5.4     2021-09-08 [1] CRAN (R 4.2.0)\n httpuv              1.6.5     2022-01-05 [1] CRAN (R 4.2.0)\n httr                1.4.4     2022-08-17 [1] CRAN (R 4.2.0)\n ica                 1.0-3     2022-07-08 [1] CRAN (R 4.2.0)\n igraph              1.3.4     2022-07-19 [1] CRAN (R 4.2.0)\n IRanges             2.30.1    2022-08-18 [1] Bioconductor\n irlba               2.3.5     2021-12-06 [1] CRAN (R 4.2.0)\n iterators           1.0.14    2022-02-05 [1] CRAN (R 4.2.0)\n jsonlite            1.8.0     2022-02-22 [1] CRAN (R 4.2.0)\n KEGGREST            1.36.3    2022-07-14 [1] Bioconductor\n KernSmooth          2.23-20   2021-05-03 [1] CRAN (R 4.2.1)\n knitr               1.40      2022-08-24 [1] CRAN (R 4.2.0)\n labeling            0.4.2     2020-10-20 [1] CRAN (R 4.2.0)\n later               1.3.0     2021-08-18 [1] CRAN (R 4.2.0)\n lattice             0.20-45   2021-09-22 [1] CRAN (R 4.2.1)\n lazyeval            0.2.2     2019-03-15 [1] CRAN (R 4.2.0)\n leiden              0.4.2     2022-05-09 [1] CRAN (R 4.2.0)\n lifecycle           1.0.3     2022-10-07 [1] CRAN (R 4.2.0)\n listenv             0.8.0     2019-12-05 [1] CRAN (R 4.2.0)\n lmtest              0.9-40    2022-03-21 [1] CRAN (R 4.2.0)\n magrittr          * 2.0.3     2022-03-30 [1] CRAN (R 4.2.0)\n MASS                7.3-58.1  2022-08-03 [1] CRAN (R 4.2.0)\n Matrix              1.4-1     2022-03-23 [1] CRAN (R 4.2.1)\n matrixStats         0.62.0    2022-04-19 [1] CRAN (R 4.2.0)\n memoise             2.0.1     2021-11-26 [1] CRAN (R 4.2.0)\n mgcv                1.8-40    2022-03-29 [1] CRAN (R 4.2.1)\n mime                0.12      2021-09-28 [1] CRAN (R 4.2.0)\n miniUI              0.1.1.1   2018-05-18 [1] CRAN (R 4.2.0)\n munsell             0.5.0     2018-06-12 [1] CRAN (R 4.2.0)\n nlme                3.1-159   2022-08-09 [1] CRAN (R 4.2.0)\n paletteer         * 1.5.0     2022-10-19 [1] CRAN (R 4.2.0)\n parallelly          1.32.1    2022-07-21 [1] CRAN (R 4.2.0)\n patchwork         * 1.1.2     2022-08-19 [1] CRAN (R 4.2.0)\n pbapply             1.5-0     2021-09-16 [1] CRAN (R 4.2.0)\n pbmc3k.SeuratData * 3.1.4     2022-11-11 [1] local\n phateR              1.0.7     2021-02-12 [1] CRAN (R 4.2.0)\n pillar              1.8.1     2022-08-19 [1] CRAN (R 4.2.0)\n pkgconfig           2.0.3     2019-09-22 [1] CRAN (R 4.2.0)\n plotly              4.10.0    2021-10-09 [1] CRAN (R 4.2.0)\n plyr                1.8.7     2022-03-24 [1] CRAN (R 4.2.0)\n png                 0.1-7     2013-12-03 [1] CRAN (R 4.2.0)\n polyclip            1.10-0    2019-03-14 [1] CRAN (R 4.2.0)\n prettyunits         1.1.1     2020-01-24 [1] CRAN (R 4.2.0)\n prismatic           1.1.1     2022-08-15 [1] CRAN (R 4.2.0)\n progress            1.2.2     2019-05-16 [1] CRAN (R 4.2.0)\n progressr           0.10.1    2022-06-03 [1] CRAN (R 4.2.0)\n promises            1.2.0.1   2021-02-11 [1] CRAN (R 4.2.0)\n purrr               0.3.4     2020-04-17 [1] CRAN (R 4.2.0)\n R6                  2.5.1     2021-08-19 [1] CRAN (R 4.2.0)\n RANN                2.6.1     2019-01-08 [1] CRAN (R 4.2.0)\n rappdirs            0.3.3     2021-01-31 [1] CRAN (R 4.2.0)\n RColorBrewer        1.1-3     2022-04-03 [1] CRAN (R 4.2.0)\n Rcpp                1.0.9     2022-07-08 [1] CRAN (R 4.2.0)\n RcppAnnoy           0.0.19    2021-07-30 [1] CRAN (R 4.2.0)\n RCurl               1.98-1.8  2022-07-30 [1] CRAN (R 4.2.0)\n rematch2            2.1.2     2020-05-01 [1] CRAN (R 4.2.0)\n reshape2            1.4.4     2020-04-09 [1] CRAN (R 4.2.0)\n reticulate          1.28      2023-01-27 [1] CRAN (R 4.2.0)\n rgeos               0.5-9     2021-12-15 [1] CRAN (R 4.2.0)\n rlang               1.1.1     2023-04-28 [1] CRAN (R 4.2.0)\n rmarkdown           2.16      2022-08-24 [1] CRAN (R 4.2.0)\n ROCR                1.0-11    2020-05-02 [1] CRAN (R 4.2.0)\n rpart               4.1.16    2022-01-24 [1] CRAN (R 4.2.1)\n RSQLite             2.2.16    2022-08-17 [1] CRAN (R 4.2.0)\n Rtsne               0.16      2022-04-17 [1] CRAN (R 4.2.0)\n S4Vectors           0.34.0    2022-04-26 [1] Bioconductor\n scales              1.2.1     2022-08-20 [1] CRAN (R 4.2.0)\n scattermore         0.8       2022-02-14 [1] CRAN (R 4.2.0)\n SCISSORS          * 1.2.0     2023-04-10 [1] local\n sctransform         0.3.4     2022-08-20 [1] CRAN (R 4.2.0)\n sessioninfo         1.2.2     2021-12-06 [1] CRAN (R 4.2.0)\n Seurat            * 4.1.1     2022-05-02 [1] CRAN (R 4.2.0)\n SeuratData        * 0.2.2     2022-08-29 [1] Github (satijalab/seurat-data@d6a8ce6)\n SeuratObject      * 4.1.0     2022-05-01 [1] CRAN (R 4.2.0)\n shiny               1.7.2     2022-07-19 [1] CRAN (R 4.2.0)\n sp                * 1.5-0     2022-06-05 [1] CRAN (R 4.2.0)\n spatstat.core       2.4-4     2022-05-18 [1] CRAN (R 4.2.0)\n spatstat.data       3.0-0     2022-10-21 [1] CRAN (R 4.2.0)\n spatstat.geom       3.0-3     2022-10-25 [1] CRAN (R 4.2.0)\n spatstat.random     3.0-1     2022-11-03 [1] CRAN (R 4.2.0)\n spatstat.sparse     3.0-0     2022-10-21 [1] CRAN (R 4.2.0)\n spatstat.utils      3.0-1     2022-10-19 [1] CRAN (R 4.2.0)\n stringi             1.7.8     2022-07-11 [1] CRAN (R 4.2.0)\n stringr             1.4.1     2022-08-20 [1] CRAN (R 4.2.0)\n survival            3.4-0     2022-08-09 [1] CRAN (R 4.2.0)\n tensor              1.5       2012-05-05 [1] CRAN (R 4.2.0)\n tibble              3.1.8     2022-07-22 [1] CRAN (R 4.2.0)\n tidyr               1.2.0     2022-02-01 [1] CRAN (R 4.2.0)\n tidyselect          1.1.2     2022-02-21 [1] CRAN (R 4.2.0)\n utf8                1.2.2     2021-07-24 [1] CRAN (R 4.2.0)\n uwot                0.1.16    2023-06-29 [1] CRAN (R 4.2.0)\n vctrs               0.6.3     2023-06-14 [1] CRAN (R 4.2.0)\n viridisLite         0.4.1     2022-08-22 [1] CRAN (R 4.2.0)\n withr               2.5.0     2022-03-03 [1] CRAN (R 4.2.0)\n xfun                0.32      2022-08-10 [1] CRAN (R 4.2.0)\n XML                 3.99-0.10 2022-06-09 [1] CRAN (R 4.2.0)\n xml2                1.3.3     2021-11-30 [1] CRAN (R 4.2.0)\n xtable              1.8-4     2019-04-21 [1] CRAN (R 4.2.0)\n XVector             0.36.0    2022-04-26 [1] Bioconductor\n yaml                2.3.5     2022-02-21 [1] CRAN (R 4.2.0)\n zlibbioc            1.42.0    2022-04-26 [1] Bioconductor\n zoo                 1.8-10    2022-04-15 [1] CRAN (R 4.2.0)\n\n [1] /Library/Frameworks/R.framework/Versions/4.2/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}