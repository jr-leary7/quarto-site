{
  "hash": "4721be38bada4e48324b8b7c86fec022",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Investigating Transcription Factor Activity During Neurogenesis\"\nauthor:\n  name: Jack R. Leary\n  email: j.leary@ufl.edu\n  orcid: 0009-0004-8821-3269\n  affiliations:\n    - name: University of Florida\n      department: Biostatistics \n      city: Gainesville\n      state: FL\ndate: today\ndate-format: long\nformat:\n  html:\n    code-fold: show\n    code-copy: true\n    code-tools: true\n    toc: true\n    toc-depth: 2\n    embed-resources: true\n    fig-format: retina\n    fig-width: 9\n    fig-height: 6\n    df-print: kable\n    link-external-newwindow: true\n    tbl-cap-location: bottom\n    fig-cap-location: bottom\n    number-sections: true\nexecute:\n  cache: false\n  freeze: auto\n---\n\n\n\n\n# Introduction {#sec-intro}\n\n# Libraries {#sec-libs}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)                 # data manipulation\nlibrary(Seurat)                # scRNA-seq tools\nlibrary(scLANE)                # trajectory DE\nlibrary(ggplot2)               # pretty plots\nlibrary(slingshot)             # pseudotime estimation\nlibrary(SingleCellExperiment)  # scRNA-seq data structures\n```\n:::\n\n\n# Color palettes {#sec-colors}\n\n\n::: {.cell}\n\n```{.r .cell-code}\npalette_celltype <- paletteer::paletteer_d(\"ggsci::category10_d3\")\npalette_cluster <- paletteer::paletteer_d(\"ggsci::nrc_npg\")\npalette_week <- paletteer::paletteer_d(\"ggsci::default_igv\")\npalette_heatmap <- paletteer::paletteer_d(\"MetBrewer::Hiroshige\", direction = -1)\n```\n:::\n\n\n# Data {#sec-data}\n\nWe begin by reading in the data from [Zhong *et al* (2018)](https://doi.org/10.1038/nature25980), which contains 2,394 cells from developing human prefrontal cortex (PFC) samples. The counts and metadata are handily available in the `scRNAseq` package. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsce_brain <- scRNAseq::ZhongPrefrontalData()\nseu_brain <- CreateSeuratObject(counts(sce_brain), \n                                assay = \"RNA\", \n                                meta.data = as.data.frame(colData(sce_brain)), \n                                project = \"neurogenesis\", \n                                min.cells = 0,\n                                min.features = 0)\n```\n:::\n\n\n# Preprocessing {#sec-preprocess}\n\nFirst, we'll need to integrate expression across the 39 samples. We'll do this using the new `Layers` functionality implemented in `Seurat` v5 ([vignette](https://satijalab.org/seurat/articles/seurat5_integration)). \n\n\n::: {.cell}\n\n```{.r .cell-code}\nseu_brain[[\"RNA\"]] <- split(seu_brain[[\"RNA\"]], f = seu_brain$sample)\n```\n:::\n\n\nNext, we normalize the counts, identify highly variable genes (HVGs), and run PCA - all of these are required prior to integration.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseu_brain <- NormalizeData(seu_brain, verbose = FALSE) %>% \n             FindVariableFeatures(nfeatures = 3000, verbose = FALSE) %>% \n             ScaleData(verbose = FALSE) %>% \n             RunPCA(npcs = 50, \n                    verbose = FALSE, \n                    seed.use = 312, \n                    approx = TRUE)\n```\n:::\n\n\nWe use [canonical correlation analysis integration](https://doi.org/10.1038/nbt.4096) to harmonize our samples. It's necessary to tweak a few of the nearest-neighbor-related parameters since some of our samples have few cells.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nseu_brain <- IntegrateLayers(seu_brain, \n                             method = CCAIntegration, \n                             orig.reduction = \"pca\", \n                             new.reduction = \"integrated.cca\", \n                             k.weight = 10, \n                             k.anchor = 10, \n                             k.score = 10, \n                             k.filter = 10, \n                             dims = 1:10, \n                             nn.method = \"annoy\", \n                             normalization.method = \"LogNormalize\", \n                             verbose = FALSE)\n```\n:::\n\n\nWe perform dimension reduction with UMAP, embed the cells in a shared nearest-neighbor (SNN) graph, and partition the graph into clusters via the Leiden algorithm. We also identify subclusters in two of the larger main clusters. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nseu_brain <- RunUMAP(seu_brain, \n                     dims = 1:30, \n                     reduction = \"integrated.cca\", \n                     return.model = TRUE, \n                     n.neighbors = 30, \n                     n.components = 2, \n                     metric = \"cosine\", \n                     seed.use = 312, \n                     verbose = FALSE) %>% \n             FindNeighbors(reduction = \"integrated.cca\", \n                           dims = 1:30, \n                           k.param = 30, \n                           nn.method = \"annoy\", \n                           annoy.metric = \"cosine\",\n                           verbose = FALSE) %>% \n             FindClusters(resolution = 0.6, \n                          random.seed = 312, \n                          algorithm = 4, \n                          method = \"igraph\",\n                          verbose = FALSE) %>% \n             FindSubCluster(cluster = \"5\", \n                            graph.name = \"RNA_snn\", \n                            subcluster.name = \"seurat_subclusters\", \n                            resolution = 0.25, \n                            algorithm = 4)\nseu_brain@meta.data <- mutate(seu_brain@meta.data, \n                              seurat_clusters = as.factor(as.integer(as.factor(seurat_subclusters))))\nIdents(seu_brain) <- \"seurat_clusters\"\nseu_brain <- FindSubCluster(seu_brain, \n                            cluster = \"4\", \n                            graph.name = \"RNA_snn\", \n                            subcluster.name = \"seurat_subclusters\", \n                            resolution = 0.25, \n                            algorithm = 4)\nseu_brain@meta.data <- mutate(seu_brain@meta.data, \n                              seurat_clusters = as.factor(as.integer(as.factor(seurat_subclusters))))\nIdents(seu_brain) <- \"seurat_clusters\"\n```\n:::\n\n\nOur 9 clusters appear to be relatively cleanly-separated on our UMAP embedding. \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\np1 <- data.frame(Embeddings(seu_brain, \"umap\")) %>% \n      mutate(seurat_clusters = seu_brain$seurat_clusters) %>% \n      ggplot(aes(x = umap_1, y = umap_2, color = seurat_clusters)) + \n      geom_point(size = 1.5, \n                 alpha = 0.75, \n                 stroke = 0) + \n      scale_color_manual(values = palette_cluster) + \n      labs(x = \"UMAP 1\", \n           y = \"UMAP 2\", \n           color = \"Leiden Cluster\") + \n      theme_scLANE(umap = TRUE) + \n      guides(color = guide_legend(override.aes = list(size = 4, alpha = 1, stroke = 0.25)))\np1\n```\n\n::: {.cell-output-display}\n![UMAP embedding colored by cluster ID.](Neurogenesis_with_scLANE_files/figure-html/fig-umap_cluster-1.png){#fig-umap_cluster width=576}\n:::\n:::\n\n\n# Analysis {#sec-analysis}\n\n## Celltype annotation\n\nUsing a Wilcox test, we perform a basic DE analysis in order to identify putative marker genes for each cluster. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nseu_brain <- JoinLayers(seu_brain)\npossible_markers <- FindAllMarkers(seu_brain, \n                                   assay = \"RNA\", \n                                   logfc.threshold = 0.3, \n                                   test.use = \"wilcox\", \n                                   slot = \"data\", \n                                   min.pct = 0.1, \n                                   only.pos = TRUE, \n                                   verbose = FALSE, \n                                   random.seed = 312)\ntop5_possible_markers <- arrange(possible_markers, p_val_adj) %>% \n                         with_groups(cluster, \n                                     slice_head, \n                                     n = 5)\n```\n:::\n\n\nWe visualize the top 5 markers per cluster using a dotplot. Clear expression patterns emerge - for example, expression of NK2 homeobox 2 (*NKX2-2*) is clearly specific to cluster 9. \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\np2 <- DotPlot(seu_brain, \n              features = unique(top5_possible_markers$gene),\n              assay = \"RNA\", \n              group.by = \"seurat_clusters\", \n              dot.scale = 5,\n              cols = paletteer::paletteer_d(\"wesanderson::Zissou1\")[c(1, 5)], \n              scale.by = \"radius\") + \n      coord_flip() +\n      labs(y = \"Leiden Cluster\") +\n      theme_scLANE() + \n      theme(axis.title.y = element_blank(), \n            axis.text.y = element_text(face = \"italic\"))\np2\n```\n\n::: {.cell-output-display}\n![Putative marker genes for each cluster.](Neurogenesis_with_scLANE_files/figure-html/fig-dotplot_cluster-1.png){#fig-dotplot_cluster width=480}\n:::\n:::\n\n\nBased on the clustering and DE analysis, we assign celltype labels to each cluster. \n\n::: {.callout-note}\nThe celltype annotations we're assigning are mostly based on [Figs. 1-3](https://www.nature.com/articles/nature25980#Fig1) and [Extended Data Figs. 1-2 & 4](https://www.nature.com/articles/nature25980#Fig5) from [the original publication](https://doi.org/10.1038/nature25980).\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseu_brain@meta.data <- mutate(seu_brain@meta.data, \n                              celltype = case_when(seurat_clusters == \"1\" ~ \"Excitatory Neuron\", \n                                                   seurat_clusters == \"2\" ~ \"Interneuron\", \n                                                   seurat_clusters == \"3\" ~ \"Excitatory Neuron\", \n                                                   seurat_clusters == \"4\" ~ \"Neuronal Progenitor\", \n                                                   seurat_clusters == \"5\" ~ \"Astrocyte\", \n                                                   seurat_clusters == \"6\" ~ \"Neuronal Progenitor\", \n                                                   seurat_clusters == \"7\" ~ \"Microglia\", \n                                                   seurat_clusters == \"8\" ~ \"Excitatory Neuron\", \n                                                   seurat_clusters == \"9\" ~ \"Oligodendrocyte Progenitor\", \n                                                   TRUE ~ NA_character_), \n                              celltype_short = case_when(seurat_clusters == \"1\" ~ \"Exc. Neuron\", \n                                                         seurat_clusters == \"2\" ~ \"Interneuron\", \n                                                         seurat_clusters == \"3\" ~ \"Exc. Neuron\", \n                                                         seurat_clusters == \"4\" ~ \"NPC\", \n                                                         seurat_clusters == \"5\" ~ \"Astrocyte\", \n                                                         seurat_clusters == \"6\" ~ \"NPC\", \n                                                         seurat_clusters == \"7\" ~ \"Microglia\", \n                                                         seurat_clusters == \"8\" ~ \"Exc. Neuron\", \n                                                         seurat_clusters == \"9\" ~ \"OPC\", \n                                                         TRUE ~ NA_character_)) %>% \n                              mutate(celltype_short = as.factor(celltype_short))\n```\n:::\n\n\nWe plot our new celltype labels on our UMAP embedding. \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\np3 <- data.frame(Embeddings(seu_brain, \"umap\")) %>% \n      mutate(celltype = seu_brain$celltype) %>% \n      ggplot(aes(x = umap_1, y = umap_2, color = celltype)) + \n      geom_point(size = 1.5, \n                 alpha = 0.75, \n                 stroke = 0) + \n      scale_color_manual(values = palette_celltype) + \n      labs(x = \"UMAP 1\", y = \"UMAP 2\") + \n      theme_scLANE(umap = TRUE) + \n      theme(legend.title = element_blank()) + \n      guides(color = guide_legend(override.aes = list(size = 4, alpha = 1, stroke = 0.25)))\np3\n```\n\n::: {.cell-output-display}\n![UMAP embedding colored by celltype.](Neurogenesis_with_scLANE_files/figure-html/fig-umap_celltype-1.png){#fig-umap_celltype width=576}\n:::\n:::\n\n\nWe re-run our DE testing between our annotated celltypes. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nIdents(seu_brain) <- \"celltype_short\"\ncelltype_markers <- FindAllMarkers(seu_brain, \n                                   assay = \"RNA\", \n                                   logfc.threshold = 0.3, \n                                   test.use = \"wilcox\", \n                                   slot = \"data\", \n                                   min.pct = 0.1, \n                                   only.pos = TRUE, \n                                   verbose = FALSE, \n                                   random.seed = 312) %>% \n                    mutate(cluster = factor(cluster, levels = levels(seu_brain$celltype_short)))\ntop5_celltype_markers <- arrange(celltype_markers, p_val_adj) %>% \n                         with_groups(cluster, \n                                     slice_head, \n                                     n = 5)\n```\n:::\n\n\nThe expression trends are clear when visualized. \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\np4 <- DotPlot(seu_brain, \n              features = unique(top5_celltype_markers$gene),\n              assay = \"RNA\", \n              group.by = \"celltype_short\", \n              dot.scale = 5,\n              cols = paletteer::paletteer_d(\"wesanderson::Zissou1\")[c(1, 5)], \n              scale.by = \"radius\") + \n      coord_flip() +\n      theme_scLANE() + \n      theme(axis.title = element_blank(), \n            axis.text.y = element_text(face = \"italic\"), \n            axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))\np4\n```\n\n::: {.cell-output-display}\n![Putative marker genes for each celltype.](Neurogenesis_with_scLANE_files/figure-html/fig-dotplot_celltype-1.png){#fig-dotplot_celltype width=384}\n:::\n:::\n\n\n## Trajectory inference\n\nAs performed by the original authors, we filter out microglial and interneuron cells. This is done because \"microglia are mesoderm-derived cells and interneurons are generated in the ganglionic eminence and migrate tangentially to the PFC\" i.e., they do not belong to neuronal or glial lineages we're interested in.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nseu_brain <- seu_brain[, !seu_brain$celltype %in% c(\"Interneuron\", \"Microglia\")]\n```\n:::\n\n\nSince we've subset the data, we now need to re-embed the cells using UMAP. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nseu_brain <- RunUMAP(seu_brain, \n                     dims = 1:30, \n                     reduction = \"integrated.cca\", \n                     return.model = TRUE, \n                     n.neighbors = 30, \n                     n.components = 2, \n                     metric = \"cosine\", \n                     seed.use = 312, \n                     verbose = FALSE)\n```\n:::\n\n\nWe can already roughly see how the trajectory will be fit - the root population is the neuronal progenitors, with the other three celltypes being terminal cell fates. As such, we should aim to fit three lineages during trajectory estimation. \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\np5 <- data.frame(Embeddings(seu_brain, \"umap\")) %>% \n      mutate(celltype = seu_brain$celltype) %>% \n      ggplot(aes(x = umap_1, y = umap_2, color = celltype)) + \n      geom_point(size = 1.5, \n                 alpha = 0.75, \n                 stroke = 0) + \n      scale_color_manual(values = palette_celltype) + \n      labs(x = \"UMAP 1\", y = \"UMAP 2\") + \n      theme_scLANE(umap = TRUE) + \n      theme(legend.title = element_blank()) + \n      guides(color = guide_legend(override.aes = list(size = 4, alpha = 1, stroke = 0.25)))\np5\n```\n\n::: {.cell-output-display}\n![UMAP embedding colored by filtered celltypes.](Neurogenesis_with_scLANE_files/figure-html/fig-umap_celltype_subset-1.png){#fig-umap_celltype_subset width=576}\n:::\n:::\n\n\n### Pseuotime estimation\n\nWe'll use the `Slingshot` package to fit principal curves through our UMAP embedding & estimate lineage-specific pseudotime. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsling_res <- slingshot(Embeddings(seu_brain, \"umap\"), \n                       clusterLabels = seu_brain$celltype, \n                       start.clus = \"Neuronal Progenitor\", \n                       end.clus = c(\"Astrocyte\", \"Oligodendrocyte Progenitor\", \"Excitatory Neuron\"), \n                       approx_points = 1000)\nsling_curves <- slingCurves(sling_res, as.df = TRUE)\nsling_mst <- slingMST(sling_res, as.df = TRUE)\nsling_pt <- slingPseudotime(sling_res) %>% \n            as.data.frame() %>%\n            rowwise() %>% \n            mutate(PT_Overall = mean(c_across(starts_with(\"Lineage\")), na.rm = TRUE)) %>% \n            ungroup() %>% \n            mutate(across(c(starts_with(\"Lineage\"), PT_Overall), \n                          \\(x) (x - min(x, na.rm = TRUE)) / (max(x, na.rm = TRUE) - min(x, na.rm = TRUE))))\nseu_brain <- AddMetaData(seu_brain, \n                         metadata = sling_pt$PT_Overall, \n                         col.name = \"PT_Overall\")\n```\n:::\n\n\nAbove, we created a mean-aggregated pseudotime across all three lineages. This serves as a proxy measurement for overall developmental progression. \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\np6 <- data.frame(Embeddings(seu_brain, \"umap\")) %>% \n      mutate(PT_Overall = seu_brain$PT_Overall) %>% \n      ggplot(aes(x = umap_1, y = umap_2, color = PT_Overall)) + \n      geom_point(size = 1.5, \n                 alpha = 0.75, \n                 stroke = 0) + \n      scale_color_gradientn(colors = palette_heatmap, labels = scales::label_number(accuracy = .01)) + \n      labs(x = \"UMAP 1\", \n           y = \"UMAP 2\", \n           color = \"Mean Pseudotime\") + \n      theme_scLANE(umap = TRUE)\np6\n```\n\n::: {.cell-output-display}\n![UMAP embedding colored by mean-aggregated pseudotime.](Neurogenesis_with_scLANE_files/figure-html/fig-umap_mean_PT-1.png){#fig-umap_mean_PT width=576}\n:::\n:::\n\n\nIn general, larger pseudotime values are generated for later developmental stages.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\np7 <- data.frame(PT_Overall = sling_pt$PT_Overall, \n                 week = seu_brain$week) %>% \n      ggplot(aes(x = week, y = PT_Overall, color = week)) + \n      ggbeeswarm::geom_quasirandom(size = 1.5,\n                                   alpha = 0.75, \n                                   stroke = 0, \n                                   show.legend = FALSE) + \n      stat_summary(geom = \"point\", \n                   fun = \"mean\",\n                   color =  \"black\", \n                   size = 3.5) + \n      scale_color_manual(values = palette_week) + \n      labs(x = \"Gestational Week\", y = \"Mean Pseudotime\") +\n      theme_scLANE()\np7\n```\n\n::: {.cell-output-display}\n![Beeswarm plots of the distribution of mean-aggregated pseudotime for each gestational week.](Neurogenesis_with_scLANE_files/figure-html/fig-beeswarm_pt-1.png){#fig-beeswarm_pt width=576}\n:::\n:::\n\n\nDuring pseudotime estimation `Slingshot` estimates a minimum spanning tree (MST), which serves as a rough graph abstraction of the relationships between celltypes. Our MST looks to correspond well with our exiting biological knowledge. \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\np8 <- data.frame(Embeddings(seu_brain, \"umap\")) %>% \n      mutate(celltype = seu_brain$celltype) %>% \n      ggplot(aes(x = umap_1, y = umap_2, color = celltype)) + \n      geom_point(size = 1.5, \n                 alpha = 0.75, \n                 stroke = 0) + \n      geom_path(data = sling_mst, mapping = aes(x = umap_1, y = umap_2, group = Lineage), \n                linewidth = 1.25, \n                color = \"black\") + \n      geom_point(data = sling_mst, mapping = aes(x = umap_1, y = umap_2, fill = Cluster), \n                color = \"black\", \n                shape = 21, \n                size = 4.5, \n                stroke = 1.25, \n                show.legend = FALSE) + \n      scale_color_manual(values = palette_celltype) + \n      scale_fill_manual(values = palette_celltype) + \n      labs(x = \"UMAP 1\", y = \"UMAP 2\") + \n      theme_scLANE(umap = TRUE) +  \n      theme(legend.title = element_blank()) + \n      guides(color = guide_legend(override.aes = list(size = 4, alpha = 1, stroke = 0.25)))\np8\n```\n\n::: {.cell-output-display}\n![UMAP embedding with MST from Slinghot overlaid.](Neurogenesis_with_scLANE_files/figure-html/fig-umap_MST-1.png){#fig-umap_MST width=576}\n:::\n:::\n\n\nThe three lineage seem to correctly identify the developmental relationships we're looking for. \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\np9 <- data.frame(Embeddings(seu_brain, \"umap\")) %>% \n      bind_cols(sling_pt) %>% \n      tidyr::pivot_longer(starts_with(\"Lineage\"), \n                          names_to = \"lineage\", \n                          values_to = \"pseudotime\") %>% \n      ggplot(aes(x = umap_1, y = umap_2, color = pseudotime)) + \n      facet_wrap(~lineage, nrow = 3) + \n      geom_point(size = 1.5, \n                 alpha = 0.75, \n                 stroke = 0) + \n      labs(x = \"UMAP 1\", \n           y = \"UMAP 2\", \n           color = \"Pseudotime\") + \n      scale_color_gradientn(colors = palette_heatmap, labels = scales::label_number(accuracy = .01)) + \n      theme_scLANE(umap = TRUE)\np9\n```\n\n::: {.cell-output-display}\n![UMAP embedding colored by lineage-specific pseudotime.](Neurogenesis_with_scLANE_files/figure-html/fig-umap_lineage_PT-1.png){#fig-umap_lineage_PT width=576}\n:::\n:::\n\n\nAs such, we add a celltype label to each lineage corresponding to each lineage's terminal cell fate.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsling_pt_long <- data.frame(Embeddings(seu_brain, \"umap\")) %>% \n                 bind_cols(sling_pt) %>% \n                 tidyr::pivot_longer(starts_with(\"Lineage\"), \n                                     names_to = \"lineage\", \n                                     values_to = \"pseudotime\") %>% \n                 mutate(lineage_label = case_when(lineage == \"Lineage1\" ~ \"Excitatory Neuron\", \n                                                  lineage == \"Lineage2\" ~ \"Astrocyte\", \n                                                  lineage == \"Lineage3\" ~ \"Oligodendrocyte Progenitor\", \n                                                  TRUE ~ NA_character_))\n```\n:::\n\n\nWe can also plot the principal curves from `Slingshot` on our UMAP embedding. While the curves are a *little* noisy, they overall seem to recapitulate the underlying biology well. \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\np10 <- data.frame(Embeddings(seu_brain, \"umap\")) %>% \n       mutate(celltype = seu_brain$celltype) %>% \n       ggplot(aes(x = umap_1, y = umap_2, color = celltype)) + \n       geom_point(size = 1.5, \n                  alpha = 0.75, \n                  stroke = 0) + \n       geom_path(data = sling_curves,\n                 mapping = aes(x = umap_1, y = umap_2, group = Lineage), \n                 color = \"black\", \n                 linewidth = 1.5, \n                 alpha = 0.75, \n                 lineend = \"round\") + \n       scale_color_manual(values = palette_celltype) + \n       labs(x = \"UMAP 1\", y = \"UMAP 2\") + \n       theme_scLANE(umap = TRUE) + \n       theme(legend.title = element_blank()) + \n       guides(color = guide_legend(override.aes = list(size = 4, alpha = 1, stroke = 0.25)))\np10\n```\n\n::: {.cell-output-display}\n![UMAP embedding with principal curves from Slinghot overlaid.](Neurogenesis_with_scLANE_files/figure-html/fig-umap_curves-1.png){#fig-umap_curves width=576}\n:::\n:::\n\n\n### Trajectory DE testing\n\nNow that we have a pseudotime estimate for each cell across each lineage, we can perform trajectory differential expression (DE) testing using our package `scLANE`. We test only the top 3,000 HVGs, a heuristic which is motivated by the fact that the UMAP embedding was generated using just expression values from the HVG set. As such, non-HVGs don't have a direct association with pseudotime, and for simple analyses it's usually OK to refrain from testing them. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncell_offset <- createCellOffset(seu_brain)\npt_df <- data.frame(PT1 = sling_pt$Lineage1, \n                    PT2 = sling_pt$Lineage2, \n                    PT3 = sling_pt$Lineage3)\nscLANE_models <- testDynamic(seu_brain, \n                             pt = pt_df, \n                             genes = VariableFeatures(seu_brain), \n                             size.factor.offset = cell_offset, \n                             n.cores = 6L, \n                             verbose = FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nscLANE testing completed for 3000 genes across 3 lineages in 12.361 mins\n```\n\n\n:::\n\n```{.r .cell-code}\nscLANE_de_res <- getResultsDE(scLANE_models)\n```\n:::\n\n\nAfter running the `getResultsDE()` function we now have a tidy table of differential expression statistics. \n\n\n::: {#tbl-scLANE_output .cell tbl-cap='Sample DE test output from scLANE.'}\n\n```{.r .cell-code  code-fold=\"true\"}\nselect(scLANE_de_res, \n       Gene, \n       Lineage, \n       Test_Stat, \n       P_Val, \n       P_Val_Adj,\n       Gene_Dynamic_Overall) %>% \n  mutate(Lineage = case_when(Lineage == \"A\" ~ \"Excitatory Neuron\", \n                             Lineage == \"B\" ~ \"Astrocyte\", \n                             Lineage == \"C\" ~ \"Oligodendrocyte Progenitor\", \n                             TRUE ~ NA_character_), \n         Gene_Dynamic_Overall = if_else(Gene_Dynamic_Overall == 1, \"Dynamic\", \"Static\")) %>% \n  slice_head(n = 10) %>% \n  kableExtra::kbl(digits = 4, \n                  booktabs = TRUE, \n                  col.names = c(\"Gene\", \"Lineage\", \"LRT stat.\", \"P-value\", \"Adj. p-value\", \"Predicted gene status\")) %>% \n  kableExtra::kable_classic(full_width = FALSE, \"hover\")\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\" lightable-classic lightable-hover\" style='font-family: \"Arial Narrow\", \"Source Sans Pro\", sans-serif; width: auto !important; margin-left: auto; margin-right: auto;'>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Gene </th>\n   <th style=\"text-align:left;\"> Lineage </th>\n   <th style=\"text-align:right;\"> LRT stat. </th>\n   <th style=\"text-align:right;\"> P-value </th>\n   <th style=\"text-align:right;\"> Adj. p-value </th>\n   <th style=\"text-align:left;\"> Predicted gene status </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> GTSE1 </td>\n   <td style=\"text-align:left;\"> Astrocyte </td>\n   <td style=\"text-align:right;\"> 67622.20 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:left;\"> Dynamic </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> GTSE1 </td>\n   <td style=\"text-align:left;\"> Oligodendrocyte Progenitor </td>\n   <td style=\"text-align:right;\"> 49492.84 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:left;\"> Dynamic </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> C21orf58 </td>\n   <td style=\"text-align:left;\"> Oligodendrocyte Progenitor </td>\n   <td style=\"text-align:right;\"> 43007.93 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:left;\"> Dynamic </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ZWINT </td>\n   <td style=\"text-align:left;\"> Astrocyte </td>\n   <td style=\"text-align:right;\"> 31439.40 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:left;\"> Dynamic </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> CKAP2L </td>\n   <td style=\"text-align:left;\"> Oligodendrocyte Progenitor </td>\n   <td style=\"text-align:right;\"> 29425.06 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:left;\"> Dynamic </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> PLK1 </td>\n   <td style=\"text-align:left;\"> Oligodendrocyte Progenitor </td>\n   <td style=\"text-align:right;\"> 27513.28 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:left;\"> Dynamic </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> LOC100505715 </td>\n   <td style=\"text-align:left;\"> Astrocyte </td>\n   <td style=\"text-align:right;\"> 26932.25 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:left;\"> Dynamic </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ZWINT </td>\n   <td style=\"text-align:left;\"> Oligodendrocyte Progenitor </td>\n   <td style=\"text-align:right;\"> 23815.41 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:left;\"> Dynamic </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> KIF20A </td>\n   <td style=\"text-align:left;\"> Astrocyte </td>\n   <td style=\"text-align:right;\"> 23451.75 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:left;\"> Dynamic </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ADORA2B </td>\n   <td style=\"text-align:left;\"> Astrocyte </td>\n   <td style=\"text-align:right;\"> 21417.19 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:left;\"> Dynamic </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n### Gene dynamics\n\nHere we visualize the fitted dynamics and knots for three transcription factors (TFs) investigated in the original paper: SRY-box transcription factor 2 ([*SOX2*](https://doi.org/10.1016/S0896-6273(03)00497-5)), paired box 6 ([*PAX6*](https://doi.org/10.3389/fncel.2015.00070)), and oligodendrocyte transcription factor 1 ([*OLIG1*](https://doi.org/10.1523/JNEUROSCI.4962-14.2015)). All three TFs have well-annotated roles in regulating neurogenesis in humans and other species e.g., *Mus musculus*. Interestingly, while *SOX2* and *OLIG1* have markedly different dynamics and knots (transcriptional switches) across lineages, the knots chosen for *PAX6* are pretty similar for all three lineages - even though the dynamics differ. \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\np11 <- getFittedValues(scLANE_models, \n                       genes = c(\"SOX2\", \"PAX6\", \"OLIG1\"), \n                       pt = pt_df, \n                       expr.mat = seu_brain, \n                       size.factor.offset = cell_offset, \n                       cell.meta.data = select(seu_brain@meta.data, celltype)) %>% \n       mutate(lineage_label = case_when(lineage == \"A\" ~ \"Excitatory Neuron\", \n                                        lineage == \"B\" ~ \"Astrocyte\", \n                                        lineage == \"C\" ~ \"Oligodendrocyte Progenitor\", \n                                        TRUE ~ NA_character_)) %>% \n       ggplot(aes(x = pt, y = rna_log1p)) + \n       facet_grid(lineage_label~gene) + \n       geom_point(aes(color = celltype), \n                  size = 2, \n                  alpha = 0.75, \n                  stroke = 0) + \n       geom_vline(data = data.frame(gene = scLANE_models$SOX2$Lineage_A$MARGE_Slope_Data$Gene, \n                                    lineage_label = \"Excitatory Neuron\", \n                                    knot = scLANE_models$SOX2$Lineage_A$MARGE_Slope_Data$Breakpoint), \n                  mapping = aes(xintercept = knot), \n                  linetype = \"dashed\", \n                  color = \"grey20\") + \n       geom_vline(data = data.frame(gene = scLANE_models$SOX2$Lineage_B$MARGE_Slope_Data$Gene, \n                                    lineage_label = \"Astrocyte\", \n                                    knot = scLANE_models$SOX2$Lineage_B$MARGE_Slope_Data$Breakpoint), \n                  mapping = aes(xintercept = knot), \n                  linetype = \"dashed\", \n                  color = \"grey20\") + \n       geom_vline(data = data.frame(gene = scLANE_models$SOX2$Lineage_C$MARGE_Slope_Data$Gene, \n                                    lineage_label = \"Oligodendrocyte Progenitor\", \n                                    knot = scLANE_models$SOX2$Lineage_C$MARGE_Slope_Data$Breakpoint), \n                  mapping = aes(xintercept = knot), \n                  linetype = \"dashed\", \n                  color = \"grey20\") + \n       geom_vline(data = data.frame(gene = scLANE_models$PAX6$Lineage_A$MARGE_Slope_Data$Gene, \n                                    lineage_label = \"Excitatory Neuron\", \n                                    knot = scLANE_models$PAX6$Lineage_A$MARGE_Slope_Data$Breakpoint), \n                  mapping = aes(xintercept = knot), \n                  linetype = \"dashed\", \n                  color = \"grey20\") + \n       geom_vline(data = data.frame(gene = scLANE_models$PAX6$Lineage_B$MARGE_Slope_Data$Gene, \n                                    lineage_label = \"Astrocyte\", \n                                    knot = scLANE_models$PAX6$Lineage_B$MARGE_Slope_Data$Breakpoint), \n                  mapping = aes(xintercept = knot), \n                  linetype = \"dashed\", \n                  color = \"grey20\") + \n       geom_vline(data = data.frame(gene = scLANE_models$PAX6$Lineage_C$MARGE_Slope_Data$Gene, \n                                    lineage_label = \"Oligodendrocyte Progenitor\", \n                                    knot = scLANE_models$PAX6$Lineage_C$MARGE_Slope_Data$Breakpoint), \n                  mapping = aes(xintercept = knot), \n                  linetype = \"dashed\", \n                  color = \"grey20\") + \n       geom_vline(data = data.frame(gene = scLANE_models$OLIG1$Lineage_A$MARGE_Slope_Data$Gene, \n                                    lineage_label = \"Excitatory Neuron\", \n                                    knot = scLANE_models$OLIG1$Lineage_A$MARGE_Slope_Data$Breakpoint), \n                  mapping = aes(xintercept = knot), \n                  linetype = \"dashed\", \n                  color = \"grey20\") + \n       geom_vline(data = data.frame(gene = scLANE_models$OLIG1$Lineage_B$MARGE_Slope_Data$Gene, \n                                    lineage_label = \"Astrocyte\", \n                                    knot = scLANE_models$OLIG1$Lineage_B$MARGE_Slope_Data$Breakpoint), \n                  mapping = aes(xintercept = knot), \n                  linetype = \"dashed\", \n                  color = \"grey20\") + \n       geom_vline(data = data.frame(gene = scLANE_models$OLIG1$Lineage_C$MARGE_Slope_Data$Gene, \n                                    lineage_label = \"Oligodendrocyte Progenitor\", \n                                    knot = scLANE_models$OLIG1$Lineage_C$MARGE_Slope_Data$Breakpoint), \n                  mapping = aes(xintercept = knot), \n                  linetype = \"dashed\", \n                  color = \"grey20\") + \n       geom_ribbon(aes(ymin = scLANE_ci_ll_log1p, ymax = scLANE_ci_ul_log1p), \n                   linewidth = 0, \n                   fill = \"grey70\", \n                   alpha = 0.75) + \n       geom_line(aes(y = scLANE_pred_log1p), \n                 color = \"black\", \n                 linewidth = 0.75) + \n       scale_x_continuous(labels = scales::label_number(accuracy = 0.01)) + \n       scale_color_manual(values = palette_celltype) + \n       labs(x = \"Pseudotime\", \n            y = \"Normalized Expression\") + \n       theme_scLANE() + \n       theme(legend.title = element_blank(), \n             strip.text.x = element_text(face = \"italic\"), \n             legend.position = \"bottom\") + \n       guides(color = guide_legend(override.aes = list(size = 4, alpha = 1, stroke = 0.25)))\np11\n```\n\n::: {.cell-output-display}\n![Gene dynamics for three transcription factors of interest.](Neurogenesis_with_scLANE_files/figure-html/fig-gene_dynamics-1.png){#fig-gene_dynamics width=768}\n:::\n:::\n\n\n### Distribution of knots from `scLANE`\n\nNext, we use the `getKnostDist()` function to pull the location of every identified knot for genes dynamic across any of the three lineages. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndyn_genes <- filter(scLANE_de_res, Gene_Dynamic_Overall == 1) %>% \n             distinct(Gene) %>% \n             pull(Gene)\nknot_dist <- getKnotDist(scLANE_models, dyn.genes = dyn_genes)\n```\n:::\n\n\nThe output of the function is rather simple:\n\n\n::: {#tbl-knot_dynamics .cell tbl-cap='Sample output displaying per-gene, per-lineage knot locations in pseudotime.'}\n\n```{.r .cell-code  code-fold=\"true\"}\nmutate(knot_dist, \n       lineage = case_when(lineage == \"Lineage_A\" ~ \"Excitatory Neuron\", \n                           lineage == \"Lineage_B\" ~ \"Astrocyte\", \n                           lineage == \"Lineage_C\" ~ \"Oligodendrocyte Progenitor\", \n                           TRUE ~ NA_character_)) %>% \n  slice_sample(n = 5) %>% \n  kableExtra::kable(digits = 4, row.names = FALSE, col.names = c(\"Gene\", \"Lineage\", \"Knot\")) %>% \n  kableExtra::kable_classic(full_width = FALSE, \"hover\")\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\" lightable-classic lightable-hover\" style='font-family: \"Arial Narrow\", \"Source Sans Pro\", sans-serif; width: auto !important; margin-left: auto; margin-right: auto;'>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Gene </th>\n   <th style=\"text-align:left;\"> Lineage </th>\n   <th style=\"text-align:right;\"> Knot </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> ITGA6 </td>\n   <td style=\"text-align:left;\"> Astrocyte </td>\n   <td style=\"text-align:right;\"> 0.4539 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> BUB3 </td>\n   <td style=\"text-align:left;\"> Astrocyte </td>\n   <td style=\"text-align:right;\"> 0.5197 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> CBX1 </td>\n   <td style=\"text-align:left;\"> Excitatory Neuron </td>\n   <td style=\"text-align:right;\"> 0.5081 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> NNAT </td>\n   <td style=\"text-align:left;\"> Excitatory Neuron </td>\n   <td style=\"text-align:right;\"> 0.0948 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> CELF2 </td>\n   <td style=\"text-align:left;\"> Excitatory Neuron </td>\n   <td style=\"text-align:right;\"> 0.8980 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nWe can visualize the differences between lineages using a combination histogram and density plot. Interestingly, the oligodendrocyte progenitor lineage has a large number of knots just prior to ~0.75 pseudotime. This is about where the \"break\" in the UMAP embedding occurs (see e.g., @fig-umap_curves), hence the placement of knots there by `scLANE` makes sense.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\np12 <- mutate(knot_dist, \n              lineage_label = case_when(lineage == \"Lineage_A\" ~ \"Excitatory Neuron\", \n                                        lineage == \"Lineage_B\" ~ \"Astrocyte\", \n                                        lineage == \"Lineage_C\" ~ \"Oligodendrocyte Progenitor\", \n                                        TRUE ~ NA_character_)) %>% \n       ggplot(aes(x = knot)) + \n       facet_wrap(~lineage_label, nrow = 3) + \n       geom_histogram(aes(y = after_stat(density)), \n                      fill = \"white\", color = \"navy\", linewidth = 0.5) + \n       geom_density(fill = \"steelblue3\", color = \"steelblue4\", alpha = 0.5, linewidth = 0.75) + \n       labs(x = \"Knot Location\", y = \"Density\") + \n       theme_scLANE() + \n       theme(axis.ticks.y = element_blank(), \n             axis.text.y = element_blank())\np12\n```\n\n::: {.cell-output-display}\n![Empirical distribution of knots across pseudotime for each lineage.](Neurogenesis_with_scLANE_files/figure-html/fig-knot_dist-1.png){#fig-knot_dist width=576}\n:::\n:::\n\n\n### Gene-level embeddings\n\nAfter generating three lineage-specific matrices of gene dynamics using the `smoothedCountsMatrix()` function, we use `embedGenes()` to cluster the gene dynamics within each lineage and embed them in dimension-reduced space with PCA & UMAP. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsmoothed_counts <- smoothedCountsMatrix(scLANE_models, \n                                        size.factor.offset = cell_offset, \n                                        pt = pt_df, \n                                        genes = dyn_genes, \n                                        n.cores = 4L)\ngene_embed_neuron <- embedGenes(log1p(smoothed_counts$Lineage_A))\ngene_embed_astro <- embedGenes(log1p(smoothed_counts$Lineage_B))\ngene_embed_opc <- embedGenes(log1p(smoothed_counts$Lineage_C))\n```\n:::\n\n\nWe can visualize the differing UMAP embeddings, showing heterogeneity across lineages:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\np13 <- ggplot(gene_embed_neuron, aes(x = umap1, y = umap2, color = leiden)) + \n       geom_point(size = 2, \n                  alpha = 0.75, \n                  stroke = 0) + \n       scale_color_manual(values = palette_week[1:length(unique(gene_embed_neuron$leiden))]) + \n       labs(x = \"UMAP 1\",\n            y = \"UMAP 2\", \n            color = \"Leiden\", \n            subtitle = \"Interneuron Lineage\") + \n       theme_scLANE(umap = TRUE) + \n       guides(color = guide_legend(override.aes = list(size = 4, alpha = 1, stroke = 0.25)))\np14 <- ggplot(gene_embed_astro, aes(x = umap1, y = umap2, color = leiden)) + \n       geom_point(size = 2, \n                  alpha = 0.75, \n                  stroke = 0) + \n       scale_color_manual(values = palette_week[-c(1:length(unique(gene_embed_neuron$leiden)))]) + \n       labs(x = \"UMAP 1\", \n            y = \"UMAP 2\", \n            color = \"Leiden\", \n            subtitle = \"Astrocyte Lineage\") + \n       theme_scLANE(umap = TRUE) + \n       guides(color = guide_legend(override.aes = list(size = 4, alpha = 1, stroke = 0.25)))\np15 <- ggplot(gene_embed_opc, aes(x = umap1, y = umap2, color = leiden)) + \n       geom_point(size = 2, \n                  alpha = 0.75, \n                  stroke = 0) + \n       scale_color_manual(values = palette_week[-c(1:(length(unique(gene_embed_neuron$leiden)) + length(unique(gene_embed_astro$leiden))))]) + \n       labs(x = \"UMAP 1\", \n            y = \"UMAP 2\", \n            color = \"Leiden\", \n            subtitle = \"Oligodendrocyte Progenitor Lineage\") + \n       theme_scLANE(umap = TRUE) + \n       guides(color = guide_legend(override.aes = list(size = 4, alpha = 1, stroke = 0.25)))\np16 <- p13 + p14 + p15\np16\n```\n\n::: {.cell-output-display}\n![Lineage-specific embeddings of gene dynamics.](Neurogenesis_with_scLANE_files/figure-html/fig-gene_embeddings-1.png){#fig-gene_embeddings width=1152}\n:::\n:::\n\n\n### Gene set enrichment analysis\n\nLastly, we can compare the dynamic gene sets for each lineage by performing enrichment analysis on each. The `enrichDynamicGenes()` function does this using the `gprofiler2` package internally. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nenrich_neuron <- enrichDynamicGenes(scLANE_de_res, lineage = \"A\")\nenrich_astro <- enrichDynamicGenes(scLANE_de_res, lineage = \"B\")\nenrich_opc <- enrichDynamicGenes(scLANE_de_res, lineage = \"C\")\n```\n:::\n\n\nExamining the top biological processes enriched in each lineage gives us some idea as to what each dynamic gene set is doing. For example, the interneuron lineage is correctly characterized by terms related to neurogenesis & neuronal differentiation. \n\n\n::: {#tbl-top5_go_terms .cell tbl-cap='The top-5 GO:BP terms for the dynamic genes from each lineage.'}\n\n```{.r .cell-code  code-fold=\"true\"}\ntop5_terms <- filter(enrich_neuron$result, source == \"GO:BP\") %>% \n              mutate(lineage = \"Interneuron\", .before = 1) %>% \n              bind_rows((filter(enrich_astro$result, source == \"GO:BP\") %>% \n                         mutate(lineage = \"Astrocyte\", .before = 1))) %>% \n              bind_rows((filter(enrich_opc$result, source == \"GO:BP\") %>% \n                         mutate(lineage = \"Oligodendrocyte Progenitor\", .before = 1))) %>% \n              select(lineage, term_name, p_value) %>% \n              arrange(p_value) %>% \n              with_groups(lineage, \n                          slice_head, \n                          n = 5)\nkableExtra::kable(top5_terms, digits = 3, row.names = FALSE, col.names = c(\"Lineage\", \"Term\", \"P-value\")) %>% \n  kableExtra::kable_classic(full_width = FALSE, \"hover\")\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\" lightable-classic lightable-hover\" style='font-family: \"Arial Narrow\", \"Source Sans Pro\", sans-serif; width: auto !important; margin-left: auto; margin-right: auto;'>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Lineage </th>\n   <th style=\"text-align:left;\"> Term </th>\n   <th style=\"text-align:right;\"> P-value </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Astrocyte </td>\n   <td style=\"text-align:left;\"> mitotic cell cycle </td>\n   <td style=\"text-align:right;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Astrocyte </td>\n   <td style=\"text-align:left;\"> cell cycle </td>\n   <td style=\"text-align:right;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Astrocyte </td>\n   <td style=\"text-align:left;\"> mitotic cell cycle process </td>\n   <td style=\"text-align:right;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Astrocyte </td>\n   <td style=\"text-align:left;\"> chromosome segregation </td>\n   <td style=\"text-align:right;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Astrocyte </td>\n   <td style=\"text-align:left;\"> cell cycle process </td>\n   <td style=\"text-align:right;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Interneuron </td>\n   <td style=\"text-align:left;\"> nervous system development </td>\n   <td style=\"text-align:right;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Interneuron </td>\n   <td style=\"text-align:left;\"> system development </td>\n   <td style=\"text-align:right;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Interneuron </td>\n   <td style=\"text-align:left;\"> neurogenesis </td>\n   <td style=\"text-align:right;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Interneuron </td>\n   <td style=\"text-align:left;\"> multicellular organism development </td>\n   <td style=\"text-align:right;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Interneuron </td>\n   <td style=\"text-align:left;\"> neuron differentiation </td>\n   <td style=\"text-align:right;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Oligodendrocyte Progenitor </td>\n   <td style=\"text-align:left;\"> mitotic cell cycle </td>\n   <td style=\"text-align:right;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Oligodendrocyte Progenitor </td>\n   <td style=\"text-align:left;\"> chromosome segregation </td>\n   <td style=\"text-align:right;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Oligodendrocyte Progenitor </td>\n   <td style=\"text-align:left;\"> cell cycle </td>\n   <td style=\"text-align:right;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Oligodendrocyte Progenitor </td>\n   <td style=\"text-align:left;\"> cell division </td>\n   <td style=\"text-align:right;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Oligodendrocyte Progenitor </td>\n   <td style=\"text-align:left;\"> mitotic cell cycle process </td>\n   <td style=\"text-align:right;\"> 0 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nWe can also identify sets of terms specific to each lineage; here we do so for the oligodendrocyte lineage. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nspec_terms_opc <- filter(enrich_opc$result, source == \"GO:BP\", \n                         !term_id %in% (filter(enrich_neuron$result, p_value < 0.05) %>% pull(term_id)), \n                         !term_id %in% (filter(enrich_astro$result, p_value < 0.05) %>% pull(term_id)), \n                         p_value < 0.05) %>% \n                  mutate(lineage = \"Oligodendrocyte Progenitor\", .before = 1)\n```\n:::\n\n\nWe see several terms significantly enriched in the lineage that are specific to OPC development. This serves as confirmatory evidence that our trajectory was fit correctly and that our trajectory DE results are biologically meaningful. \n\n\n::: {#tbl-opc_go_terms .cell tbl-cap='Significantly enriched OPC-related biological process.'}\n\n```{.r .cell-code  code-fold=\"true\"}\nfilter(spec_terms_opc, grepl(\"oligodendrocyte\", term_name)) %>% \n  select(lineage, term_name, p_value) %>% \n  kableExtra::kable(digits = 3, row.names = FALSE, col.names = c(\"Lineage\", \"Term\", \"P-value\")) %>% \n  kableExtra::kable_classic(full_width = FALSE, \"hover\")\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\" lightable-classic lightable-hover\" style='font-family: \"Arial Narrow\", \"Source Sans Pro\", sans-serif; width: auto !important; margin-left: auto; margin-right: auto;'>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Lineage </th>\n   <th style=\"text-align:left;\"> Term </th>\n   <th style=\"text-align:right;\"> P-value </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Oligodendrocyte Progenitor </td>\n   <td style=\"text-align:left;\"> positive regulation of oligodendrocyte differentiation </td>\n   <td style=\"text-align:right;\"> 0.009 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Oligodendrocyte Progenitor </td>\n   <td style=\"text-align:left;\"> oligodendrocyte cell fate commitment </td>\n   <td style=\"text-align:right;\"> 0.026 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Oligodendrocyte Progenitor </td>\n   <td style=\"text-align:left;\"> oligodendrocyte cell fate specification </td>\n   <td style=\"text-align:right;\"> 0.026 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n# Conclusions {#sec-conclusions}\n\nHere we showcased an end-to-end trajectory analysis, from initial celltype annotation to trajectory inference. After fitting a trajectory with `Slingshot` in a supervised manner using existing biological knowledge, we performed trajectory differential expression testing with `scLANE`. This opened up several downstream analysis options, including the comparison of gene dynamics across lineages, the inspection of the locations of transcriptional switches, and lineage-specific trajectory enrichment analysis. In doing so, we both recapitulated points from the original authors' analysis (e.g., visualizing dynamics of relevant transcription factors) and added to them (e.g., performing trajectory enrichment analysis). For more information on `scLANE`, see the corresponding [preprint](https://doi.org/10.1101/2023.12.19.572477) or the [GitHub repository](https://github.com/jr-leary7/scLANE). \n\n# Session info {#sec-SI}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessioninfo::session_info()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.2 (2023-10-31)\n os       macOS Sonoma 14.3\n system   x86_64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/New_York\n date     2024-01-25\n pandoc   3.1.9 @ /usr/local/bin/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n ! package                * version    date (UTC) lib source\n   abind                    1.4-5      2016-07-21 [1] CRAN (R 4.3.0)\n   AnnotationDbi            1.64.1     2023-11-03 [1] Bioconductor\n   AnnotationFilter         1.26.0     2023-10-24 [1] Bioconductor\n   AnnotationHub            3.10.0     2023-10-24 [1] Bioconductor\n   backports                1.4.1      2021-12-13 [1] CRAN (R 4.3.0)\n   beeswarm                 0.4.0      2021-06-01 [1] CRAN (R 4.3.0)\n   bigassertr               0.1.6      2023-01-10 [1] CRAN (R 4.3.0)\n   bigparallelr             0.3.2      2021-10-02 [1] CRAN (R 4.3.0)\n   bigstatsr                1.5.12     2022-10-14 [1] CRAN (R 4.3.0)\n   Biobase                * 2.62.0     2023-10-24 [1] Bioconductor\n   BiocFileCache            2.10.1     2023-10-26 [1] Bioconductor\n   BiocGenerics           * 0.48.1     2023-11-01 [1] Bioconductor\n   BiocIO                   1.12.0     2023-10-24 [1] Bioconductor\n   BiocManager              1.30.22    2023-08-08 [1] CRAN (R 4.3.0)\n   BiocNeighbors            1.20.1     2023-12-18 [1] Bioconductor 3.18 (R 4.3.2)\n   BiocParallel             1.36.0     2023-10-24 [1] Bioconductor\n   BiocVersion              3.18.1     2023-11-15 [1] Bioconductor\n   biomaRt                  2.58.0     2023-10-24 [1] Bioconductor\n   Biostrings               2.70.1     2023-10-25 [1] Bioconductor\n   bit                      4.0.5      2022-11-15 [1] CRAN (R 4.3.0)\n   bit64                    4.0.5      2020-08-30 [1] CRAN (R 4.3.0)\n   bitops                   1.0-7      2021-04-24 [1] CRAN (R 4.3.0)\n   blob                     1.2.4      2023-03-17 [1] CRAN (R 4.3.0)\n   bluster                  1.12.0     2023-10-24 [1] Bioconductor\n   boot                     1.3-28.1   2022-11-22 [1] CRAN (R 4.3.2)\n   broom                    1.0.5      2023-06-09 [1] CRAN (R 4.3.0)\n   broom.mixed              0.2.9.4    2022-04-17 [1] CRAN (R 4.3.0)\n   cachem                   1.0.8      2023-05-01 [1] CRAN (R 4.3.0)\n   cli                      3.6.2      2023-12-11 [1] CRAN (R 4.3.0)\n   cluster                  2.1.6      2023-12-01 [1] CRAN (R 4.3.0)\n   codetools                0.2-19     2023-02-01 [1] CRAN (R 4.3.2)\n   colorspace               2.1-0      2023-01-23 [1] CRAN (R 4.3.0)\n   coop                     0.6-3      2021-09-19 [1] CRAN (R 4.3.0)\n   cowplot                  1.1.2      2023-12-15 [1] CRAN (R 4.3.0)\n   crayon                   1.5.2      2022-09-29 [1] CRAN (R 4.3.0)\n   curl                     5.2.0      2023-12-08 [1] CRAN (R 4.3.0)\n   data.table               1.14.10    2023-12-08 [1] CRAN (R 4.3.0)\n   DBI                      1.2.0      2023-12-21 [1] CRAN (R 4.3.0)\n   dbplyr                   2.4.0      2023-10-26 [1] CRAN (R 4.3.0)\n   DelayedArray             0.28.0     2023-10-24 [1] Bioconductor\n   DelayedMatrixStats       1.24.0     2023-10-24 [1] Bioconductor\n   deldir                   2.0-2      2023-11-23 [1] CRAN (R 4.3.0)\n   digest                   0.6.33     2023-07-07 [1] CRAN (R 4.3.0)\n   doParallel               1.0.17     2022-02-07 [1] CRAN (R 4.3.0)\n   doSNOW                   1.0.20     2022-02-04 [1] CRAN (R 4.3.0)\n   dotCall64                1.1-1      2023-11-28 [1] CRAN (R 4.3.0)\n   dplyr                  * 1.1.4      2023-11-17 [1] CRAN (R 4.3.0)\n   ellipsis                 0.3.2      2021-04-29 [1] CRAN (R 4.3.0)\n   ensembldb                2.26.0     2023-10-24 [1] Bioconductor\n   evaluate                 0.23       2023-11-01 [1] CRAN (R 4.3.0)\n   ExperimentHub            2.10.0     2023-10-24 [1] Bioconductor\n   fansi                    1.0.6      2023-12-08 [1] CRAN (R 4.3.0)\n   farver                   2.1.1      2022-07-06 [1] CRAN (R 4.3.0)\n   fastDummies              1.7.3      2023-07-06 [1] CRAN (R 4.3.0)\n   fastmap                  1.1.1      2023-02-24 [1] CRAN (R 4.3.0)\n   ff                       4.0.9      2023-01-25 [1] CRAN (R 4.3.0)\n   filelock                 1.0.3      2023-12-11 [1] CRAN (R 4.3.0)\n   fitdistrplus             1.1-11     2023-04-25 [1] CRAN (R 4.3.0)\n   flock                    0.7        2016-11-12 [1] CRAN (R 4.3.0)\n   forcats                  1.0.0      2023-01-29 [1] CRAN (R 4.3.0)\n   foreach                  1.5.2      2022-02-02 [1] CRAN (R 4.3.0)\n   furrr                    0.3.1      2022-08-15 [1] CRAN (R 4.3.0)\n   future                   1.33.1     2023-12-22 [1] CRAN (R 4.3.0)\n   future.apply             1.11.1     2023-12-21 [1] CRAN (R 4.3.0)\n   gamlss                   5.4-20     2023-10-04 [1] CRAN (R 4.3.0)\n   gamlss.data              6.0-2      2021-11-07 [1] CRAN (R 4.3.0)\n   gamlss.dist              6.1-1      2023-08-23 [1] CRAN (R 4.3.0)\n   geeM                     0.10.1     2018-06-18 [1] CRAN (R 4.3.0)\n   generics                 0.1.3      2022-07-05 [1] CRAN (R 4.3.0)\n   GenomeInfoDb           * 1.38.5     2023-12-28 [1] Bioconductor 3.18 (R 4.3.2)\n   GenomeInfoDbData         1.2.11     2023-12-22 [1] Bioconductor\n   GenomicAlignments        1.38.0     2023-10-24 [1] Bioconductor\n   GenomicFeatures          1.54.1     2023-10-29 [1] Bioconductor\n   GenomicRanges          * 1.54.1     2023-10-29 [1] Bioconductor\n   ggbeeswarm               0.7.2      2023-04-29 [1] CRAN (R 4.3.0)\n   ggplot2                * 3.4.4      2023-10-12 [1] CRAN (R 4.3.0)\n   ggrepel                  0.9.4      2023-10-13 [1] CRAN (R 4.3.0)\n   ggridges                 0.5.5      2023-12-15 [1] CRAN (R 4.3.0)\n   glm2                   * 1.2.1      2018-08-11 [1] CRAN (R 4.3.0)\n   glmmTMB                  1.1.8      2023-10-07 [1] CRAN (R 4.3.0)\n   globals                  0.16.2     2022-11-21 [1] CRAN (R 4.3.0)\n   glue                     1.6.2      2022-02-24 [1] CRAN (R 4.3.0)\n   goftest                  1.2-3      2021-10-07 [1] CRAN (R 4.3.0)\n   gprofiler2               0.2.2      2023-06-14 [1] CRAN (R 4.3.0)\n   gridExtra                2.3        2017-09-09 [1] CRAN (R 4.3.0)\n   gtable                   0.3.4      2023-08-21 [1] CRAN (R 4.3.0)\n   highr                    0.10       2022-12-22 [1] CRAN (R 4.3.0)\n   hms                      1.1.3      2023-03-21 [1] CRAN (R 4.3.0)\n   htmltools                0.5.7      2023-11-03 [1] CRAN (R 4.3.0)\n   htmlwidgets              1.6.4      2023-12-06 [1] CRAN (R 4.3.0)\n   httpuv                   1.6.13     2023-12-06 [1] CRAN (R 4.3.0)\n   httr                     1.4.7      2023-08-15 [1] CRAN (R 4.3.0)\n   ica                      1.0-3      2022-07-08 [1] CRAN (R 4.3.0)\n   igraph                   1.6.0      2023-12-11 [1] CRAN (R 4.3.0)\n   interactiveDisplayBase   1.40.0     2023-10-24 [1] Bioconductor\n   IRanges                * 2.36.0     2023-10-24 [1] Bioconductor\n   irlba                    2.3.5.1    2022-10-03 [1] CRAN (R 4.3.0)\n   iterators                1.0.14     2022-02-05 [1] CRAN (R 4.3.0)\n   jsonlite                 1.8.8      2023-12-04 [1] CRAN (R 4.3.0)\n   kableExtra               1.3.4      2021-02-20 [1] CRAN (R 4.3.0)\n   KEGGREST                 1.42.0     2023-10-24 [1] Bioconductor\n   KernSmooth               2.23-22    2023-07-10 [1] CRAN (R 4.3.2)\n   knitr                    1.45       2023-10-30 [1] CRAN (R 4.3.0)\n   labeling                 0.4.3      2023-08-29 [1] CRAN (R 4.3.0)\n   later                    1.3.2      2023-12-06 [1] CRAN (R 4.3.0)\n   lattice                  0.22-5     2023-10-24 [1] CRAN (R 4.3.0)\n   lazyeval                 0.2.2      2019-03-15 [1] CRAN (R 4.3.0)\n   leiden                   0.4.3.1    2023-11-17 [1] CRAN (R 4.3.0)\n   lifecycle                1.0.4      2023-11-07 [1] CRAN (R 4.3.0)\n   limma                    3.58.1     2023-10-31 [1] Bioconductor\n   listenv                  0.9.0      2022-12-16 [1] CRAN (R 4.3.0)\n   lme4                     1.1-35.1   2023-11-05 [1] CRAN (R 4.3.0)\n   lmtest                   0.9-40     2022-03-21 [1] CRAN (R 4.3.0)\n   magrittr               * 2.0.3      2022-03-30 [1] CRAN (R 4.3.0)\n   MASS                     7.3-60     2023-05-04 [1] CRAN (R 4.3.0)\n   Matrix                   1.6-4      2023-11-30 [1] CRAN (R 4.3.0)\n   MatrixGenerics         * 1.14.0     2023-10-24 [1] Bioconductor\n   matrixStats            * 1.2.0      2023-12-11 [1] CRAN (R 4.3.0)\n   memoise                  2.0.1      2021-11-26 [1] CRAN (R 4.3.0)\n   mgcv                     1.9-1      2023-12-21 [1] CRAN (R 4.3.0)\n   mime                     0.12       2021-09-28 [1] CRAN (R 4.3.0)\n   miniUI                   0.1.1.1    2018-05-18 [1] CRAN (R 4.3.0)\n   minqa                    1.2.6      2023-09-11 [1] CRAN (R 4.3.0)\n   munsell                  0.5.0      2018-06-12 [1] CRAN (R 4.3.0)\n   nlme                     3.1-164    2023-11-27 [1] CRAN (R 4.3.0)\n   nloptr                   2.0.3      2022-05-26 [1] CRAN (R 4.3.0)\n   numDeriv                 2016.8-1.1 2019-06-06 [1] CRAN (R 4.3.0)\n V paletteer                1.5.0      2024-01-21 [1] CRAN (R 4.3.0) (on disk 1.6.0)\n   parallelly               1.36.0     2023-05-26 [1] CRAN (R 4.3.0)\n V patchwork                1.1.3      2024-01-08 [1] CRAN (R 4.3.0) (on disk 1.2.0)\n   pbapply                  1.7-2      2023-06-27 [1] CRAN (R 4.3.0)\n   pillar                   1.9.0      2023-03-22 [1] CRAN (R 4.3.0)\n   pkgconfig                2.0.3      2019-09-22 [1] CRAN (R 4.3.0)\n   plotly                   4.10.3     2023-10-21 [1] CRAN (R 4.3.0)\n   plyr                     1.8.9      2023-10-02 [1] CRAN (R 4.3.0)\n   png                      0.1-8      2022-11-29 [1] CRAN (R 4.3.0)\n   polyclip                 1.10-6     2023-09-27 [1] CRAN (R 4.3.0)\n   presto                   1.0.0      2023-12-27 [1] Github (immunogenomics/presto@31dc97f)\n   prettyunits              1.2.0      2023-09-24 [1] CRAN (R 4.3.0)\n   princurve              * 2.1.6      2021-01-18 [1] CRAN (R 4.3.0)\n   prismatic                1.1.1      2022-08-15 [1] CRAN (R 4.3.0)\n   progress                 1.2.3      2023-12-06 [1] CRAN (R 4.3.0)\n   progressr                0.14.0     2023-08-10 [1] CRAN (R 4.3.0)\n   promises                 1.2.1      2023-08-10 [1] CRAN (R 4.3.0)\n   ProtGenerics             1.34.0     2023-10-24 [1] Bioconductor\n   ps                       1.7.5      2023-04-18 [1] CRAN (R 4.3.0)\n   purrr                    1.0.2      2023-08-10 [1] CRAN (R 4.3.0)\n   R6                       2.5.1      2021-08-19 [1] CRAN (R 4.3.0)\n   RANN                     2.6.1      2019-01-08 [1] CRAN (R 4.3.0)\n   rappdirs                 0.3.3      2021-01-31 [1] CRAN (R 4.3.0)\n   RColorBrewer             1.1-3      2022-04-03 [1] CRAN (R 4.3.0)\n   Rcpp                     1.0.11     2023-07-06 [1] CRAN (R 4.3.0)\n   RcppAnnoy                0.0.21     2023-07-02 [1] CRAN (R 4.3.0)\n   RcppEigen                0.3.3.9.4  2023-11-02 [1] CRAN (R 4.3.0)\n   RcppHNSW                 0.5.0      2023-09-19 [1] CRAN (R 4.3.0)\n   RCurl                    1.98-1.13  2023-11-02 [1] CRAN (R 4.3.0)\n   rematch2                 2.1.2      2020-05-01 [1] CRAN (R 4.3.0)\n   reshape2                 1.4.4      2020-04-09 [1] CRAN (R 4.3.0)\n   restfulr                 0.0.15     2022-06-16 [1] CRAN (R 4.3.0)\n   reticulate               1.34.0     2023-10-12 [1] CRAN (R 4.3.0)\n   rjson                    0.2.21     2022-01-09 [1] CRAN (R 4.3.0)\n   rlang                    1.1.2      2023-11-04 [1] CRAN (R 4.3.0)\n   rmarkdown                2.25       2023-09-18 [1] CRAN (R 4.3.0)\n   rmio                     0.4.0      2022-02-17 [1] CRAN (R 4.3.0)\n   ROCR                     1.0-11     2020-05-02 [1] CRAN (R 4.3.0)\n   Rsamtools                2.18.0     2023-10-24 [1] Bioconductor\n   RSpectra                 0.16-1     2022-04-24 [1] CRAN (R 4.3.0)\n   RSQLite                  2.3.4      2023-12-08 [1] CRAN (R 4.3.0)\n   rstudioapi               0.15.0     2023-07-07 [1] CRAN (R 4.3.0)\n   rtracklayer              1.62.0     2023-10-24 [1] Bioconductor\n   Rtsne                    0.17       2023-12-07 [1] CRAN (R 4.3.0)\n   rvest                    1.0.3      2022-08-19 [1] CRAN (R 4.3.0)\n   S4Arrays                 1.2.0      2023-10-24 [1] Bioconductor\n   S4Vectors              * 0.40.2     2023-11-23 [1] Bioconductor\n   scales                   1.3.0      2023-11-28 [1] CRAN (R 4.3.0)\n   scattermore              1.2        2023-06-12 [1] CRAN (R 4.3.0)\n   scLANE                 * 0.7.9      2024-01-07 [1] Bioconductor\n   scRNAseq               * 2.16.0     2023-10-26 [1] Bioconductor\n   sctransform              0.4.1      2023-10-19 [1] CRAN (R 4.3.0)\n   sessioninfo              1.2.2      2021-12-06 [1] CRAN (R 4.3.0)\n   Seurat                 * 5.0.1      2023-11-17 [1] CRAN (R 4.3.0)\n   SeuratObject           * 5.0.1      2023-11-17 [1] CRAN (R 4.3.0)\n   shiny                    1.8.0      2023-11-17 [1] CRAN (R 4.3.0)\n   SingleCellExperiment   * 1.24.0     2023-10-24 [1] Bioconductor\n   slingshot              * 2.10.0     2023-10-24 [1] Bioconductor\n   snow                     0.4-4      2021-10-27 [1] CRAN (R 4.3.0)\n   sp                     * 2.1-2      2023-11-26 [1] CRAN (R 4.3.0)\n   spam                     2.10-0     2023-10-23 [1] CRAN (R 4.3.0)\n   SparseArray              1.2.3      2023-12-25 [1] Bioconductor 3.18 (R 4.3.2)\n   sparseMatrixStats        1.14.0     2023-10-24 [1] Bioconductor\n   spatstat.data            3.0-3      2023-10-24 [1] CRAN (R 4.3.0)\n   spatstat.explore         3.2-5      2023-10-22 [1] CRAN (R 4.3.0)\n   spatstat.geom            3.2-7      2023-10-20 [1] CRAN (R 4.3.0)\n   spatstat.random          3.2-2      2023-11-29 [1] CRAN (R 4.3.0)\n   spatstat.sparse          3.0-3      2023-10-24 [1] CRAN (R 4.3.0)\n   spatstat.utils           3.0-4      2023-10-24 [1] CRAN (R 4.3.0)\n   statmod                  1.5.0      2023-01-06 [1] CRAN (R 4.3.0)\n   stringi                  1.8.3      2023-12-11 [1] CRAN (R 4.3.0)\n   stringr                  1.5.1      2023-11-14 [1] CRAN (R 4.3.0)\n   SummarizedExperiment   * 1.32.0     2023-10-24 [1] Bioconductor\n   survival                 3.5-7      2023-08-14 [1] CRAN (R 4.3.2)\n   svglite                  2.1.3      2023-12-08 [1] CRAN (R 4.3.0)\n   systemfonts              1.0.5      2023-10-09 [1] CRAN (R 4.3.0)\n   tensor                   1.5        2012-05-05 [1] CRAN (R 4.3.0)\n   tibble                   3.2.1      2023-03-20 [1] CRAN (R 4.3.0)\n   tidyr                    1.3.0      2023-01-24 [1] CRAN (R 4.3.0)\n   tidyselect               1.2.0      2022-10-10 [1] CRAN (R 4.3.0)\n   TMB                      1.9.10     2023-12-12 [1] CRAN (R 4.3.0)\n   TrajectoryUtils        * 1.10.0     2023-10-24 [1] Bioconductor\n   utf8                     1.2.4      2023-10-22 [1] CRAN (R 4.3.0)\n   uwot                     0.1.16     2023-06-29 [1] CRAN (R 4.3.0)\n   vctrs                    0.6.5      2023-12-01 [1] CRAN (R 4.3.0)\n   vipor                    0.4.7      2023-12-18 [1] CRAN (R 4.3.0)\n   viridisLite              0.4.2      2023-05-02 [1] CRAN (R 4.3.0)\n   webshot                  0.5.5      2023-06-26 [1] CRAN (R 4.3.0)\n   withr                    2.5.2      2023-10-30 [1] CRAN (R 4.3.0)\n   xfun                     0.41       2023-11-01 [1] CRAN (R 4.3.0)\n   XML                      3.99-0.16  2023-11-29 [1] CRAN (R 4.3.0)\n   xml2                     1.3.6      2023-12-04 [1] CRAN (R 4.3.0)\n   xtable                   1.8-4      2019-04-21 [1] CRAN (R 4.3.0)\n   XVector                  0.42.0     2023-10-24 [1] Bioconductor\n   yaml                     2.3.8      2023-12-11 [1] CRAN (R 4.3.0)\n   zlibbioc                 1.48.0     2023-10-24 [1] Bioconductor\n   zoo                      1.8-12     2023-04-13 [1] CRAN (R 4.3.0)\n\n [1] /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/library\n\n V ── Loaded and on-disk version mismatch.\n\n─ Python configuration ───────────────────────────────────────────────────────\n python:         /Users/jack/Desktop/PhD/Research/Python_Envs/personal_site/bin/python\n libpython:      /usr/local/opt/python@3.11/Frameworks/Python.framework/Versions/3.11/lib/python3.11/config-3.11-darwin/libpython3.11.dylib\n pythonhome:     /Users/jack/Desktop/PhD/Research/Python_Envs/personal_site:/Users/jack/Desktop/PhD/Research/Python_Envs/personal_site\n version:        3.11.6 (main, Nov  2 2023, 04:52:24) [Clang 14.0.3 (clang-1403.0.22.14.1)]\n numpy:          /Users/jack/Desktop/PhD/Research/Python_Envs/personal_site/lib/python3.11/site-packages/numpy\n numpy_version:  1.26.3\n leidenalg:      /Users/jack/Desktop/PhD/Research/Python_Envs/personal_site/lib/python3.11/site-packages/leidenalg\n \n NOTE: Python version was forced by use_python() function\n\n──────────────────────────────────────────────────────────────────────────────\n```\n\n\n:::\n:::\n",
    "supporting": [
      "Neurogenesis_with_scLANE_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}