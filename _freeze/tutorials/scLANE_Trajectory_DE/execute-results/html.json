{
  "hash": "fb09f685a88936afda49800710b871a1",
  "result": {
    "markdown": "---\ntitle: \"Interpretable scRNA-seq Trajectory DE with `{scLANE}`\"\nauthor:\n  name: Jack Leary\n  email: j.leary@ufl.edu\n  affiliations:\n    - name: University of Florida\n      department: Biostatistics \n      city: Gainesville\n      state: FL\ndate: \"2023-03-23\"\nformat:\n  html:\n    code-fold: show\n    code-copy: true\n    code-tools: true\n    toc: true\n    embed-resources: true\n    fig-format: retina\n    df-print: kable\n    link-external-newwindow: true\nexecute:\n  cache: true\n  freeze: auto\n---\n\n\n# Introduction \n\nIn this tutorial we'll walk through a basic trajectory differential expression analysis. We'll use the `{scLANE}` package, which we developed with the goal of providing accurate and biologically interpretable models of expression over the course of a biological process. At the end are a list of references we used in developing the method & writing the accompanying manuscript, as well as the poster I presented at [ENAR 2023](https://www.enar.org/meetings/spring2023/) in Nashville.\n\n# Libraries \n\nIf you haven't already, install the development version (currently v0.6) of `{scLANE}` from [the GitHub repository](https://github.com/jr-leary7/scLANE).\n\n\n::: {.cell hash='scLANE_Trajectory_DE_cache/html/unnamed-chunk-1_023850e90d058042f39ade97e93858cc'}\n\n```{.r .cell-code}\nremotes:: install_github(\"jr-leary7/scLANE\")\n```\n:::\n\n\nNext, we'll load the packages we need to process, analyze, & visualize our data. \n\n\n::: {.cell hash='scLANE_Trajectory_DE_cache/html/unnamed-chunk-2_5411c7dd80583b1eb20b73738a17b3e0'}\n\n```{.r .cell-code}\nlibrary(dplyr)                 # data manipulation\nlibrary(scran)                 # scRNA-seq tools\nlibrary(scater)                # scRNA-seq tools\nlibrary(scLANE)                # trajectory DE \nlibrary(ggplot2)               # plot utilities \nlibrary(patchwork)             # plot combination\nlibrary(slingshot)             # pseudotime estimation\nlibrary(SingleCellExperiment)  # scRNA-seq data structures \n```\n:::\n\n\n# Helper Functions \n\nWe'll also define a couple utilities to make our plots cleaner to read & easier to make. \n\n\n::: {.cell hash='scLANE_Trajectory_DE_cache/html/unnamed-chunk-3_3fa055e4e8786b939964caca0316dc71'}\n\n```{.r .cell-code}\ntheme_umap <- function(base.size = 14) {\n  ggplot2::theme_classic(base_size = base.size) + \n  ggplot2::theme(axis.ticks = ggplot2::element_blank(), \n                 axis.text = ggplot2::element_blank(), \n                 plot.subtitle = ggplot2::element_text(face = \"italic\"), \n                 plot.caption = ggplot2::element_text(face = \"italic\"))\n}\nguide_umap <- function(key.size = 4) {\n  ggplot2::guides(color = ggplot2::guide_legend(override.aes = list(size = key.size, alpha = 1)))\n}\n```\n:::\n\n\nAnd consistent color palettes will make our plots easier to understand. \n\n\n::: {.cell hash='scLANE_Trajectory_DE_cache/html/unnamed-chunk-4_a3f9a1c8e79ebbf43ab4e638e780483d'}\n\n```{.r .cell-code}\npalette_cluster <- paletteer::paletteer_d(\"ggsci::default_jama\")\npalette_celltype <- paletteer::paletteer_d(\"ggsci::category20_d3\")\npalette_heatmap <- paletteer::paletteer_d(\"wesanderson::Zissou1\")\n```\n:::\n\n\n# Data \n\nWe'll load the pancreatic endocrinogenesis data from [Bastidas-Ponce *et al* (2019)](https://doi.org/10.1242/dev.173849), which comes with the `scVelo` Python library & has been used in several pseudotime inference / RNA velocity method papers as a good benchmark dataset. We'll use the `{reticulate}` library to generate the data using Python, then convert it to a `SingleCellExperiment` object with the Theis Lab's `{zellkonverter}` R package. We'll use the spliced mRNA counts as our default assay. Note that while downloading this dataset requires a Python installation & the installation of the `scanpy` and `scVelo` Python libraries (and their dependencies), running `{scLANE}` is done purely in R & requires no Python whatsoever. \n\n\n::: {.cell hash='scLANE_Trajectory_DE_cache/html/unnamed-chunk-5_f823a6ddcf98f2d2b50137e589692587'}\n\n```{.r .cell-code}\nreticulate::use_virtualenv(\"~/Desktop/Python/science/venv/\", required = TRUE)\nscvelo <- reticulate::import(\"scvelo\")\nadata <- scvelo$datasets$pancreas()\nsce <- zellkonverter::AnnData2SCE(adata)\nsce@assays@data$X <- NULL\nsce@assays@data$counts <- sce@assays@data$spliced\ncolData(sce)$celltype <- colData(sce)$clusters\ncolData(sce)$broad_celltype <- colData(sce)$clusters_coarse\ncolData(sce)$clusters <- NULL\ncolData(sce)$clusters_coarse <- NULL\n```\n:::\n\n::: {.cell hash='scLANE_Trajectory_DE_cache/html/unnamed-chunk-6_36db87d492f22ee53d05dc66326a22ef'}\n\n:::\n\n\nWe preprocess the counts using a typical pipeline with QC, normalization, linear & nonlinear dimension reduction, and graph-based clustering. \n\n\n::: {.cell hash='scLANE_Trajectory_DE_cache/html/unnamed-chunk-7_69492475f1c6aed80a07de5ba86d75b5'}\n\n```{.r .cell-code}\nset.seed(312)\nsce <- sce[rowSums(counts(sce) > 0) >= 3, colSums(counts(sce)) > 0]\nsce <- logNormCounts(sce)\nvar_decomp <- modelGeneVar(sce)\ntop2k_hvgs <- getTopHVGs(var_decomp, n = 2000)\nsce <- runPCA(sce,\n              subset_row = top2k_hvgs, \n              ncomponents = 50)\nreducedDim(sce, \"PCAsub\") <- reducedDim(sce, \"PCA\")[, 1:30]\nsce <- runUMAP(sce, \n               dimred = \"PCAsub\", \n               ncomponents = 2)\ng <- buildSNNGraph(sce, \n                   use.dimred = \"PCAsub\", \n                   k = 30)\nclusters <- igraph::cluster_leiden(graph = g, \n                                   objective_function = \"modularity\", \n                                   resolution_parameter = 0.5)\ncolLabels(sce) <- factor(clusters$membership)\n```\n:::\n\n\nLet's visualize the results on our UMAP embedding. The clustering generally agrees with the celltype labels, though there is some overclustering in the ductal cells & underclustering in the endocrine celltypes. \n\n\n::: {.cell hash='scLANE_Trajectory_DE_cache/html/unnamed-chunk-8_6ed9cf3976f0f4038c29e7b1612755da'}\n\n```{.r .cell-code}\np0 <- reducedDim(sce, \"UMAP\") %>% \n      as.data.frame() %>% \n      magrittr::set_colnames(c(\"UMAP_1\", \"UMAP_2\")) %>% \n      mutate(leiden = sce$label) %>% \n      ggplot(aes(x = UMAP_1, y = UMAP_2, color = leiden)) + \n      geom_point(size = 1, alpha = 0.75) + \n      labs(x = \"UMAP 1\", y = \"UMAP 2\", color = \"Leiden Cluster\") + \n      scale_color_manual(values = palette_cluster) + \n      theme_umap() + \n      guide_umap()\np1 <- reducedDim(sce, \"UMAP\") %>% \n      as.data.frame() %>% \n      magrittr::set_colnames(c(\"UMAP_1\", \"UMAP_2\")) %>% \n      mutate(celltype = sce$celltype) %>% \n      ggplot(aes(x = UMAP_1, y = UMAP_2, color = celltype)) + \n      geom_point(size = 1, alpha = 0.75) + \n      labs(x = \"UMAP 1\", y = \"UMAP 2\", color = \"Celltype\") + \n      scale_color_manual(values = palette_celltype) + \n      theme_umap() + \n      guide_umap()\np2 <- (p0 / p1) + plot_annotation(title = \"Murine Pancreatic Endocrinogenesis\", \n                                  theme = theme(plot.title = element_text(face = \"bold\")))\np2\n```\n\n::: {.cell-output-display}\n![](scLANE_Trajectory_DE_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n# Trajectory Inference \n\n## Pseudotime Estimation\n\nWe'll start by fitting a trajectory using the `{slingshot}` R package. We define cluster 4 as the starting cluster. After generating the estimates for each cell, we rescale the ordering to be defined on $[0, 1]$. This has no effect on the trajectory DE results however, and is mostly an aesthetic choice. \n\n\n::: {.cell hash='scLANE_Trajectory_DE_cache/html/unnamed-chunk-9_1fe1b8f381a73e62a45d40ac7086dc6d'}\n\n```{.r .cell-code}\nsling_res <- slingshot(sce, \n                       clusterLabels = \"label\", \n                       reducedDim = \"PCAsub\", \n                       start.clus = \"4\", \n                       approx_points = 1000)\nsling_pt <- slingPseudotime(sling_res) %>% \n            as.data.frame() %>% \n            magrittr::set_colnames(c(\"PT\")) %>% \n            mutate(PT = PT / max(PT))\n```\n:::\n\n\nLet's visualize the results on our UMAP embedding. They match what we would expect (knowing the biological background of the data), with ductal cells at the start of the process and endocrine celltypes such as alpha, beta, & delta cells at the end of it. \n\n\n::: {.cell hash='scLANE_Trajectory_DE_cache/html/unnamed-chunk-10_7c1f2e20e4279504be42d21d4e9bd84b'}\n\n```{.r .cell-code}\np3 <- reducedDim(sce, \"UMAP\") %>% \n      as.data.frame() %>% \n      magrittr::set_colnames(c(\"UMAP_1\", \"UMAP_2\")) %>% \n      mutate(PT = sling_pt$PT) %>% \n      ggplot(aes(x = UMAP_1, y = UMAP_2, color = PT)) + \n      geom_point(size = 1, alpha = 0.75) + \n      labs(x = \"UMAP 1\", y = \"UMAP 2\", color = \"Estimated\\nPseudotime\") + \n      scale_color_gradientn(colors = palette_heatmap, \n                            labels = scales::label_number(accuracy = 0.1)) + \n      theme_umap()\np4 <- (p3 / p1) + plot_annotation(title = \"Estimated Cell Ordering from Slingshot\", \n                                  theme = theme(plot.title = element_text(face = \"bold\")))\np4\n```\n\n::: {.cell-output-display}\n![](scLANE_Trajectory_DE_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n## Trajectory Differential Expression\n\nNext, we prepare the primary inputs to `{scLANE}`: a dense counts matrix (with cells as rows and genes as columns - this is important), a dataframe containing our estimated pseudotime ordering, and a character vector of the genes that we're interested in modeling. We parallelize over genes in order to speed up the computation at the expense of using a little more memory. The models are fit using NB GLMs with optimal spline knots identified empirically, and differential expression is quantified using a likelihood ratio test of the fitted model vs. the null (intercept-only) model. We take a stratified sample of 500 genes each from the set of HVGs we identified earlier and the set of non-HVGs. \n\n\n::: {.cell hash='scLANE_Trajectory_DE_cache/html/unnamed-chunk-11_985c588f0258c7d5b63478bedb16b1c4'}\n\n```{.r .cell-code}\nset.seed(312)\ngene_vec <- c(sample(rownames(sce)[-which(rownames(sce) %in% top2k_hvgs)], 500, replace = FALSE), \n              sample(top2k_hvgs, 500, replace = FALSE))\nraw_counts <- as.matrix(t(counts(sce)))[, gene_vec]\nscLANE_res <- testDynamic(expr.mat = raw_counts, \n                          pt = sling_pt, \n                          genes = gene_vec, \n                          n.potential.basis.fns = 4, \n                          parallel.exec = TRUE, \n                          n.cores = 4, \n                          track.time = TRUE)\nscLANE_res_tidy <- getResultsDE(test.dyn.results = scLANE_res)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"testDynamic evaluated 1000 genes with 1 lineages apiece in 5.894 mins\"\n```\n:::\n:::\n\n\nWe pull the top 10 most significant DE genes (the results table is already sorted by adjusted $p$-value) from the results & display their test statistics. \n\n\n::: {.cell hash='scLANE_Trajectory_DE_cache/html/unnamed-chunk-12_822a2cd96f01460db1871d34d5b4f62f'}\n\n```{.r .cell-code}\nselect(scLANE_res_tidy, \n       Gene, \n       Test_Stat, \n       P_Val, \n       P_Val_Adj,\n       Gene_Dynamic_Overall) %>% \n  mutate(Gene_Dynamic_Overall = if_else(Gene_Dynamic_Overall == 1, \"Dynamic\", \"Not Dynamic\")) %>% \n  slice_head(n = 10) %>% \n  kableExtra::kbl(digits = 3, \n                  booktabs = TRUE, \n                  caption = \"Top 10 DE Genes\", \n                  col.names = c(\"Gene\", \"LRT Statistic\", \"P-value\", \"Adj. P-value\", \"Predicted Gene Status\")) %>% \n  kableExtra::kable_classic(full_width = FALSE, \"hover\")\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\" lightable-classic lightable-hover\" style='font-family: \"Arial Narrow\", \"Source Sans Pro\", sans-serif; width: auto !important; margin-left: auto; margin-right: auto;'>\n<caption>Top 10 DE Genes</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Gene </th>\n   <th style=\"text-align:right;\"> LRT Statistic </th>\n   <th style=\"text-align:right;\"> P-value </th>\n   <th style=\"text-align:right;\"> Adj. P-value </th>\n   <th style=\"text-align:left;\"> Predicted Gene Status </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Rpl15 </td>\n   <td style=\"text-align:right;\"> 1979.581 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:left;\"> Dynamic </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Rpl4 </td>\n   <td style=\"text-align:right;\"> 2600.798 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:left;\"> Dynamic </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Hmgn3 </td>\n   <td style=\"text-align:right;\"> 3599.021 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:left;\"> Dynamic </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Rpl17 </td>\n   <td style=\"text-align:right;\"> 3898.434 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:left;\"> Dynamic </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Dbpht2 </td>\n   <td style=\"text-align:right;\"> 2801.763 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:left;\"> Dynamic </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Mgst1 </td>\n   <td style=\"text-align:right;\"> 3421.428 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:left;\"> Dynamic </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Tyms </td>\n   <td style=\"text-align:right;\"> 1660.490 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:left;\"> Dynamic </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Adamts1 </td>\n   <td style=\"text-align:right;\"> 3182.201 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:left;\"> Dynamic </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Map1b </td>\n   <td style=\"text-align:right;\"> 3695.957 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:left;\"> Dynamic </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Rps27a </td>\n   <td style=\"text-align:right;\"> 3835.857 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:left;\"> Dynamic </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nWith the output from `testDynamic()` in hand we can use the `plotModels()` function to visualize the fitted models from `{scLANE}` and compare them to other modeling methods. We see that the `{scLANE}` model output shows essentially the same trend as the GAM output for a gene of interest, with the advantage of being a much more straightforwardly interpretable model. \n\n\n::: {.cell hash='scLANE_Trajectory_DE_cache/html/unnamed-chunk-13_3621cf6c2acf6999dea087c09a632c1a'}\n\n```{.r .cell-code}\np5 <- plotModels(test.dyn.res = scLANE_res, \n                 gene = \"Gsta3\", \n                 pt = sling_pt, \n                 gene.counts = raw_counts) + \n      scale_color_manual(values = c(\"forestgreen\"))\np5\n```\n\n::: {.cell-output-display}\n![](scLANE_Trajectory_DE_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nWe can check out the actual regression output for our gene of interest as well. \n\n\n::: {.cell hash='scLANE_Trajectory_DE_cache/html/unnamed-chunk-14_d318227652af8658690f539b838ce1a6'}\n\n```{.r .cell-code}\nscLANE_res$Gsta3$Lineage_A$MARGE_Summary %>% \n  kableExtra::kbl(digits = 3, \n                  booktabs = TRUE, \n                  caption = \"Model Output for Gsta3\", \n                  col.names = c(\"Hinge Function\", \"Coefficient\", \"Std. Error\", \"T-statistic\", \"P-value\")) %>% \n  kableExtra::kable_classic(full_width = FALSE, \"hover\")\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\" lightable-classic lightable-hover\" style='font-family: \"Arial Narrow\", \"Source Sans Pro\", sans-serif; width: auto !important; margin-left: auto; margin-right: auto;'>\n<caption>Model Output for Gsta3</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Hinge Function </th>\n   <th style=\"text-align:right;\"> Coefficient </th>\n   <th style=\"text-align:right;\"> Std. Error </th>\n   <th style=\"text-align:right;\"> T-statistic </th>\n   <th style=\"text-align:right;\"> P-value </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> B_finalIntercept </td>\n   <td style=\"text-align:right;\"> 2.710 </td>\n   <td style=\"text-align:right;\"> 0.263 </td>\n   <td style=\"text-align:right;\"> 10.311 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> B_final(0.5-Lineage_A) </td>\n   <td style=\"text-align:right;\"> -2.726 </td>\n   <td style=\"text-align:right;\"> 0.582 </td>\n   <td style=\"text-align:right;\"> -4.683 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> B_final(Lineage_A-0.07) </td>\n   <td style=\"text-align:right;\"> -9.946 </td>\n   <td style=\"text-align:right;\"> 0.605 </td>\n   <td style=\"text-align:right;\"> -16.436 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nLastly, let's cluster the set of genes we fit models for using the `clusterGenes()` function. This function supports several different clustering algorithms, and assigns genes to clusters based on their fitted values as generated internally in `testDynamic()`. Next, the `plotClusteredGenes()` function generates the data we need to plot the clustered fitted values, which we then use to create our visualization. \n\n\n::: {.cell hash='scLANE_Trajectory_DE_cache/html/unnamed-chunk-15_7c501edcbab307c35a36df963b32138d'}\n\n```{.r .cell-code}\ngene_clusters <- clusterGenes(test.dyn.results = scLANE_res, \n                              clust.algo = \"leiden\", \n                              use.pca = TRUE)\ngene_fitted_vals <- plotClusteredGenes(test.dyn.results = scLANE_res, \n                                       gene.clusters = gene_clusters, \n                                       pt = sling_pt)\n```\n:::\n\n\nVisualizing the clustered gene models allows us to identify groups of similarly-acting genes, and can also help identify genes of interest based on our existing biological hypotheses. \n\n\n::: {.cell hash='scLANE_Trajectory_DE_cache/html/unnamed-chunk-16_ccb56a3e0df53724683deddc235b9356'}\n\n```{.r .cell-code}\np6 <- ggplot(gene_fitted_vals, aes(x = PT, y = FITTED, color = CLUSTER, group = GENE)) + \n      facet_wrap(~paste0(\"Lineage \", LINEAGE) + CLUSTER) + \n      geom_line() + \n      labs(x = \"Pseudotime\", \n           y = \"Fitted Values\", \n           color = \"Leiden\\nCluster\", \n           title = \"Unsupervised Clustering of Gene Patterns\") + \n      scale_x_continuous(labels = scales::label_number(accuracy = 0.1)) + \n      theme_classic(base_size = 14) + \n      guide_umap()\np6\n```\n\n::: {.cell-output-display}\n![](scLANE_Trajectory_DE_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n# Session Info \n\n\n::: {.cell hash='scLANE_Trajectory_DE_cache/html/unnamed-chunk-17_bde51b82a23a9795a39895e53a297974'}\n\n```{.r .cell-code}\nsessioninfo::session_info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.1 (2022-06-23)\n os       macOS Big Sur ... 10.16\n system   x86_64, darwin17.0\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/New_York\n date     2023-03-23\n pandoc   2.19.2 @ /usr/local/bin/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package              * version    date (UTC) lib source\n abind                  1.4-5      2016-07-21 [1] CRAN (R 4.2.0)\n AnnotationDbi          1.58.0     2022-04-26 [1] Bioconductor\n ape                    5.6-2      2022-03-02 [1] CRAN (R 4.2.0)\n aplot                  0.1.6      2022-06-03 [1] CRAN (R 4.2.0)\n assertthat             0.2.1      2019-03-21 [1] CRAN (R 4.2.0)\n babelgene              22.3       2022-03-30 [1] CRAN (R 4.2.0)\n backports              1.4.1      2021-12-13 [1] CRAN (R 4.2.0)\n basilisk               1.8.1      2022-08-25 [1] Bioconductor\n basilisk.utils         1.8.0      2022-04-26 [1] Bioconductor\n beachmat               2.12.0     2022-04-26 [1] Bioconductor\n beeswarm               0.4.0      2021-06-01 [1] CRAN (R 4.2.0)\n bigassertr             0.1.5      2021-07-08 [1] CRAN (R 4.2.0)\n bigparallelr           0.3.2      2021-10-02 [1] CRAN (R 4.2.0)\n bigstatsr              1.5.6      2022-02-03 [1] CRAN (R 4.2.0)\n Biobase              * 2.56.0     2022-04-26 [1] Bioconductor\n BiocGenerics         * 0.42.0     2022-04-26 [1] Bioconductor\n BiocNeighbors          1.14.0     2022-04-26 [1] Bioconductor\n BiocParallel           1.30.3     2022-06-05 [1] Bioconductor\n BiocSingular           1.12.0     2022-04-26 [1] Bioconductor\n Biostrings             2.64.1     2022-08-18 [1] Bioconductor\n bit                    4.0.4      2020-08-04 [1] CRAN (R 4.2.0)\n bit64                  4.0.5      2020-08-30 [1] CRAN (R 4.2.0)\n bitops                 1.0-7      2021-04-24 [1] CRAN (R 4.2.0)\n blob                   1.2.3      2022-04-10 [1] CRAN (R 4.2.0)\n bluster                1.6.0      2022-04-26 [1] Bioconductor\n boot                   1.3-28     2021-05-03 [1] CRAN (R 4.2.1)\n broom                  1.0.0      2022-07-01 [1] CRAN (R 4.2.0)\n broom.mixed            0.2.9.4    2022-04-17 [1] CRAN (R 4.2.0)\n cachem                 1.0.6      2021-08-19 [1] CRAN (R 4.2.0)\n cli                    3.3.0      2022-04-25 [1] CRAN (R 4.2.0)\n cluster                2.1.4      2022-08-22 [1] CRAN (R 4.2.0)\n clusterProfiler        4.4.4      2022-06-21 [1] Bioconductor\n coda                   0.19-4     2020-09-30 [1] CRAN (R 4.2.0)\n codetools              0.2-18     2020-11-04 [1] CRAN (R 4.2.1)\n colorspace             2.0-3      2022-02-21 [1] CRAN (R 4.2.0)\n cowplot                1.1.1      2020-12-30 [1] CRAN (R 4.2.0)\n crayon                 1.5.1      2022-03-26 [1] CRAN (R 4.2.0)\n data.table             1.14.2     2021-09-27 [1] CRAN (R 4.2.0)\n DBI                    1.1.3      2022-06-18 [1] CRAN (R 4.2.0)\n DelayedArray           0.22.0     2022-04-26 [1] Bioconductor\n DelayedMatrixStats     1.18.0     2022-04-26 [1] Bioconductor\n deldir                 1.0-6      2021-10-23 [1] CRAN (R 4.2.0)\n digest                 0.6.29     2021-12-01 [1] CRAN (R 4.2.0)\n dir.expiry             1.4.0      2022-04-26 [1] Bioconductor\n DO.db                  2.9        2022-08-29 [1] Bioconductor\n doParallel             1.0.17     2022-02-07 [1] CRAN (R 4.2.0)\n DOSE                   3.22.0     2022-04-26 [1] Bioconductor\n downloader             0.4        2015-07-09 [1] CRAN (R 4.2.0)\n dplyr                * 1.0.9      2022-04-28 [1] CRAN (R 4.2.0)\n dqrng                  0.3.0      2022-08-29 [1] Github (daqana/dqrng@6dd18c6)\n edgeR                  3.38.4     2022-08-07 [1] Bioconductor\n ellipsis               0.3.2      2021-04-29 [1] CRAN (R 4.2.0)\n emmeans                1.8.0      2022-08-05 [1] CRAN (R 4.2.0)\n enrichplot             1.16.1     2022-05-15 [1] Bioconductor\n estimability           1.4.1      2022-08-05 [1] CRAN (R 4.2.0)\n evaluate               0.16       2022-08-09 [1] CRAN (R 4.2.0)\n fansi                  1.0.3      2022-03-24 [1] CRAN (R 4.2.0)\n farver                 2.1.1      2022-07-06 [1] CRAN (R 4.2.0)\n fastmap                1.1.0      2021-01-25 [1] CRAN (R 4.2.0)\n fastmatch              1.1-3      2021-07-23 [1] CRAN (R 4.2.0)\n fgsea                  1.22.0     2022-04-26 [1] Bioconductor\n filelock               1.0.2      2018-10-05 [1] CRAN (R 4.2.0)\n fitdistrplus           1.1-8      2022-03-10 [1] CRAN (R 4.2.0)\n flock                  0.7        2016-11-12 [1] CRAN (R 4.2.0)\n FNN                    1.1.3.1    2022-05-23 [1] CRAN (R 4.2.0)\n forcats                0.5.2      2022-08-19 [1] CRAN (R 4.2.0)\n foreach                1.5.2      2022-02-02 [1] CRAN (R 4.2.0)\n furrr                  0.3.1      2022-08-15 [1] CRAN (R 4.2.0)\n future                 1.27.0     2022-07-22 [1] CRAN (R 4.2.0)\n future.apply           1.9.0      2022-04-25 [1] CRAN (R 4.2.0)\n gamlss                 5.4-3      2022-04-24 [1] CRAN (R 4.2.0)\n gamlss.data            6.0-2      2021-11-07 [1] CRAN (R 4.2.0)\n gamlss.dist            6.0-5      2022-08-28 [1] CRAN (R 4.2.1)\n geeM                   0.10.1     2018-06-18 [1] CRAN (R 4.2.0)\n generics               0.1.3      2022-07-05 [1] CRAN (R 4.2.0)\n GenomeInfoDb         * 1.32.3     2022-08-09 [1] Bioconductor\n GenomeInfoDbData       1.2.8      2022-08-29 [1] Bioconductor\n GenomicRanges        * 1.48.0     2022-04-26 [1] Bioconductor\n ggbeeswarm             0.6.0      2017-08-07 [1] CRAN (R 4.2.0)\n ggforce                0.3.4      2022-08-18 [1] CRAN (R 4.2.0)\n ggfun                  0.0.6      2022-04-01 [1] CRAN (R 4.2.0)\n ggplot2              * 3.3.6      2022-05-03 [1] CRAN (R 4.2.0)\n ggplotify              0.1.0      2021-09-02 [1] CRAN (R 4.2.0)\n ggraph                 2.0.6      2022-08-08 [1] CRAN (R 4.2.0)\n ggrepel                0.9.1      2021-01-15 [1] CRAN (R 4.2.0)\n ggridges               0.5.3      2021-01-08 [1] CRAN (R 4.2.0)\n ggtree                 3.4.2      2022-08-14 [1] Bioconductor\n glm2                 * 1.2.1      2018-08-11 [1] CRAN (R 4.2.0)\n glmmTMB                1.1.5      2022-11-16 [1] CRAN (R 4.2.0)\n globals                0.16.1     2022-08-28 [1] CRAN (R 4.2.1)\n glue                   1.6.2      2022-02-24 [1] CRAN (R 4.2.0)\n GO.db                  3.15.0     2022-08-29 [1] Bioconductor\n goftest                1.2-3      2021-10-07 [1] CRAN (R 4.2.0)\n GOSemSim               2.22.0     2022-04-26 [1] Bioconductor\n graphlayouts           0.8.1      2022-08-11 [1] CRAN (R 4.2.0)\n gridExtra              2.3        2017-09-09 [1] CRAN (R 4.2.0)\n gridGraphics           0.5-1      2020-12-13 [1] CRAN (R 4.2.0)\n gtable                 0.3.0      2019-03-25 [1] CRAN (R 4.2.0)\n here                   1.0.1      2020-12-13 [1] CRAN (R 4.2.0)\n highr                  0.9        2021-04-16 [1] CRAN (R 4.2.0)\n htmltools              0.5.3      2022-07-18 [1] CRAN (R 4.2.0)\n htmlwidgets            1.5.4      2021-09-08 [1] CRAN (R 4.2.0)\n httpuv                 1.6.5      2022-01-05 [1] CRAN (R 4.2.0)\n httr                   1.4.4      2022-08-17 [1] CRAN (R 4.2.0)\n ica                    1.0-3      2022-07-08 [1] CRAN (R 4.2.0)\n igraph                 1.3.4      2022-07-19 [1] CRAN (R 4.2.0)\n IRanges              * 2.30.1     2022-08-18 [1] Bioconductor\n irlba                  2.3.5      2021-12-06 [1] CRAN (R 4.2.0)\n iterators              1.0.14     2022-02-05 [1] CRAN (R 4.2.0)\n jsonlite               1.8.0      2022-02-22 [1] CRAN (R 4.2.0)\n kableExtra             1.3.4      2021-02-20 [1] CRAN (R 4.2.0)\n KEGGREST               1.36.3     2022-07-14 [1] Bioconductor\n KernSmooth             2.23-20    2021-05-03 [1] CRAN (R 4.2.1)\n knitr                  1.40       2022-08-24 [1] CRAN (R 4.2.0)\n labeling               0.4.2      2020-10-20 [1] CRAN (R 4.2.0)\n later                  1.3.0      2021-08-18 [1] CRAN (R 4.2.0)\n lattice                0.20-45    2021-09-22 [1] CRAN (R 4.2.1)\n lazyeval               0.2.2      2019-03-15 [1] CRAN (R 4.2.0)\n leiden                 0.4.2      2022-05-09 [1] CRAN (R 4.2.0)\n lifecycle              1.0.1      2021-09-24 [1] CRAN (R 4.2.0)\n limma                  3.52.2     2022-06-21 [1] Bioconductor\n listenv                0.8.0      2019-12-05 [1] CRAN (R 4.2.0)\n lme4                   1.1-30     2022-07-08 [1] CRAN (R 4.2.0)\n lmtest                 0.9-40     2022-03-21 [1] CRAN (R 4.2.0)\n locfit                 1.5-9.6    2022-07-11 [1] CRAN (R 4.2.0)\n magrittr             * 2.0.3      2022-03-30 [1] CRAN (R 4.2.0)\n MASS                   7.3-58.1   2022-08-03 [1] CRAN (R 4.2.0)\n Matrix                 1.4-1      2022-03-23 [1] CRAN (R 4.2.1)\n MatrixGenerics       * 1.8.1      2022-06-30 [1] Bioconductor\n matrixStats          * 0.62.0     2022-04-19 [1] CRAN (R 4.2.0)\n memoise                2.0.1      2021-11-26 [1] CRAN (R 4.2.0)\n metapod                1.4.0      2022-04-26 [1] Bioconductor\n mgcv                   1.8-40     2022-03-29 [1] CRAN (R 4.2.1)\n mime                   0.12       2021-09-28 [1] CRAN (R 4.2.0)\n miniUI                 0.1.1.1    2018-05-18 [1] CRAN (R 4.2.0)\n minqa                  1.2.4      2014-10-09 [1] CRAN (R 4.2.0)\n msigdbr                7.5.1      2022-03-30 [1] CRAN (R 4.2.0)\n multcomp               1.4-20     2022-08-07 [1] CRAN (R 4.2.0)\n munsell                0.5.0      2018-06-12 [1] CRAN (R 4.2.0)\n mvtnorm                1.1-3      2021-10-08 [1] CRAN (R 4.2.0)\n nlme                   3.1-159    2022-08-09 [1] CRAN (R 4.2.0)\n nloptr                 2.0.3      2022-05-26 [1] CRAN (R 4.2.0)\n numDeriv               2016.8-1.1 2019-06-06 [1] CRAN (R 4.2.0)\n paletteer            * 1.5.0      2022-10-19 [1] CRAN (R 4.2.0)\n parallelly             1.32.1     2022-07-21 [1] CRAN (R 4.2.0)\n patchwork            * 1.1.2      2022-08-19 [1] CRAN (R 4.2.0)\n pbapply                1.5-0      2021-09-16 [1] CRAN (R 4.2.0)\n pillar                 1.8.1      2022-08-19 [1] CRAN (R 4.2.0)\n pkgconfig              2.0.3      2019-09-22 [1] CRAN (R 4.2.0)\n plotly                 4.10.0     2021-10-09 [1] CRAN (R 4.2.0)\n plyr                   1.8.7      2022-03-24 [1] CRAN (R 4.2.0)\n png                    0.1-7      2013-12-03 [1] CRAN (R 4.2.0)\n polyclip               1.10-0     2019-03-14 [1] CRAN (R 4.2.0)\n princurve            * 2.1.6      2021-01-18 [1] CRAN (R 4.2.0)\n progressr              0.10.1     2022-06-03 [1] CRAN (R 4.2.0)\n promises               1.2.0.1    2021-02-11 [1] CRAN (R 4.2.0)\n ps                     1.7.1      2022-06-18 [1] CRAN (R 4.2.0)\n purrr                  0.3.4      2020-04-17 [1] CRAN (R 4.2.0)\n qvalue                 2.28.0     2022-04-26 [1] Bioconductor\n R6                     2.5.1      2021-08-19 [1] CRAN (R 4.2.0)\n RANN                   2.6.1      2019-01-08 [1] CRAN (R 4.2.0)\n RColorBrewer           1.1-3      2022-04-03 [1] CRAN (R 4.2.0)\n Rcpp                   1.0.9      2022-07-08 [1] CRAN (R 4.2.0)\n RcppAnnoy              0.0.19     2021-07-30 [1] CRAN (R 4.2.0)\n RcppEigen              0.3.3.9.2  2022-04-08 [1] CRAN (R 4.2.0)\n RCurl                  1.98-1.8   2022-07-30 [1] CRAN (R 4.2.0)\n rematch2               2.1.2      2020-05-01 [1] CRAN (R 4.2.0)\n reshape2               1.4.4      2020-04-09 [1] CRAN (R 4.2.0)\n reticulate             1.25       2022-05-11 [1] CRAN (R 4.2.0)\n rgeos                  0.5-9      2021-12-15 [1] CRAN (R 4.2.0)\n rlang                  1.0.4      2022-07-12 [1] CRAN (R 4.2.0)\n rmarkdown              2.16       2022-08-24 [1] CRAN (R 4.2.0)\n ROCR                   1.0-11     2020-05-02 [1] CRAN (R 4.2.0)\n rpart                  4.1.16     2022-01-24 [1] CRAN (R 4.2.1)\n rprojroot              2.0.3      2022-04-02 [1] CRAN (R 4.2.0)\n RSQLite                2.2.16     2022-08-17 [1] CRAN (R 4.2.0)\n rstudioapi             0.14       2022-08-22 [1] CRAN (R 4.2.0)\n rsvd                   1.0.5      2021-04-16 [1] CRAN (R 4.2.0)\n Rtsne                  0.16       2022-04-17 [1] CRAN (R 4.2.0)\n rvest                  1.0.3      2022-08-19 [1] CRAN (R 4.2.0)\n S4Vectors            * 0.34.0     2022-04-26 [1] Bioconductor\n sandwich               3.0-2      2022-06-15 [1] CRAN (R 4.2.0)\n ScaledMatrix           1.4.0      2022-04-26 [1] Bioconductor\n scales                 1.2.1      2022-08-20 [1] CRAN (R 4.2.0)\n scater               * 1.24.0     2022-04-26 [1] Bioconductor\n scattermore            0.8        2022-02-14 [1] CRAN (R 4.2.0)\n scatterpie             0.1.7      2021-08-20 [1] CRAN (R 4.2.0)\n scLANE               * 0.6        2023-03-18 [1] local\n scran                * 1.24.0     2022-04-26 [1] Bioconductor\n sctransform            0.3.4      2022-08-20 [1] CRAN (R 4.2.0)\n scuttle              * 1.6.3      2022-08-23 [1] Bioconductor\n sessioninfo            1.2.2      2021-12-06 [1] CRAN (R 4.2.0)\n Seurat               * 4.1.1      2022-05-02 [1] CRAN (R 4.2.0)\n SeuratObject         * 4.1.0      2022-05-01 [1] CRAN (R 4.2.0)\n shadowtext             0.1.2      2022-04-22 [1] CRAN (R 4.2.0)\n shiny                  1.7.2      2022-07-19 [1] CRAN (R 4.2.0)\n SingleCellExperiment * 1.18.0     2022-04-26 [1] Bioconductor\n slingshot            * 2.4.0      2022-04-26 [1] Bioconductor\n sp                   * 1.5-0      2022-06-05 [1] CRAN (R 4.2.0)\n sparseMatrixStats      1.8.0      2022-04-26 [1] Bioconductor\n spatstat.core          2.4-4      2022-05-18 [1] CRAN (R 4.2.0)\n spatstat.data          3.0-0      2022-10-21 [1] CRAN (R 4.2.0)\n spatstat.geom          3.0-3      2022-10-25 [1] CRAN (R 4.2.0)\n spatstat.random        3.0-1      2022-11-03 [1] CRAN (R 4.2.0)\n spatstat.sparse        3.0-0      2022-10-21 [1] CRAN (R 4.2.0)\n spatstat.utils         3.0-1      2022-10-19 [1] CRAN (R 4.2.0)\n statmod                1.4.37     2022-08-12 [1] CRAN (R 4.2.0)\n stringi                1.7.8      2022-07-11 [1] CRAN (R 4.2.0)\n stringr                1.4.1      2022-08-20 [1] CRAN (R 4.2.0)\n SummarizedExperiment * 1.26.1     2022-05-01 [1] Bioconductor\n survival               3.4-0      2022-08-09 [1] CRAN (R 4.2.0)\n svglite                2.1.0      2022-02-03 [1] CRAN (R 4.2.0)\n systemfonts            1.0.4      2022-02-11 [1] CRAN (R 4.2.0)\n tensor                 1.5        2012-05-05 [1] CRAN (R 4.2.0)\n TH.data                1.1-1      2022-04-26 [1] CRAN (R 4.2.0)\n tibble                 3.1.8      2022-07-22 [1] CRAN (R 4.2.0)\n tidygraph              1.2.2      2022-08-22 [1] CRAN (R 4.2.0)\n tidyr                  1.2.0      2022-02-01 [1] CRAN (R 4.2.0)\n tidyselect             1.1.2      2022-02-21 [1] CRAN (R 4.2.0)\n tidytree               0.4.0      2022-08-13 [1] CRAN (R 4.2.0)\n TMB                    1.9.1      2022-08-16 [1] CRAN (R 4.2.0)\n TrajectoryUtils      * 1.4.0      2022-04-26 [1] Bioconductor\n treeio                 1.20.2     2022-08-14 [1] Bioconductor\n tweenr                 2.0.1      2022-08-22 [1] CRAN (R 4.2.0)\n utf8                   1.2.2      2021-07-24 [1] CRAN (R 4.2.0)\n uwot                   0.1.14     2022-08-22 [1] CRAN (R 4.2.0)\n vctrs                  0.4.1      2022-04-13 [1] CRAN (R 4.2.0)\n vipor                  0.4.5      2017-03-22 [1] CRAN (R 4.2.0)\n viridis                0.6.2      2021-10-13 [1] CRAN (R 4.2.0)\n viridisLite            0.4.1      2022-08-22 [1] CRAN (R 4.2.0)\n webshot                0.5.3      2022-04-14 [1] CRAN (R 4.2.0)\n withr                  2.5.0      2022-03-03 [1] CRAN (R 4.2.0)\n xfun                   0.32       2022-08-10 [1] CRAN (R 4.2.0)\n xml2                   1.3.3      2021-11-30 [1] CRAN (R 4.2.0)\n xtable                 1.8-4      2019-04-21 [1] CRAN (R 4.2.0)\n XVector                0.36.0     2022-04-26 [1] Bioconductor\n yaml                   2.3.5      2022-02-21 [1] CRAN (R 4.2.0)\n yulab.utils            0.0.5      2022-06-30 [1] CRAN (R 4.2.0)\n zellkonverter          1.6.5      2022-09-15 [1] Bioconductor\n zlibbioc               1.42.0     2022-04-26 [1] Bioconductor\n zoo                    1.8-10     2022-04-15 [1] CRAN (R 4.2.0)\n\n [1] /Library/Frameworks/R.framework/Versions/4.2/Resources/library\n\n─ Python configuration ───────────────────────────────────────────────────────\n python:         /Users/jack/Desktop/Python/science/venv/bin/python\n libpython:      /usr/local/opt/python@3.8/Frameworks/Python.framework/Versions/3.8/lib/python3.8/config-3.8-darwin/libpython3.8.dylib\n pythonhome:     /Users/jack/Desktop/Python/science/venv:/Users/jack/Desktop/Python/science/venv\n virtualenv:     /Users/jack/Desktop/Python/science/venv/bin/activate_this.py\n version:        3.8.16 (default, Dec  7 2022, 01:36:11)  [Clang 14.0.0 (clang-1400.0.29.202)]\n numpy:          /Users/jack/Desktop/Python/science/venv/lib/python3.8/site-packages/numpy\n numpy_version:  1.22.4\n scvelo:         /Users/jack/Desktop/Python/science/venv/lib/python3.8/site-packages/scvelo\n \n NOTE: Python version was forced by use_python function\n\n──────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}