{
  "hash": "c095c0cdd3530ed0c0c173f34c41ac84",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Interpretable scRNA-seq Trajectory DE with `scLANE`\"\nauthor:\n  name: Jack R. Leary\n  email: j.leary@ufl.edu\n  orcid: 0009-0004-8821-3269\n  affiliations:\n    - name: University of Florida\n      department: Department of Biostatistics \n      city: Gainesville\n      state: FL\ndate: today\ndate-format: long\nformat:\n  html:\n    code-fold: show\n    code-copy: true\n    code-tools: true\n    toc: true\n    toc-depth: 2\n    embed-resources: true\n    fig-format: retina\n    fig-width: 9\n    fig-height: 6\n    df-print: kable\n    link-external-newwindow: true\n    tbl-cap-location: bottom\n    fig-cap-location: bottom\n    number-sections: true\nexecute:\n  cache: false\n  freeze: auto\n---\n\n\n\n\n\n\n# Introduction {#sec-intro}\n\nIn this tutorial we'll walk through a basic trajectory differential expression analysis. We'll use the `scLANE` R package, which we developed with the goal of providing accurate and biologically interpretable models of expression over pseudotime. At the end are some best-practices recommendations, along with a short list of references we used in developing the method & writing the accompanying manuscript. If you want to skip the preprocessing steps and get right into the analysis, head to @sec-traj. \n\n# Libraries {#sec-libs} \n\nIf you haven't already, install the development version (currently v0.7.9) of `scLANE` from [the GitHub repository](https://github.com/jr-leary7/scLANE).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nremotes::install_github(\"jr-leary7/scLANE\")\n```\n:::\n\n\n\n\nNext, we'll load the packages we need to process, analyze, & visualize our data. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)           # data manipulation\nlibrary(scLANE)          # trajectory DE \nlibrary(Seurat)          # scRNA-seq tools\nlibrary(ggplot2)         # plot creation \nlibrary(patchwork)       # plot combination\nlibrary(slingshot)       # pseudotime estimation\nlibrary(reticulate)      # Python interface\nlibrary(ComplexHeatmap)  # heatmaps\nrename <- dplyr::rename\n```\n:::\n\n\n\n\n# Helper functions {#sec-fns}\n\nWe'll also define a utility function to make our plots cleaner to read & easier to make. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nguide_umap <- function(key.size = 4) {\n  ggplot2::guides(color = ggplot2::guide_legend(override.aes = list(size = key.size,\n                                                                    alpha = 1, \n                                                                    stroke = 0.25)))\n}\n```\n:::\n\n\n\n\nAnd consistent color palettes will make our plots easier to understand. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npalette_cluster <- paletteer::paletteer_d(\"ggsci::default_jama\")\npalette_celltype <- paletteer::paletteer_d(\"ggsci::category20_d3\")\npalette_heatmap <- paletteer::paletteer_d(\"wesanderson::Zissou1\")\n```\n:::\n\n\n\n\n# Data {#sec-data}\n\nWe'll load the well-known pancreatic endocrinogenesis data from [Bastidas-Ponce *et al* (2019)](https://doi.org/10.1242/dev.173849), which comes with the `scVelo` Python library & has been used in several pseudotime inference / RNA velocity method papers as a good benchmark dataset due to the simplicity of the underlying trajectory manifold. \n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport scvelo as scv\nadata = scv.datasets.pancreas()\n```\n:::\n\n\n\n\nThe `AnnData` object contains data that we'll need to extract, specifically the spliced & unspliced mRNA counts matrices (stored in `AnnData.layers`) and the cell-level metadata (which is in `AnnData.obs`). \n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nadata\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAnnData object with n_obs × n_vars = 3696 × 27998\n    obs: 'clusters_coarse', 'clusters', 'S_score', 'G2M_score'\n    var: 'highly_variable_genes'\n    uns: 'clusters_coarse_colors', 'clusters_colors', 'day_colors', 'neighbors', 'pca'\n    obsm: 'X_pca', 'X_umap'\n    layers: 'spliced', 'unspliced'\n    obsp: 'distances', 'connectivities'\n```\n\n\n:::\n:::\n\n\n\n\n## Conversion from Python\n\nThe `reticulate` package allows us to pass the counts matrices & metadata from Python back to R. \n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nspliced_counts = adata.layers['spliced'].toarray()\nunspliced_counts = adata.layers['unspliced'].toarray()\n```\n:::\n\n\n\n\n::: {.callout-note}\nWhile downloading this dataset requires a Python installation as well as the installation of the `scVelo` Python library (and its dependencies), running `scLANE` is done purely in R & requires no Python whatsoever. \n:::\n\nWe'll use the spliced mRNA counts as our default assay, and also define a new assay containing the total (spliced + unspliced) mRNA in each cell. Lastly, we remove genes with non-zero spliced mRNA in 3 or fewer cells. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspliced_counts <- Matrix::Matrix(t(py$spliced_counts), sparse = TRUE)\nunspliced_counts <- Matrix::Matrix(t(py$unspliced_counts), sparse = TRUE)\nrna_counts <- spliced_counts + unspliced_counts\ncolnames(rna_counts) <- colnames(spliced_counts) <- colnames(unspliced_counts) <- py$adata$obs_names$to_list()\nrownames(rna_counts) <- rownames(spliced_counts) <- rownames(unspliced_counts) <- py$adata$var_names$to_list()\nspliced_assay <- CreateAssayObject(counts = spliced_counts)\nspliced_assay@key <- \"spliced_\"\nunspliced_assay <- CreateAssayObject(counts = unspliced_counts)\nunspliced_assay@key <- \"unspliced_\"\nrna_assay <- CreateAssayObject(counts = rna_counts)\nrna_assay@key <- \"rna_\"\nmeta_data <- py$adata$obs %>% \n             mutate(cell_name = rownames(.), \n                    .before = 1) %>% \n             rename(celltype = clusters, \n                    celltype_coarse = clusters_coarse) %>% \n             mutate(nCount_spliced = colSums(spliced_counts), \n                    nFeature_spliced = colSums(spliced_counts > 0), \n                    nCount_unspliced = colSums(unspliced_counts), \n                    nFeature_unspliced = colSums(unspliced_counts > 0), \n                    nCount_RNA = colSums(rna_counts), \n                    nFeature_RNA = colSums(rna_counts > 0))\nseu <- CreateSeuratObject(counts = spliced_assay, \n                          assay = \"spliced\", \n                          project = \"Mm_Panc_Endo\", \n                          meta.data = meta_data)\nseu@assays$unspliced <- unspliced_assay\nseu@assays$RNA <- rna_assay\nseu <- seu[rowSums(seu@assays$spliced) > 3, ]\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\n## Preprocessing\n\nWe preprocess the counts using a typical pipeline with QC, normalization & scaling, dimension reduction, and graph-based clustering via the Leiden algorithm. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseu <- PercentageFeatureSet(seu, \n                            pattern = \"^mt-\", \n                            col.name = \"percent_mito\", \n                            assay = \"spliced\") %>% \n       PercentageFeatureSet(pattern = \"^Rp[sl]\", \n                            col.name = \"percent_ribo\", \n                            assay = \"spliced\") %>% \n       NormalizeData(assay = \"spliced\", verbose = FALSE) %>% \n       NormalizeData(assay = \"unspliced\", verbose = FALSE) %>% \n       NormalizeData(assay = \"RNA\", verbose = FALSE) %>% \n       FindVariableFeatures(assay = \"spliced\", \n                            nfeatures = 3000, \n                            verbose = FALSE) %>% \n       ScaleData(assay = \"spliced\", \n                 vars.to.regress = c(\"percent_mito\", \"percent_ribo\"), \n                 model.use = \"poisson\", \n                 verbose = FALSE) %>% \n       RunPCA(assay = \"spliced\", \n              npcs = 30, \n              approx = TRUE, \n              seed.use = 312, \n              verbose = FALSE) %>% \n       RunUMAP(reduction = \"pca\", \n               dims = 1:30, \n               n.components = 2, \n               metric = \"cosine\", \n               seed.use = 312, \n               verbose = FALSE) %>% \n       FindNeighbors(reduction = \"pca\", \n                     k.param = 30,\n                     nn.method = \"annoy\", \n                     annoy.metric = \"cosine\", \n                     verbose = FALSE) %>% \n       FindClusters(algorithm = 4, \n                    method = \"igraph\", \n                    resolution = 0.5, \n                    random.seed = 312, \n                    verbose = FALSE)\n```\n:::\n\n\n\n\nLet's visualize the results on our UMAP embedding. The clustering generally agrees with the celltype labels, though there is some overclustering in the ductal cells & underclustering in the mature endocrine celltypes. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\np0 <- Embeddings(seu, \"umap\") %>% \n      as.data.frame() %>% \n      magrittr::set_colnames(c(\"UMAP_1\", \"UMAP_2\")) %>% \n      mutate(leiden = seu$seurat_clusters) %>% \n      ggplot(aes(x = UMAP_1, y = UMAP_2, color = leiden)) + \n      geom_point(size = 1.5, \n                 alpha = 0.75, \n                 stroke = 0) + \n      scale_color_manual(values = palette_cluster) + \n      labs(x = \"UMAP 1\", \n           y = \"UMAP 2\", \n           color = \"Leiden\") + \n      theme_scLANE(umap = TRUE) + \n      guide_umap()\np1 <- Embeddings(seu, \"umap\") %>% \n      as.data.frame() %>% \n      magrittr::set_colnames(c(\"UMAP_1\", \"UMAP_2\")) %>% \n      mutate(celltype = seu$celltype) %>% \n      ggplot(aes(x = UMAP_1, y = UMAP_2, color = celltype)) + \n      geom_point(size = 1.5, \n                 alpha = 0.75, \n                 stroke = 0) + \n      scale_color_manual(values = palette_celltype) + \n      labs(x = \"UMAP 1\", \n           y = \"UMAP 2\", \n           color = \"Celltype\") + \n      theme_scLANE(umap = TRUE) + \n      guide_umap()\np2 <- (p0 / p1) +\n      plot_layout(guides = \"collect\", axes = \"collect\")\np2\n```\n\n::: {.cell-output-display}\n![Cluster & celltype labels in UMAP space.](scLANE_Trajectory_DE_files/figure-html/fig-umap_labels-1.png){#fig-umap_labels width=864}\n:::\n:::\n\n\n\n\n# Trajectory inference {#sec-traj}\n\n## Pseudotime estimation\n\nWe'll start by fitting a trajectory using the `slingshot` R package. We define cluster 5 as the starting cluster, since in this case we're already aware of the dataset's underlying biology. After generating the estimates for each cell, we rescale the ordering to be defined on $[0, 1]$. This has no effect on the trajectory DE results however, and is mostly an aesthetic choice. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsling_res <- slingshot(Embeddings(seu, \"umap\"),\n                       start.clus = \"5\",\n                       clusterLabels = seu$seurat_clusters, \n                       approx_points = 500)\nsling_pt <- slingPseudotime(sling_res) %>% \n            as.data.frame() %>% \n            magrittr::set_colnames(c(\"PT\")) %>% \n            mutate(PT = (PT - min(PT)) / (max(PT) - min(PT)))\nseu <- AddMetaData(seu, \n                   metadata = sling_pt, \n                   col.name = \"sling_pt\")\n```\n:::\n\n\n\n\nLet's visualize the results on our UMAP embedding. They match what we would expect (knowing the biological background of the data), with ductal cells at the start of the process and endocrine celltypes such as alpha, beta, & delta cells at the end of it.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\np3 <- Embeddings(seu, \"umap\") %>% \n      as.data.frame() %>% \n      magrittr::set_colnames(c(\"UMAP_1\", \"UMAP_2\")) %>% \n      mutate(PT = sling_pt$PT) %>% \n      ggplot(aes(x = UMAP_1, y = UMAP_2, color = PT)) + \n      geom_point(size = 1.5, \n                 alpha = 0.75, \n                 stroke = 0) + \n      labs(x = \"UMAP 1\", \n           y = \"UMAP 2\", \n           color = \"Pseudotime\") + \n      scale_color_gradientn(colors = palette_heatmap, \n                            labels = scales::label_number(accuracy = 0.01)) + \n      theme_scLANE(umap = TRUE)\np4 <- (p3 / p1) + \n      plot_layout(guides = \"collect\", axes = \"collect\")\np4\n```\n\n::: {.cell-output-display}\n![Estimated pseudotime in UMAP space.](scLANE_Trajectory_DE_files/figure-html/fig-umap_pseudotime-1.png){#fig-umap_pseudotime width=864}\n:::\n:::\n\n\n\n\n## Trajectory DE testing\n\nNext, we prepare the primary inputs to `scLANE`: our `Seurat` object with the spliced counts set as the default assay, a dataframe containing our estimated pseudotime ordering, a vector of size factors to use as an offset for sequencing depth in each model, and a set of genes whose dynamics we want to model. `scLANE` parallelizes over genes in order to speed up the computation at the expense of using a little more memory. The models are fit using NB GLMs with optimal spline knots identified empirically, and differential expression is quantified using a likelihood ratio test of the fitted model vs. a constant (intercept-only) model. In practice, genes designated as HVGs are usually the best candidates for modeling, so we choose the top 3,000 HVGs as our input. \n\n::: {.callout-note}\nThe testing of the HVG set on its own is also justified by the reality that almost all trajectories are inferred using some sort of dimension-reduced space, and those embeddings are nearly universally generated using a set of HVGs. As such, genes not included in the HVG set actually have no direct relationship with the estimated trajectory, & it's generally safe to exclude them from trajectory analyses. \n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop3k_hvg <- HVFInfo(seu) %>% \n             arrange(desc(variance.standardized)) %>% \n             slice_head(n = 3000) %>% \n             rownames(.)\ncell_offset <- createCellOffset(seu)\nscLANE_models <- testDynamic(seu, \n                             pt = sling_pt, \n                             genes = top3k_hvg, \n                             size.factor.offset = cell_offset, \n                             n.cores = 6L, \n                             verbose = FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRegistered S3 method overwritten by 'bit':\n  method   from  \n  print.ri gamlss\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nscLANE testing completed for 3000 genes across 1 lineage in 22.681 mins\n```\n\n\n:::\n\n```{.r .cell-code}\nscLANE_res_tidy <- getResultsDE(scLANE_models)\n```\n:::\n\n\n\n\nAfter tidying the TDE results with `getResultsDE()`, we pull a sample of 6 genes from the results & display their test statistics. By default, any gene with an adjusted *p*-value less than 0.01 is predicted to be dynamic, though this threshold can be easily adjusted. \n\n\n\n\n::: {#tbl-scLANE_res .cell tbl-cap='TDE test results from scLANE.'}\n\n```{.r .cell-code  code-fold=\"true\"}\nselect(scLANE_res_tidy, \n       Gene, \n       Test_Stat, \n       P_Val, \n       P_Val_Adj,\n       Gene_Dynamic_Overall) %>% \n  mutate(Gene_Dynamic_Overall = if_else(Gene_Dynamic_Overall == 1, \"Dynamic\", \"Static\")) %>% \n  with_groups(Gene_Dynamic_Overall, \n              slice_sample, \n              n = 3) %>% \n  kableExtra::kbl(digits = 4, \n                  booktabs = TRUE, \n                  col.names = c(\"Gene\", \"LRT stat.\", \"P-value\", \"Adj. p-value\", \"Predicted gene status\")) %>% \n  kableExtra::kable_classic(full_width = FALSE, \"hover\")\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\" lightable-classic lightable-hover\" style='font-family: \"Arial Narrow\", \"Source Sans Pro\", sans-serif; width: auto !important; margin-left: auto; margin-right: auto;'>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Gene </th>\n   <th style=\"text-align:right;\"> LRT stat. </th>\n   <th style=\"text-align:right;\"> P-value </th>\n   <th style=\"text-align:right;\"> Adj. p-value </th>\n   <th style=\"text-align:left;\"> Predicted gene status </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Prc1 </td>\n   <td style=\"text-align:right;\"> 1002.5987 </td>\n   <td style=\"text-align:right;\"> 0.0000 </td>\n   <td style=\"text-align:right;\"> 0.0000 </td>\n   <td style=\"text-align:left;\"> Dynamic </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Ddx3y </td>\n   <td style=\"text-align:right;\"> 34.2841 </td>\n   <td style=\"text-align:right;\"> 0.0000 </td>\n   <td style=\"text-align:right;\"> 0.0000 </td>\n   <td style=\"text-align:left;\"> Dynamic </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Ceacam10 </td>\n   <td style=\"text-align:right;\"> 31.5036 </td>\n   <td style=\"text-align:right;\"> 0.0000 </td>\n   <td style=\"text-align:right;\"> 0.0001 </td>\n   <td style=\"text-align:left;\"> Dynamic </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Lims2 </td>\n   <td style=\"text-align:right;\"> 2.4696 </td>\n   <td style=\"text-align:right;\"> 0.1161 </td>\n   <td style=\"text-align:right;\"> 1.0000 </td>\n   <td style=\"text-align:left;\"> Static </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Gm9801 </td>\n   <td style=\"text-align:right;\"> NA </td>\n   <td style=\"text-align:right;\"> NA </td>\n   <td style=\"text-align:right;\"> NA </td>\n   <td style=\"text-align:left;\"> Static </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Jakmip3 </td>\n   <td style=\"text-align:right;\"> 15.8731 </td>\n   <td style=\"text-align:right;\"> 0.0004 </td>\n   <td style=\"text-align:right;\"> 0.1152 </td>\n   <td style=\"text-align:left;\"> Static </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n\nNext, we can use the `plotModels()` function to visualize the fitted models from `scLANE` and compare them to other modeling methods. The gene [*Neurog3*](https://www.ncbi.nlm.nih.gov/gene/11925) is strongly associated with epithelial cell differentiation, and indeed we see a clear, nonlinear transcriptional dynamic across pseudotime for that gene. A traditional GLM fails to capture that nonlinearity, and while a GAM fits the trend smoothly, it seems to overfit the dynamics near the boundaries of pseudotime - [a known issue with additive models](https://www.routledge.com/Generalized-Additive-Models-An-Introduction-with-R-Second-Edition/Wood/p/book/9781498728331). Only the `scLANE` model accurately models the rapid upregulation and equally swift downregulation of the transcription factor neurogenin-3 (*Neurog3*) over pseudotime, in addition to identifying the cutpoint in pseudotime at which downregulation begins.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\np5 <- plotModels(scLANE_models, \n                 gene = \"Neurog3\", \n                 pt = sling_pt, \n                 expr.mat = seu, \n                 size.factor.offset = cell_offset, \n                 plot.glm = TRUE, \n                 plot.gam = TRUE) + \n      scale_color_manual(values = c(\"forestgreen\"))\np5\n```\n\n::: {.cell-output-display}\n![Modeling framework comparison.](scLANE_Trajectory_DE_files/figure-html/fig-model_comp-1.png){#fig-model_comp width=864}\n:::\n:::\n\n\n\n\n# Downstream analysis {#sec-analysis}\n\n## Gene dynamics plots\n\nUsing the `getFittedValues()` function allows us to generate predictions from the models we fit, which we then use to visualize the dynamics of a few genes that are known to be strongly associated with the differentiation of immature progenitors into mature endocrine phenotypes ([source 1](https://doi.org/10.1038/s41467-018-06176-3), [source 2](https://doi.org/10.1242/dev.173849)). For all four genes, the fitted models show knots chosen in the area of pseudotime around the pre-endocrine cells. This tells us that these driver genes are being upregulated in precursor celltypes & are driving differentiation into the mature celltypes such as alpha & beta cells, after which the genes are downregulated. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\np6 <- getFittedValues(scLANE_models, \n                      genes = c(\"Chga\", \"Chgb\", \"Fev\", \"Cck\"), \n                      pt = sling_pt, \n                      expr.mat = seu, \n                      size.factor.offset = cell_offset, \n                      cell.meta.data = select(seu@meta.data, celltype, celltype_coarse)) %>% \n      ggplot(aes(x = pt, y = rna_log1p)) + \n      facet_wrap(~gene, \n                 ncol = 2, \n                 scales = \"free_y\") + \n      geom_point(aes(color = celltype), \n                 size = 2, \n                 alpha = 0.75, \n                 stroke = 0) + \n      geom_vline(data = data.frame(gene = \"Chga\", knot = unique(scLANE_models$Chga$Lineage_A$MARGE_Slope_Data$Breakpoint)), \n                 mapping = aes(xintercept = knot), \n                 linetype = \"dashed\", \n                 color = \"grey20\") + \n      geom_vline(data = data.frame(gene = \"Chgb\", knot = unique(scLANE_models$Chgb$Lineage_A$MARGE_Slope_Data$Breakpoint)), \n                 mapping = aes(xintercept = knot), \n                 linetype = \"dashed\", \n                 color = \"grey20\") + \n      geom_vline(data = data.frame(gene = \"Cck\", knot = unique(scLANE_models$Cck$Lineage_A$MARGE_Slope_Data$Breakpoint)), \n                 mapping = aes(xintercept = knot), \n                 linetype = \"dashed\", \n                 color = \"grey20\") + \n      geom_vline(data = data.frame(gene = \"Fev\", knot = unique(scLANE_models$Fev$Lineage_A$MARGE_Slope_Data$Breakpoint)), \n                 mapping = aes(xintercept = knot), \n                 linetype = \"dashed\", \n                 color = \"grey20\") + \n      geom_ribbon(aes(ymin = scLANE_ci_ll_log1p, ymax = scLANE_ci_ul_log1p), \n                  linewidth = 0, \n                  fill = \"grey70\", \n                  alpha = 0.9) + \n      geom_line(aes(y = scLANE_pred_log1p), \n                color = \"black\", \n                linewidth = 0.75) + \n      scale_x_continuous(labels = scales::label_number(accuracy = 0.01)) + \n      scale_color_manual(values = palette_celltype) + \n      labs(x = \"Pseudotime\", \n           y = \"Normalized Expression\") + \n      theme_scLANE() + \n      theme(legend.title = element_blank(), \n            strip.text.x = element_text(face = \"italic\")) + \n      guide_umap()\np6\n```\n\n::: {.cell-output-display}\n![scLANE models of endocrinogenesis drivers.](scLANE_Trajectory_DE_files/figure-html/fig-model_scLANE-1.png){#fig-model_scLANE width=1152}\n:::\n:::\n\n\n\n\nOn the other hand, if we use additive models the \"peak\" of expression is placed among the mature endocrine celltypes - which doesn't make biological sense if we know that these genes are driving that process of differentiation. This can of course be tweaked by changing the degree or degrees of freedom of the underlying basis spline, but choosing a \"best\" value for those hyperparameters can be difficult, whereas `scLANE` identifies optimal parameters internally by default. In addition, the knots chosen by `scLANE` for each gene can be informative with respect to the underlying biology, whereas the knots from GAMs are evenly spaced at quantiles & carry no biological interpretation. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\np7 <- getFittedValues(scLANE_models, \n                      genes = c(\"Chga\", \"Chgb\", \"Fev\", \"Cck\"), \n                      pt = sling_pt, \n                      expr.mat = seu, \n                      size.factor.offset = cell_offset, \n                      cell.meta.data = select(seu@meta.data, celltype, celltype_coarse)) %>% \n      mutate(rna_raw = rna / size_factor, .before = 7) %>% \n      with_groups(gene, \n                  mutate, \n                  GAM_fitted_link = predict(nbGAM(expr = rna_raw, \n                                                  pt = sling_pt, \n                                                  Y.offset = cell_offset, \n                                                  spline.df = 3)), \n                  GAM_se_link = predict(nbGAM(expr = rna_raw, \n                                              pt = sling_pt, \n                                              Y.offset = cell_offset, \n                                              spline.df = 3), se.fit = TRUE)[[2]]) %>% \n      mutate(GAM_pred = exp(GAM_fitted_link) * cell_offset, \n             GAM_ci_ll = exp(GAM_fitted_link - qnorm(0.975) * GAM_se_link) * cell_offset, \n             GAM_ci_ul = exp(GAM_fitted_link + qnorm(0.975) * GAM_se_link) * cell_offset, \n             GAM_pred_log1p = log1p(GAM_pred), \n             GAM_ci_ll_log1p = log1p(GAM_ci_ll), \n             GAM_ci_ul_log1p = log1p(GAM_ci_ul)) %>% \n      ggplot(aes(x = pt, y = rna_log1p)) + \n      facet_wrap(~gene, \n                 ncol = 2, \n                 scales = \"free_y\") + \n      geom_point(aes(color = celltype), \n                 size = 2, \n                 alpha = 0.75, \n                 stroke = 0) + \n      geom_ribbon(aes(ymin = GAM_ci_ll_log1p, ymax = GAM_ci_ul_log1p), \n                  linewidth = 0, \n                  fill = \"grey70\", \n                  alpha = 0.9) + \n      geom_line(aes(y = GAM_pred_log1p), \n                color = \"black\", \n                linewidth = 0.75) + \n      scale_x_continuous(labels = scales::label_number(accuracy = 0.01)) + \n      scale_color_manual(values = palette_celltype) + \n      labs(x = \"Pseudotime\", \n           y = \"Normalized Expression\") + \n      theme_scLANE() + \n      theme(legend.title = element_blank(), \n            strip.text.x = element_text(face = \"italic\")) + \n      guide_umap()\np7\n```\n\n::: {.cell-output-display}\n![Additive models of endocrinogenesis drivers.](scLANE_Trajectory_DE_files/figure-html/fig-model_GAM-1.png){#fig-model_GAM width=1152}\n:::\n:::\n\n\n\n\n## Distribution of knot locations\n\nLet's take a broader view of the dataset by examining the distribution of adaptively chosen knots from our models. We limit the analysis to the set of 2452 genes determined to be dynamic. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndyn_genes <- filter(scLANE_res_tidy, Gene_Dynamic_Overall == 1) %>% \n             pull(Gene)\nknot_df <- getKnotDist(scLANE_models, dyn_genes)\n```\n:::\n\n\n\n\nWe'll plot a histogram of the knot values along with a ridgeplot of the pseudotime distribution for each celltype. We see that a large number of the selected knots are placed at the beginning of the trajectory, around where the ductal cells transition into endocrine progenitors. A smaller set of knots is placed about halfway through the trajectory, which we've annotated as the point at which pre-endocrine cells begin differentiating into mature endocrine phenotypes. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\np8 <- ggplot(knot_df, aes(x = knot)) + \n      geom_histogram(aes(y = after_stat(density)), \n                     color = \"black\", \n                     fill = \"white\", \n                     linewidth = 0.5) + \n      geom_density(fill = \"deepskyblue3\", \n                   alpha = 0.5, \n                   color = \"deepskyblue4\", \n                   linewidth = 1) + \n      scale_x_continuous(limits = c(0, 1), labels = scales::label_number(accuracy = 0.01)) + \n      labs(x = \"Pseudotime\") + \n      theme_scLANE() + \n      theme(axis.ticks.y = element_blank(), \n            axis.title.y = element_blank(), \n            axis.text.y = element_blank())\np9 <- data.frame(celltype = seu$celltype, \n                 pt = seu$sling_pt) %>% \n      ggplot(aes(x = pt, y = celltype, fill = celltype, color = celltype)) + \n      ggridges::geom_density_ridges(alpha = 0.75, size = 1, scale = 0.95) + \n      scale_x_continuous(labels = scales::label_number(accuracy = 0.01), limits = c(0, 1)) + \n      scale_fill_manual(values = palette_celltype) + \n      scale_color_manual(values = palette_celltype) + \n      labs(x = \"Pseudotime\") + \n      theme_scLANE() + \n      theme(axis.title.y = element_blank(), \n            legend.title = element_blank()) + \n      guide_umap()\np10 <- (p8 / p9) + \n       plot_layout(heights = c(1/4, 3/4), axes = \"collect\")\np10\n```\n\n::: {.cell-output-display}\n![Distribution of adaptively-chosen knots from scLANE.](scLANE_Trajectory_DE_files/figure-html/fig-knot_dist-1.png){#fig-knot_dist width=864}\n:::\n:::\n\n\n\n\n## Dynamic gene clustering\n\nWe can extract a matrix of fitted dynamics using `smoothedCountsMatrix()`. Next, the `embedGenes()` function reduces dimensionality with PCA, clusters the genes using the Leiden algorithm, & embeds the genes in two dimensions with UMAP.  \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsmoothed_counts <- smoothedCountsMatrix(scLANE_models, \n                                        pt = sling_pt, \n                                        genes = dyn_genes, \n                                        size.factor.offset = cell_offset)\ngene_embed <- embedGenes(log1p(smoothed_counts$Lineage_A), resolution.param = 0.2)\n```\n:::\n\n\n\n\nFirst we'll visualize the gene clusters on the first two PCs. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\np11 <- ggplot(gene_embed, aes(x = pc1, y = pc2, color = leiden)) + \n       geom_point(size = 2, \n                  alpha = 0.75, \n                  stroke = 0) + \n       labs(x = \"PC 1\", \n            y = \"PC 2\", \n            color = \"Leiden Cluster\") +\n       paletteer::scale_color_paletteer_d(\"ggsci::default_igv\") + \n       theme_scLANE(umap = TRUE) + \n       guide_umap()\np11\n```\n\n::: {.cell-output-display}\n![Unsupervised clustering of genes in PCA space.](scLANE_Trajectory_DE_files/figure-html/fig-gene_pca-1.png){#fig-gene_pca width=864}\n:::\n:::\n\n\n\n\nThe UMAP embedding shows that even with the relatively small number of genes, clear patterns are visible. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\np12 <- ggplot(gene_embed, aes(x = umap1, y = umap2, color = leiden)) + \n       geom_point(size = 2, \n                  alpha = 0.75, \n                  stroke = 0) + \n       labs(x = \"UMAP 1\", \n            y = \"UMAP 2\", \n            color = \"Gene Cluster\") +\n       paletteer::scale_color_paletteer_d(\"ggsci::default_igv\") + \n       theme_scLANE(umap = TRUE) + \n       guide_umap()\np12\n```\n\n::: {.cell-output-display}\n![Unsupervised clustering of genes in UMAP space.](scLANE_Trajectory_DE_files/figure-html/fig-gene_umap-1.png){#fig-gene_umap width=864}\n:::\n:::\n\n\n\n\n## Expression cascades\n\nWe can also plot a heatmap of the dynamic genes; this requires a bit of setup, for which we'll use the `ComplexHeatmap` package. We scale each gene, and clip values to be on $[-6, 6]$. The columns (cells) of the heatmap are ordered by estimated pseudotime, and the rows (genes) are ordered by expression peak. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncol_anno_df <- select(seu@meta.data, \n                      cell_name, \n                      celltype, \n                      sling_pt) %>% \n               mutate(celltype = as.factor(celltype)) %>% \n               arrange(sling_pt)\ngene_order <- sortGenesHeatmap(smoothed_counts$Lineage_A, pt.vec = sling_pt$PT)\nheatmap_mat <- t(scale(smoothed_counts$Lineage_A))\nheatmap_mat[heatmap_mat > 6] <- 6\nheatmap_mat[heatmap_mat < -6] <- -6\ncolnames(heatmap_mat) <- seu$cell_name\nheatmap_mat <- heatmap_mat[, col_anno_df$cell_name]\nheatmap_mat <- heatmap_mat[gene_order, ]\npalette_celltype_hm <- as.character(palette_celltype[1:length(unique(seu$celltype))])\nnames(palette_celltype_hm) <- levels(col_anno_df$celltype)\ncol_anno <- HeatmapAnnotation(Celltype = col_anno_df$celltype, \n                              Pseudotime = col_anno_df$sling_pt, \n                              col = list(Celltype = palette_celltype_hm, \n                                         Pseudotime = circlize::colorRamp2(seq(0, 1, by = 0.25), palette_heatmap)),\n                              show_legend = TRUE, \n                              show_annotation_name = FALSE, \n                              gap = unit(1, \"mm\"), \n                              border = TRUE)\npalette_cluster_hm <- as.character(paletteer::paletteer_d(\"ggsci::default_igv\")[1:length(unique(gene_embed$leiden))])\nnames(palette_cluster_hm) <- as.character(unique(gene_embed$leiden))\nrow_anno <- HeatmapAnnotation(Cluster = as.factor(gene_embed$leiden), \n                              col = list(Cluster = palette_cluster_hm), \n                              show_legend = TRUE, \n                              show_annotation_name = FALSE, \n                              annotation_legend_param = list(title = \"Gene\\nCluster\"), \n                              gap = unit(1, \"mm\"), \n                              border = TRUE, \n                              which = \"row\")\n```\n:::\n\n\n\n\nThe heatmap shows clear dynamic patterns across pseudotime; these patterns are often referred to as *expression cascades*, and represent periodic up- and down-regulation of different gene programs during the course of the underlying biological process. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nHeatmap(matrix = heatmap_mat, \n        name = \"Spliced\\nmRNA\", \n        col = circlize::colorRamp2(colors = viridis::inferno(50), \n                                   breaks = seq(min(heatmap_mat), max(heatmap_mat), length.out = 50)), \n        cluster_columns = FALSE,\n        width = 12, \n        height = 6, \n        column_title = \"\",\n        cluster_rows = FALSE,\n        top_annotation = col_anno, \n        left_annotation = row_anno, \n        show_column_names = FALSE, \n        show_row_names = FALSE, \n        use_raster = TRUE,\n        raster_by_magick = TRUE, \n        raster_quality = 5)\n```\n\n::: {.cell-output-display}\n![Expression cascades of dynamic genes.](scLANE_Trajectory_DE_files/figure-html/fig-exp_cascade-1.png){#fig-exp_cascade width=1152}\n:::\n:::\n\n\n\n\n## Gene programs\n\nUsing our gene clusters & the `gprofiler2` package, we run an enrichment analysis against [the biological process (BP) set of gene ontologies](http://geneontology.org/docs/ontology-documentation/). We make sure to order the genes in each cluster by their test statistics by joining to the results table from `scLANE`. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngene_clust_list <- purrr::map(unique(gene_embed$leiden), \\(x) { \n  filter(gene_embed, leiden == x) %>% \n  inner_join(scLANE_res_tidy, by = c(\"gene\" = \"Gene\")) %>% \n  arrange(desc(Test_Stat)) %>% \n  pull(gene)\n}) \nnames(gene_clust_list) <- paste0(\"Leiden_\", unique(gene_embed$leiden))\nenrich_res <- gprofiler2::gost(gene_clust_list, \n                               organism = \"mmusculus\", \n                               ordered_query = TRUE, \n                               multi_query = FALSE, \n                               sources = \"GO:BP\", \n                               significant = TRUE)\n```\n:::\n\n\n\n\nA look at the top 5 most-significant GO terms for each gene cluster reveals heterogeneous functionalities across groups of genes.\n\n\n\n\n::: {#tbl-go_bp .cell tbl-cap='The top-5 biological process GO terms per cluster.'}\n\n```{.r .cell-code  code-fold=\"true\"}\nmutate(enrich_res$result, \n       query = gsub(\"Leiden_\", \"\", query)) %>% \n  rename(cluster = query) %>% \n  with_groups(cluster, \n              slice_head,\n              n = 5) %>% \n  select(cluster, \n         term_name, \n         p_value, \n         term_size, \n         query_size, \n         intersection_size, \n         term_id) %>% \n  kableExtra::kbl(digits = 3, \n                  booktabs = TRUE, \n                  col.names = c(\"Gene Cluster\", \"Term Name\", \"Adj. P-value\", \"Term Size\", \n                                \"Query Size\", \"Intersection Size\", \"Term ID\")) %>% \n  kableExtra::kable_classic(c(\"hover\"), full_width = FALSE)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\" lightable-classic lightable-hover\" style='font-family: \"Arial Narrow\", \"Source Sans Pro\", sans-serif; width: auto !important; margin-left: auto; margin-right: auto;'>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Gene Cluster </th>\n   <th style=\"text-align:left;\"> Term Name </th>\n   <th style=\"text-align:right;\"> Adj. P-value </th>\n   <th style=\"text-align:right;\"> Term Size </th>\n   <th style=\"text-align:right;\"> Query Size </th>\n   <th style=\"text-align:right;\"> Intersection Size </th>\n   <th style=\"text-align:left;\"> Term ID </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> 0 </td>\n   <td style=\"text-align:left;\"> tube development </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 1181 </td>\n   <td style=\"text-align:right;\"> 335 </td>\n   <td style=\"text-align:right;\"> 66 </td>\n   <td style=\"text-align:left;\"> GO:0035295 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 0 </td>\n   <td style=\"text-align:left;\"> anatomical structure development </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 6269 </td>\n   <td style=\"text-align:right;\"> 326 </td>\n   <td style=\"text-align:right;\"> 157 </td>\n   <td style=\"text-align:left;\"> GO:0048856 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 0 </td>\n   <td style=\"text-align:left;\"> multicellular organism development </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 4879 </td>\n   <td style=\"text-align:right;\"> 329 </td>\n   <td style=\"text-align:right;\"> 136 </td>\n   <td style=\"text-align:left;\"> GO:0007275 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 0 </td>\n   <td style=\"text-align:left;\"> developmental process </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 6854 </td>\n   <td style=\"text-align:right;\"> 326 </td>\n   <td style=\"text-align:right;\"> 164 </td>\n   <td style=\"text-align:left;\"> GO:0032502 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 0 </td>\n   <td style=\"text-align:left;\"> tube morphogenesis </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 927 </td>\n   <td style=\"text-align:right;\"> 335 </td>\n   <td style=\"text-align:right;\"> 55 </td>\n   <td style=\"text-align:left;\"> GO:0035239 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 1 </td>\n   <td style=\"text-align:left;\"> signal release </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 587 </td>\n   <td style=\"text-align:right;\"> 178 </td>\n   <td style=\"text-align:right;\"> 34 </td>\n   <td style=\"text-align:left;\"> GO:0023061 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 1 </td>\n   <td style=\"text-align:left;\"> export from cell </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 982 </td>\n   <td style=\"text-align:right;\"> 316 </td>\n   <td style=\"text-align:right;\"> 55 </td>\n   <td style=\"text-align:left;\"> GO:0140352 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 1 </td>\n   <td style=\"text-align:left;\"> secretion by cell </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 913 </td>\n   <td style=\"text-align:right;\"> 289 </td>\n   <td style=\"text-align:right;\"> 50 </td>\n   <td style=\"text-align:left;\"> GO:0032940 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 1 </td>\n   <td style=\"text-align:left;\"> peptide hormone secretion </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 316 </td>\n   <td style=\"text-align:right;\"> 214 </td>\n   <td style=\"text-align:right;\"> 28 </td>\n   <td style=\"text-align:left;\"> GO:0030072 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 1 </td>\n   <td style=\"text-align:left;\"> hormone transport </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 405 </td>\n   <td style=\"text-align:right;\"> 316 </td>\n   <td style=\"text-align:right;\"> 36 </td>\n   <td style=\"text-align:left;\"> GO:0009914 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 2 </td>\n   <td style=\"text-align:left;\"> nitrogen compound transport </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 1959 </td>\n   <td style=\"text-align:right;\"> 160 </td>\n   <td style=\"text-align:right;\"> 46 </td>\n   <td style=\"text-align:left;\"> GO:0071705 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 2 </td>\n   <td style=\"text-align:left;\"> regulation of secretion by cell </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 667 </td>\n   <td style=\"text-align:right;\"> 156 </td>\n   <td style=\"text-align:right;\"> 27 </td>\n   <td style=\"text-align:left;\"> GO:1903530 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 2 </td>\n   <td style=\"text-align:left;\"> regulation of hormone levels </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 639 </td>\n   <td style=\"text-align:right;\"> 156 </td>\n   <td style=\"text-align:right;\"> 26 </td>\n   <td style=\"text-align:left;\"> GO:0010817 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 2 </td>\n   <td style=\"text-align:left;\"> secretion by cell </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 913 </td>\n   <td style=\"text-align:right;\"> 156 </td>\n   <td style=\"text-align:right;\"> 30 </td>\n   <td style=\"text-align:left;\"> GO:0032940 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 2 </td>\n   <td style=\"text-align:left;\"> regulation of transport </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 1749 </td>\n   <td style=\"text-align:right;\"> 274 </td>\n   <td style=\"text-align:right;\"> 56 </td>\n   <td style=\"text-align:left;\"> GO:0051049 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 3 </td>\n   <td style=\"text-align:left;\"> organonitrogen compound metabolic process </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 5744 </td>\n   <td style=\"text-align:right;\"> 523 </td>\n   <td style=\"text-align:right;\"> 220 </td>\n   <td style=\"text-align:left;\"> GO:1901564 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 3 </td>\n   <td style=\"text-align:left;\"> system development </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 4117 </td>\n   <td style=\"text-align:right;\"> 522 </td>\n   <td style=\"text-align:right;\"> 173 </td>\n   <td style=\"text-align:left;\"> GO:0048731 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 3 </td>\n   <td style=\"text-align:left;\"> positive regulation of biological process </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 6589 </td>\n   <td style=\"text-align:right;\"> 528 </td>\n   <td style=\"text-align:right;\"> 234 </td>\n   <td style=\"text-align:left;\"> GO:0048518 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 3 </td>\n   <td style=\"text-align:left;\"> positive regulation of cellular process </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 6078 </td>\n   <td style=\"text-align:right;\"> 528 </td>\n   <td style=\"text-align:right;\"> 218 </td>\n   <td style=\"text-align:left;\"> GO:0048522 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 3 </td>\n   <td style=\"text-align:left;\"> multicellular organism development </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 4879 </td>\n   <td style=\"text-align:right;\"> 523 </td>\n   <td style=\"text-align:right;\"> 187 </td>\n   <td style=\"text-align:left;\"> GO:0007275 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 4 </td>\n   <td style=\"text-align:left;\"> cell cycle </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 1808 </td>\n   <td style=\"text-align:right;\"> 303 </td>\n   <td style=\"text-align:right;\"> 173 </td>\n   <td style=\"text-align:left;\"> GO:0007049 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 4 </td>\n   <td style=\"text-align:left;\"> cell cycle process </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 1256 </td>\n   <td style=\"text-align:right;\"> 285 </td>\n   <td style=\"text-align:right;\"> 149 </td>\n   <td style=\"text-align:left;\"> GO:0022402 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 4 </td>\n   <td style=\"text-align:left;\"> mitotic cell cycle </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 852 </td>\n   <td style=\"text-align:right;\"> 323 </td>\n   <td style=\"text-align:right;\"> 125 </td>\n   <td style=\"text-align:left;\"> GO:0000278 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 4 </td>\n   <td style=\"text-align:left;\"> mitotic cell cycle process </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 718 </td>\n   <td style=\"text-align:right;\"> 285 </td>\n   <td style=\"text-align:right;\"> 112 </td>\n   <td style=\"text-align:left;\"> GO:1903047 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 4 </td>\n   <td style=\"text-align:left;\"> chromosome segregation </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 408 </td>\n   <td style=\"text-align:right;\"> 263 </td>\n   <td style=\"text-align:right;\"> 86 </td>\n   <td style=\"text-align:left;\"> GO:0007059 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 5 </td>\n   <td style=\"text-align:left;\"> multicellular organism development </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 4879 </td>\n   <td style=\"text-align:right;\"> 314 </td>\n   <td style=\"text-align:right;\"> 126 </td>\n   <td style=\"text-align:left;\"> GO:0007275 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 5 </td>\n   <td style=\"text-align:left;\"> system development </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 4117 </td>\n   <td style=\"text-align:right;\"> 314 </td>\n   <td style=\"text-align:right;\"> 112 </td>\n   <td style=\"text-align:left;\"> GO:0048731 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 5 </td>\n   <td style=\"text-align:left;\"> anatomical structure development </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 6269 </td>\n   <td style=\"text-align:right;\"> 307 </td>\n   <td style=\"text-align:right;\"> 141 </td>\n   <td style=\"text-align:left;\"> GO:0048856 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 5 </td>\n   <td style=\"text-align:left;\"> developmental process </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 6854 </td>\n   <td style=\"text-align:right;\"> 341 </td>\n   <td style=\"text-align:right;\"> 160 </td>\n   <td style=\"text-align:left;\"> GO:0032502 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 5 </td>\n   <td style=\"text-align:left;\"> animal organ development </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 3260 </td>\n   <td style=\"text-align:right;\"> 341 </td>\n   <td style=\"text-align:right;\"> 99 </td>\n   <td style=\"text-align:left;\"> GO:0048513 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n\nWe can use the `geneProgramScoring()` function to add module scores for each gene cluster to our `Seurat` object. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npeptide_program <- filter(enrich_res$result, term_name == \"peptide hormone secretion\") %>% \n                   arrange(p_value) %>% \n                   slice_head(n = 1) %>% \n                   pull(query)\npeptide_program_name <- gsub(\"Leiden_\", \"cluster_\", peptide_program)\nseu <- geneProgramScoring(seu, \n                          genes = gene_embed$gene, \n                          gene.clusters = gene_embed$leiden)\n```\n:::\n\n\n\n\nVisualizing the scores on our UMAP embedding shows us that the peptide program is highly-enriched only in mature endocrine cells. This makes sense biologically as mature endocrine celltypes' primary roles are to produce peptides such as glucagon (alpha cells), insulin (beta cells), somatostatin (ductal cells), and pancreatic polypeptide (gamma cells). \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\np13 <- Embeddings(seu, \"umap\") %>% \n       as.data.frame() %>% \n       magrittr::set_colnames(c(\"UMAP_1\", \"UMAP_2\")) %>% \n       mutate(peptide_program_score = seu@meta.data[, peptide_program_name]) %>% \n       ggplot(aes(x = UMAP_1, y = UMAP_2, color = peptide_program_score)) + \n       geom_point(size = 1.5, alpha = 0.75, stroke = 0) + \n       labs(x = \"UMAP 1\", \n            y = \"UMAP 2\", \n            color = \"Program Score\") + \n       scale_color_gradientn(colors = palette_heatmap, \n                             labels = scales::label_number(accuracy = 0.1)) + \n       theme_scLANE(umap = TRUE) \np14 <- (p13 / p1) + \n       plot_layout(guides = \"collect\", axes = \"collect\")\np14\n```\n\n::: {.cell-output-display}\n![Enrichment of peptide production gene program.](scLANE_Trajectory_DE_files/figure-html/fig-peptide_enr-1.png){#fig-peptide_enr width=864}\n:::\n:::\n\n\n\n\nWe can also visualize the trend in the peptide program scores over time, which confirms the biological conclusions we came to by inspecting the UMAP. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\np15 <- data.frame(PT = sling_pt$PT, \n                  peptide_program_score = seu@meta.data[, peptide_program_name], \n                  celltype = seu$celltype) %>% \n       ggplot(aes(x = PT, y = peptide_program_score, color = celltype)) + \n       geom_point(alpha = 0.75, \n                  stroke = 0, \n                  size = 2) + \n       geom_smooth(color = \"black\", \n                   method = \"loess\", \n                   linewidth = 0.75) + \n       scale_color_manual(values = palette_celltype) + \n       labs(x = \"Pseudotime\", y = \"Peptide Program Score\") + \n       theme_scLANE() + \n       theme(legend.title = element_blank()) + \n       guide_umap()\np15\n```\n\n::: {.cell-output-display}\n![Peptide production gene program scores over pseudotime.](scLANE_Trajectory_DE_files/figure-html/fig-peptide_smoother-1.png){#fig-peptide_smoother width=864}\n:::\n:::\n\n\n\n\nNext, in order to identify which genes are \"drivers\" of a certain gene program, we can use the `geneProgramDrivers()` function to correlate normalized expression with program scores. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprogram_drivers <- geneProgramDrivers(seu, \n                                      genes = gene_embed$gene, \n                                      gene.program = seu@meta.data[, peptide_program_name], \n                                      verbose = FALSE)\n```\n:::\n\n\n\n\nWe display the top 10 most-correlated genes here. For example, carboxypeptidase E (*Cpe*) is involved in the production of insulin ([source](https://doi.org/10.1073/pnas.1323066111)). \n\n\n\n\n::: {#tbl-driver_genes .cell tbl-cap='The top-10 driver genes for the peptide production gene program.'}\n\n```{.r .cell-code  code-fold=\"true\"}\nslice_head(program_drivers, n = 10) %>% \n  kableExtra::kbl(digits = 3, \n                  booktabs = TRUE, \n                  row.names = FALSE,\n                  col.names = c(\"Gene\", \"Correlation\", \"P-value\", \"Adj. P-value\")) %>% \n  kableExtra::kable_classic(c(\"hover\"), full_width = FALSE)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\" lightable-classic lightable-hover\" style='font-family: \"Arial Narrow\", \"Source Sans Pro\", sans-serif; width: auto !important; margin-left: auto; margin-right: auto;'>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Gene </th>\n   <th style=\"text-align:right;\"> Correlation </th>\n   <th style=\"text-align:right;\"> P-value </th>\n   <th style=\"text-align:right;\"> Adj. P-value </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Cpe </td>\n   <td style=\"text-align:right;\"> 0.849 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Gnas </td>\n   <td style=\"text-align:right;\"> 0.824 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Fam183b </td>\n   <td style=\"text-align:right;\"> 0.824 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Pcsk1n </td>\n   <td style=\"text-align:right;\"> 0.810 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Sparc </td>\n   <td style=\"text-align:right;\"> -0.774 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Aplp1 </td>\n   <td style=\"text-align:right;\"> 0.767 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Hmgn3 </td>\n   <td style=\"text-align:right;\"> 0.757 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Isl1 </td>\n   <td style=\"text-align:right;\"> 0.757 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 1700086L19Rik </td>\n   <td style=\"text-align:right;\"> 0.755 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Spp1 </td>\n   <td style=\"text-align:right;\"> -0.752 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n\nIndeed, normalized expression of *Cpe* is high across all mature endocrine celltypes, with alpha and beta cells showing the highest overall mean expression.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\np16 <- data.frame(celltype = seu$celltype, \n                  rna = seu@assays$spliced@data[\"Cpe\", ]) %>% \n       ggplot(aes(x = celltype, y = rna, color = celltype)) + \n       ggbeeswarm::geom_quasirandom(alpha = 0.75, \n                                    size = 2, \n                                    stroke = 0, \n                                    show.legend = FALSE) +\n       scale_color_manual(values = palette_celltype) + \n       stat_summary(fun = \"mean\", \n                    geom = \"point\", \n                    color = \"black\",\n                    size = 3) + \n       labs(y = \"Normalized Expression\") + \n       theme_scLANE() + \n       theme(axis.title.x = element_blank())\np16\n```\n\n::: {.cell-output-display}\n![Beeswarm plots of driver gene expression by celltype.](scLANE_Trajectory_DE_files/figure-html/fig-driver_gene_exp-1.png){#fig-driver_gene_exp width=864}\n:::\n:::\n\n\n\n\n## Dynamic gene enrichment\n\nLastly, we perform an enrichment analysis for our set of dynamic genes. We'll focus on terms from the GO biological process (BP) set, as those are generally the easiest to interpret. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndyn_gene_enrich <- enrichDynamicGenes(scLANE_res_tidy, species = \"Mmusculus\")\ndyn_go_bp_terms <- filter(dyn_gene_enrich$result, \n                          source == \"GO:BP\", \n                          p_value < 0.05)\n```\n:::\n\n\n\n\nOverall, there are 1341 unique significantly-enriched GO:BP terms for our trajectory. \n\n\n\n\n::: {#tbl-bp_terms .cell tbl-cap='Random sample of the biological processes enriched for the dynamic gene set.'}\n\n```{.r .cell-code  code-fold=\"true\"}\nselect(dyn_go_bp_terms, term_name, p_value, source) %>% \n  slice_sample(n = 10) %>% \n  kableExtra::kbl(digits = 3, \n                  booktabs = TRUE, \n                  row.names = FALSE,\n                  col.names = c(\"Term\", \"P-value\", \"Source\")) %>% \n  kableExtra::kable_classic(c(\"hover\"), full_width = FALSE)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\" lightable-classic lightable-hover\" style='font-family: \"Arial Narrow\", \"Source Sans Pro\", sans-serif; width: auto !important; margin-left: auto; margin-right: auto;'>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Term </th>\n   <th style=\"text-align:right;\"> P-value </th>\n   <th style=\"text-align:left;\"> Source </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> multi-organism reproductive process </td>\n   <td style=\"text-align:right;\"> 0.000 </td>\n   <td style=\"text-align:left;\"> GO:BP </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> response to electrical stimulus </td>\n   <td style=\"text-align:right;\"> 0.006 </td>\n   <td style=\"text-align:left;\"> GO:BP </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> regulation of nuclear division </td>\n   <td style=\"text-align:right;\"> 0.000 </td>\n   <td style=\"text-align:left;\"> GO:BP </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> meiotic nuclear division </td>\n   <td style=\"text-align:right;\"> 0.000 </td>\n   <td style=\"text-align:left;\"> GO:BP </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> response to transforming growth factor beta </td>\n   <td style=\"text-align:right;\"> 0.000 </td>\n   <td style=\"text-align:left;\"> GO:BP </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> regulation of fibroblast proliferation </td>\n   <td style=\"text-align:right;\"> 0.000 </td>\n   <td style=\"text-align:left;\"> GO:BP </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> cellular response to carbohydrate stimulus </td>\n   <td style=\"text-align:right;\"> 0.000 </td>\n   <td style=\"text-align:left;\"> GO:BP </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> double-strand break repair via homologous recombination </td>\n   <td style=\"text-align:right;\"> 0.018 </td>\n   <td style=\"text-align:left;\"> GO:BP </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> carbohydrate homeostasis </td>\n   <td style=\"text-align:right;\"> 0.000 </td>\n   <td style=\"text-align:left;\"> GO:BP </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> positive regulation of calcium ion transport </td>\n   <td style=\"text-align:right;\"> 0.046 </td>\n   <td style=\"text-align:left;\"> GO:BP </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n\n# Conclusions {#sec-conclusions}\n\nHopefully this vignette has been a useful introduction to running the `scLANE` software and using its outputs to help better understand biology at single-cell resolution. If you have questions about how the models work or are interpreted, software issues, or simply want to compare results feel free to open an issue on [the GitHub repository](https://github.com/jr-leary7/scLANE) or reach out via email to <j.leary@ufl.edu>. \n\n# References {#sec-refs}\n\n1. Bastidas-Ponce, Aimée *et al*. [Comprehensive single cell mRNA profiling reveals a detailed roadmap for pancreatic endocrinogenesis](https://doi.org/10.1242/dev.173849). *Development* (2019).\n\n2. Street, Kelly *et al*. [Slingshot: cell lineage and pseudotime inference for single-cell transcriptomics](https://doi.org/10.1186/s12864-018-4772-0). *BMC Genomics* (2018). \n\n3. Stoklosa, Jakub & David Warton. [A generalized estimating equation approach to multivariate adaptive regression splines](https://doi.org/10.1080/10618600.2017.1360780). *Journal of Computational and Graphical Statistics* (2018). \n\n# Session Info {#sec-SI}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessioninfo::session_info()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.2 (2023-10-31)\n os       macOS Sonoma 14.3.1\n system   x86_64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/New_York\n date     2024-04-16\n pandoc   3.1.12.3 @ /usr/local/bin/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package              * version    date (UTC) lib source\n abind                  1.4-5      2016-07-21 [1] CRAN (R 4.3.0)\n backports              1.4.1      2021-12-13 [1] CRAN (R 4.3.0)\n beeswarm               0.4.0      2021-06-01 [1] CRAN (R 4.3.0)\n bigassertr             0.1.6      2023-01-10 [1] CRAN (R 4.3.0)\n bigparallelr           0.3.2      2021-10-02 [1] CRAN (R 4.3.0)\n bigstatsr              1.5.12     2022-10-14 [1] CRAN (R 4.3.0)\n Biobase              * 2.62.0     2023-10-24 [1] Bioconductor\n BiocGenerics         * 0.48.1     2023-11-01 [1] Bioconductor\n BiocNeighbors          1.20.1     2023-12-18 [1] Bioconductor 3.18 (R 4.3.2)\n BiocParallel           1.36.0     2023-10-24 [1] Bioconductor\n bit                    4.0.5      2022-11-15 [1] CRAN (R 4.3.0)\n bitops                 1.0-7      2021-04-24 [1] CRAN (R 4.3.0)\n bluster                1.12.0     2023-10-24 [1] Bioconductor\n boot                   1.3-28.1   2022-11-22 [1] CRAN (R 4.3.2)\n broom                  1.0.5      2023-06-09 [1] CRAN (R 4.3.0)\n broom.mixed            0.2.9.4    2022-04-17 [1] CRAN (R 4.3.0)\n circlize               0.4.15     2022-05-10 [1] CRAN (R 4.3.0)\n cli                    3.6.2      2023-12-11 [1] CRAN (R 4.3.0)\n clue                   0.3-65     2023-09-23 [1] CRAN (R 4.3.0)\n cluster                2.1.6      2023-12-01 [1] CRAN (R 4.3.0)\n coda                   0.19-4     2020-09-30 [1] CRAN (R 4.3.0)\n codetools              0.2-19     2023-02-01 [1] CRAN (R 4.3.2)\n colorspace             2.1-0      2023-01-23 [1] CRAN (R 4.3.0)\n ComplexHeatmap       * 2.18.0     2023-10-24 [1] Bioconductor\n cowplot                1.1.2      2023-12-15 [1] CRAN (R 4.3.0)\n crayon                 1.5.2      2022-09-29 [1] CRAN (R 4.3.0)\n data.table             1.14.10    2023-12-08 [1] CRAN (R 4.3.0)\n DelayedArray           0.28.0     2023-10-24 [1] Bioconductor\n DelayedMatrixStats     1.24.0     2023-10-24 [1] Bioconductor\n deldir                 2.0-2      2023-11-23 [1] CRAN (R 4.3.0)\n digest                 0.6.33     2023-07-07 [1] CRAN (R 4.3.0)\n doParallel             1.0.17     2022-02-07 [1] CRAN (R 4.3.0)\n doSNOW                 1.0.20     2022-02-04 [1] CRAN (R 4.3.0)\n dotCall64              1.1-1      2023-11-28 [1] CRAN (R 4.3.0)\n dplyr                * 1.1.4      2023-11-17 [1] CRAN (R 4.3.0)\n ellipsis               0.3.2      2021-04-29 [1] CRAN (R 4.3.0)\n emmeans                1.10.0     2024-01-23 [1] CRAN (R 4.3.2)\n estimability           1.4.1      2022-08-05 [1] CRAN (R 4.3.0)\n evaluate               0.23       2023-11-01 [1] CRAN (R 4.3.0)\n fansi                  1.0.6      2023-12-08 [1] CRAN (R 4.3.0)\n farver                 2.1.1      2022-07-06 [1] CRAN (R 4.3.0)\n fastDummies            1.7.3      2023-07-06 [1] CRAN (R 4.3.0)\n fastmap                1.1.1      2023-02-24 [1] CRAN (R 4.3.0)\n ff                     4.0.9      2023-01-25 [1] CRAN (R 4.3.0)\n fitdistrplus           1.1-11     2023-04-25 [1] CRAN (R 4.3.0)\n flock                  0.7        2016-11-12 [1] CRAN (R 4.3.0)\n forcats                1.0.0      2023-01-29 [1] CRAN (R 4.3.0)\n foreach                1.5.2      2022-02-02 [1] CRAN (R 4.3.0)\n furrr                  0.3.1      2022-08-15 [1] CRAN (R 4.3.0)\n future                 1.33.1     2023-12-22 [1] CRAN (R 4.3.0)\n future.apply           1.11.1     2023-12-21 [1] CRAN (R 4.3.0)\n gamlss                 5.4-20     2023-10-04 [1] CRAN (R 4.3.0)\n gamlss.data            6.0-2      2021-11-07 [1] CRAN (R 4.3.0)\n gamlss.dist            6.1-1      2023-08-23 [1] CRAN (R 4.3.0)\n geeM                   0.10.1     2018-06-18 [1] CRAN (R 4.3.0)\n generics               0.1.3      2022-07-05 [1] CRAN (R 4.3.0)\n GenomeInfoDb         * 1.38.5     2023-12-28 [1] Bioconductor 3.18 (R 4.3.2)\n GenomeInfoDbData       1.2.11     2023-12-22 [1] Bioconductor\n GenomicRanges        * 1.54.1     2023-10-29 [1] Bioconductor\n GetoptLong             1.0.5      2020-12-15 [1] CRAN (R 4.3.0)\n ggbeeswarm             0.7.2      2023-04-29 [1] CRAN (R 4.3.0)\n ggh4x                  0.2.8      2024-01-23 [1] CRAN (R 4.3.2)\n ggplot2              * 3.4.4      2023-10-12 [1] CRAN (R 4.3.0)\n ggrepel                0.9.5      2024-01-10 [1] CRAN (R 4.3.0)\n ggridges               0.5.5      2023-12-15 [1] CRAN (R 4.3.0)\n glm2                 * 1.2.1      2018-08-11 [1] CRAN (R 4.3.0)\n glmmTMB                1.1.8      2023-10-07 [1] CRAN (R 4.3.0)\n GlobalOptions          0.1.2      2020-06-10 [1] CRAN (R 4.3.0)\n globals                0.16.2     2022-11-21 [1] CRAN (R 4.3.0)\n glue                   1.6.2      2022-02-24 [1] CRAN (R 4.3.0)\n goftest                1.2-3      2021-10-07 [1] CRAN (R 4.3.0)\n gprofiler2             0.2.2      2023-06-14 [1] CRAN (R 4.3.0)\n gridExtra              2.3        2017-09-09 [1] CRAN (R 4.3.0)\n gtable                 0.3.4      2023-08-21 [1] CRAN (R 4.3.0)\n highr                  0.10       2022-12-22 [1] CRAN (R 4.3.0)\n htmltools              0.5.7      2023-11-03 [1] CRAN (R 4.3.0)\n htmlwidgets            1.6.4      2023-12-06 [1] CRAN (R 4.3.0)\n httpuv                 1.6.13     2023-12-06 [1] CRAN (R 4.3.0)\n httr                   1.4.7      2023-08-15 [1] CRAN (R 4.3.0)\n ica                    1.0-3      2022-07-08 [1] CRAN (R 4.3.0)\n igraph                 2.0.1.1    2024-01-30 [1] CRAN (R 4.3.2)\n IRanges              * 2.36.0     2023-10-24 [1] Bioconductor\n irlba                  2.3.5.1    2022-10-03 [1] CRAN (R 4.3.0)\n iterators              1.0.14     2022-02-05 [1] CRAN (R 4.3.0)\n jsonlite               1.8.8      2023-12-04 [1] CRAN (R 4.3.0)\n kableExtra             1.3.4      2021-02-20 [1] CRAN (R 4.3.0)\n KernSmooth             2.23-22    2023-07-10 [1] CRAN (R 4.3.2)\n knitr                  1.45       2023-10-30 [1] CRAN (R 4.3.0)\n labeling               0.4.3      2023-08-29 [1] CRAN (R 4.3.0)\n later                  1.3.2      2023-12-06 [1] CRAN (R 4.3.0)\n lattice                0.22-5     2023-10-24 [1] CRAN (R 4.3.0)\n lazyeval               0.2.2      2019-03-15 [1] CRAN (R 4.3.0)\n leiden                 0.4.3.1    2023-11-17 [1] CRAN (R 4.3.0)\n lifecycle              1.0.4      2023-11-07 [1] CRAN (R 4.3.0)\n listenv                0.9.0      2022-12-16 [1] CRAN (R 4.3.0)\n lme4                   1.1-35.1   2023-11-05 [1] CRAN (R 4.3.0)\n lmtest                 0.9-40     2022-03-21 [1] CRAN (R 4.3.0)\n magick                 2.8.2      2023-12-20 [1] CRAN (R 4.3.0)\n magrittr             * 2.0.3      2022-03-30 [1] CRAN (R 4.3.0)\n MASS                   7.3-60     2023-05-04 [1] CRAN (R 4.3.0)\n Matrix                 1.6-5      2024-01-11 [1] CRAN (R 4.3.0)\n MatrixGenerics       * 1.14.0     2023-10-24 [1] Bioconductor\n matrixStats          * 1.2.0      2023-12-11 [1] CRAN (R 4.3.0)\n mgcv                   1.9-1      2023-12-21 [1] CRAN (R 4.3.0)\n mime                   0.12       2021-09-28 [1] CRAN (R 4.3.0)\n miniUI                 0.1.1.1    2018-05-18 [1] CRAN (R 4.3.0)\n minqa                  1.2.6      2023-09-11 [1] CRAN (R 4.3.0)\n munsell                0.5.0      2018-06-12 [1] CRAN (R 4.3.0)\n mvtnorm                1.2-4      2023-11-27 [1] CRAN (R 4.3.0)\n nlme                   3.1-164    2023-11-27 [1] CRAN (R 4.3.0)\n nloptr                 2.0.3      2022-05-26 [1] CRAN (R 4.3.0)\n numDeriv               2016.8-1.1 2019-06-06 [1] CRAN (R 4.3.0)\n paletteer              1.6.0      2024-01-21 [1] CRAN (R 4.3.0)\n parallelly             1.36.0     2023-05-26 [1] CRAN (R 4.3.0)\n patchwork            * 1.2.0      2024-01-08 [1] CRAN (R 4.3.0)\n pbapply                1.7-2      2023-06-27 [1] CRAN (R 4.3.0)\n pillar                 1.9.0      2023-03-22 [1] CRAN (R 4.3.0)\n pkgconfig              2.0.3      2019-09-22 [1] CRAN (R 4.3.0)\n plotly                 4.10.4     2024-01-13 [1] CRAN (R 4.3.0)\n plyr                   1.8.9      2023-10-02 [1] CRAN (R 4.3.0)\n png                    0.1-8      2022-11-29 [1] CRAN (R 4.3.0)\n polyclip               1.10-6     2023-09-27 [1] CRAN (R 4.3.0)\n princurve            * 2.1.6      2021-01-18 [1] CRAN (R 4.3.0)\n prismatic              1.1.1      2022-08-15 [1] CRAN (R 4.3.0)\n progressr              0.14.0     2023-08-10 [1] CRAN (R 4.3.0)\n promises               1.2.1      2023-08-10 [1] CRAN (R 4.3.0)\n ps                     1.7.5      2023-04-18 [1] CRAN (R 4.3.0)\n purrr                  1.0.2      2023-08-10 [1] CRAN (R 4.3.0)\n R6                     2.5.1      2021-08-19 [1] CRAN (R 4.3.0)\n RANN                   2.6.1      2019-01-08 [1] CRAN (R 4.3.0)\n RColorBrewer           1.1-3      2022-04-03 [1] CRAN (R 4.3.0)\n Rcpp                   1.0.11     2023-07-06 [1] CRAN (R 4.3.0)\n RcppAnnoy              0.0.21     2023-07-02 [1] CRAN (R 4.3.0)\n RcppEigen              0.3.3.9.4  2023-11-02 [1] CRAN (R 4.3.0)\n RcppHNSW               0.5.0      2023-09-19 [1] CRAN (R 4.3.0)\n RCurl                  1.98-1.13  2023-11-02 [1] CRAN (R 4.3.0)\n rematch2               2.1.2      2020-05-01 [1] CRAN (R 4.3.0)\n reshape2               1.4.4      2020-04-09 [1] CRAN (R 4.3.0)\n reticulate           * 1.34.0     2023-10-12 [1] CRAN (R 4.3.0)\n rjson                  0.2.21     2022-01-09 [1] CRAN (R 4.3.0)\n rlang                  1.1.2      2023-11-04 [1] CRAN (R 4.3.0)\n rmarkdown              2.25       2023-09-18 [1] CRAN (R 4.3.0)\n rmio                   0.4.0      2022-02-17 [1] CRAN (R 4.3.0)\n ROCR                   1.0-11     2020-05-02 [1] CRAN (R 4.3.0)\n RSpectra               0.16-1     2022-04-24 [1] CRAN (R 4.3.0)\n rstudioapi             0.15.0     2023-07-07 [1] CRAN (R 4.3.0)\n Rtsne                  0.17       2023-12-07 [1] CRAN (R 4.3.0)\n rvest                  1.0.3      2022-08-19 [1] CRAN (R 4.3.0)\n S4Arrays               1.2.0      2023-10-24 [1] Bioconductor\n S4Vectors            * 0.40.2     2023-11-23 [1] Bioconductor\n scales                 1.3.0      2023-11-28 [1] CRAN (R 4.3.0)\n scattermore            1.2        2023-06-12 [1] CRAN (R 4.3.0)\n scLANE               * 0.7.9      2024-04-13 [1] Bioconductor\n sctransform            0.4.1      2023-10-19 [1] CRAN (R 4.3.0)\n sessioninfo            1.2.2      2021-12-06 [1] CRAN (R 4.3.0)\n Seurat               * 5.0.1      2023-11-17 [1] CRAN (R 4.3.0)\n SeuratObject         * 5.0.1      2023-11-17 [1] CRAN (R 4.3.0)\n shape                  1.4.6      2021-05-19 [1] CRAN (R 4.3.0)\n shiny                  1.8.0      2023-11-17 [1] CRAN (R 4.3.0)\n SingleCellExperiment * 1.24.0     2023-10-24 [1] Bioconductor\n slingshot            * 2.10.0     2023-10-24 [1] Bioconductor\n snow                   0.4-4      2021-10-27 [1] CRAN (R 4.3.0)\n sp                   * 2.1-2      2023-11-26 [1] CRAN (R 4.3.0)\n spam                   2.10-0     2023-10-23 [1] CRAN (R 4.3.0)\n SparseArray            1.2.3      2023-12-25 [1] Bioconductor 3.18 (R 4.3.2)\n sparseMatrixStats      1.14.0     2023-10-24 [1] Bioconductor\n spatstat.data          3.0-3      2023-10-24 [1] CRAN (R 4.3.0)\n spatstat.explore       3.2-5      2023-10-22 [1] CRAN (R 4.3.0)\n spatstat.geom          3.2-7      2023-10-20 [1] CRAN (R 4.3.0)\n spatstat.random        3.2-2      2023-11-29 [1] CRAN (R 4.3.0)\n spatstat.sparse        3.0-3      2023-10-24 [1] CRAN (R 4.3.0)\n spatstat.utils         3.0-4      2023-10-24 [1] CRAN (R 4.3.0)\n stringi                1.8.3      2023-12-11 [1] CRAN (R 4.3.0)\n stringr                1.5.1      2023-11-14 [1] CRAN (R 4.3.0)\n SummarizedExperiment * 1.32.0     2023-10-24 [1] Bioconductor\n survival               3.5-7      2023-08-14 [1] CRAN (R 4.3.2)\n svglite                2.1.3      2023-12-08 [1] CRAN (R 4.3.0)\n systemfonts            1.0.5      2023-10-09 [1] CRAN (R 4.3.0)\n tensor                 1.5        2012-05-05 [1] CRAN (R 4.3.0)\n tibble                 3.2.1      2023-03-20 [1] CRAN (R 4.3.0)\n tidyr                  1.3.1      2024-01-24 [1] CRAN (R 4.3.2)\n tidyselect             1.2.0      2022-10-10 [1] CRAN (R 4.3.0)\n TMB                    1.9.11     2024-04-03 [1] CRAN (R 4.3.2)\n TrajectoryUtils      * 1.10.0     2023-10-24 [1] Bioconductor\n UCell                  2.6.2      2023-11-06 [1] Bioconductor\n utf8                   1.2.4      2023-10-22 [1] CRAN (R 4.3.0)\n uwot                   0.1.16     2023-06-29 [1] CRAN (R 4.3.0)\n vctrs                  0.6.5      2023-12-01 [1] CRAN (R 4.3.0)\n vipor                  0.4.7      2023-12-18 [1] CRAN (R 4.3.0)\n viridis                0.6.4      2023-07-22 [1] CRAN (R 4.3.0)\n viridisLite            0.4.2      2023-05-02 [1] CRAN (R 4.3.0)\n webshot                0.5.5      2023-06-26 [1] CRAN (R 4.3.0)\n withr                  2.5.2      2023-10-30 [1] CRAN (R 4.3.0)\n xfun                   0.41       2023-11-01 [1] CRAN (R 4.3.0)\n xml2                   1.3.6      2023-12-04 [1] CRAN (R 4.3.0)\n xtable                 1.8-4      2019-04-21 [1] CRAN (R 4.3.0)\n XVector                0.42.0     2023-10-24 [1] Bioconductor\n yaml                   2.3.8      2023-12-11 [1] CRAN (R 4.3.0)\n zlibbioc               1.48.0     2023-10-24 [1] Bioconductor\n zoo                    1.8-12     2023-04-13 [1] CRAN (R 4.3.0)\n\n [1] /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/library\n\n─ Python configuration ───────────────────────────────────────────────────────\n python:         /Users/jack/Desktop/PhD/Research/Python_Envs/personal_site/bin/python\n libpython:      /usr/local/opt/python@3.11/Frameworks/Python.framework/Versions/3.11/lib/python3.11/config-3.11-darwin/libpython3.11.dylib\n pythonhome:     /Users/jack/Desktop/PhD/Research/Python_Envs/personal_site:/Users/jack/Desktop/PhD/Research/Python_Envs/personal_site\n version:        3.11.6 (main, Nov  2 2023, 04:52:24) [Clang 14.0.3 (clang-1403.0.22.14.1)]\n numpy:          /Users/jack/Desktop/PhD/Research/Python_Envs/personal_site/lib/python3.11/site-packages/numpy\n numpy_version:  1.26.3\n \n NOTE: Python version was forced by use_python() function\n\n──────────────────────────────────────────────────────────────────────────────\n```\n\n\n:::\n:::\n",
    "supporting": [
      "scLANE_Trajectory_DE_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}