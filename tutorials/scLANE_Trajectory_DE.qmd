---
title: "Interpretable scRNA-seq Trajectory DE with `scLANE`"
author:
  name: Jack Leary
  email: j.leary@ufl.edu
  orcid: 0009-0004-8821-3269
  affiliations:
    - name: University of Florida
      department: Biostatistics 
      city: Gainesville
      state: FL
date: today
date-format: long
format:
  html:
    code-fold: show
    code-copy: true
    code-tools: true
    toc: true
    toc-depth: 2
    embed-resources: true
    fig-format: retina
    fig-width: 9
    fig-height: 6
    df-print: kable
    link-external-newwindow: true
execute:
  cache: false
  freeze: auto
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(fig.width = 9, fig.height = 6, comment = NA)
reticulate::use_virtualenv("~/Desktop/Python/science/venv/", required = TRUE)
```

# Introduction 

In this tutorial we'll walk through a basic trajectory differential expression analysis. We'll use the `scLANE` R package, which we developed with the goal of providing accurate and biologically interpretable models of expression over pseudotime. At the end are some best-practices recommendations, along with a short list of references we used in developing the method & writing the accompanying manuscript. 

# Libraries 

If you haven't already, install the development version (currently v`r packageVersion("scLANE")`) of `scLANE` from [the GitHub repository](https://github.com/jr-leary7/scLANE).

```{r, eval=FALSE}
remotes::install_github("jr-leary7/scLANE")
```

Next, we'll load the packages we need to process, analyze, & visualize our data. 

```{r, message=FALSE, warning=FALSE, results='hide'}
library(dplyr)           # data manipulation
library(scLANE)          # trajectory DE 
library(Seurat)          # scRNA-seq tools
library(ggplot2)         # plot creation 
library(patchwork)       # plot combination
library(slingshot)       # pseudotime estimation
library(reticulate)      # Python interface
library(ComplexHeatmap)  # heatmaps
rename <- dplyr::rename
```

# Helper Functions 

We'll also define a couple utilities to make our plots cleaner to read & easier to make. 

```{r}
theme_umap <- function(base.size = 12) {
  ggplot2::theme(axis.ticks = ggplot2::element_blank(), 
                 axis.text = ggplot2::element_blank(), 
                 plot.subtitle = ggplot2::element_text(face = "italic", size = 9), 
                 plot.caption = ggplot2::element_text(face = "italic", size = 9))
}
guide_umap <- function(key.size = 4) {
  ggplot2::guides(color = ggplot2::guide_legend(override.aes = list(size = key.size, alpha = 1)))
}
```

And consistent color palettes will make our plots easier to understand. 

```{r}
palette_cluster <- paletteer::paletteer_d("ggsci::default_jama")
palette_celltype <- paletteer::paletteer_d("ggsci::category20_d3")
palette_heatmap <- paletteer::paletteer_d("wesanderson::Zissou1")
```

# Data 

We'll load the well-known pancreatic endocrinogenesis data from [Bastidas-Ponce *et al* (2019)](https://doi.org/10.1242/dev.173849), which comes with the `scVelo` Python library & has been used in several pseudotime inference / RNA velocity method papers as a good benchmark dataset due to the simplicity of the underlying trajectory manifold. 

```{python, results='hide'}
import scvelo as scv
adata = scv.datasets.pancreas()
```

The `AnnData` object contains data that we'll need to extract, specifically the counts matrices (stored in `AnnData.layers`) and the cell-level metadata (which is in `AnnData.obs`). 

```{python}
adata
```

## Conversion from Python

The `reticulate` package allows us to pass the counts matrices & metadata from Python back to R. We'll use the spliced mRNA counts as our default assay, and also define a new assay containing the total (spliced + unspliced) mRNA in each cell. Lastly, we remove genes with non-zero spliced mRNA in 3 or fewer cells. 

::: {.callout-note}
While downloading this dataset requires a Python installation as well as the installation of the `scVelo` Python library (and its dependencies), running `scLANE` is done purely in R & requires no Python whatsoever. 
:::

```{r}
spliced_counts <- Matrix::Matrix(t(as.matrix(py$adata$layers["spliced"])), sparse = TRUE)
unspliced_counts <- Matrix::Matrix(t(as.matrix(py$adata$layers["unspliced"])), sparse = TRUE)
rna_counts <- spliced_counts + unspliced_counts
colnames(rna_counts) <- colnames(spliced_counts) <- colnames(unspliced_counts) <- py$adata$obs_names$to_list()
rownames(rna_counts) <- rownames(spliced_counts) <- rownames(unspliced_counts) <- py$adata$var_names$to_list()
spliced_assay <- CreateAssayObject(counts = spliced_counts)
spliced_assay@key <- "spliced_"
unspliced_assay <- CreateAssayObject(counts = unspliced_counts)
unspliced_assay@key <- "unspliced_"
rna_assay <- CreateAssayObject(counts = rna_counts)
rna_assay@key <- "rna_"
meta_data <- py$adata$obs %>% 
             mutate(cell_name = rownames(.), .before = 1) %>% 
             rename(celltype = clusters, 
                    celltype_coarse = clusters_coarse) %>% 
             mutate(nCount_spliced = colSums(spliced_counts), 
                    nFeature_spliced = colSums(spliced_counts > 0), 
                    nCount_unspliced = colSums(unspliced_counts), 
                    nFeature_unspliced = colSums(unspliced_counts > 0), 
                    nCount_rna = colSums(rna_counts), 
                    nFeature_rna = colSums(rna_counts > 0))
seu <- CreateSeuratObject(counts = spliced_assay, 
                          assay = "spliced", 
                          project = "Mm_Panc_Endo", 
                          meta.data = meta_data)
seu@assays$unspliced <- unspliced_assay
seu@assays$RNA <- rna_assay
seu <- seu[rowSums(seu@assays$spliced) > 3, ]
```

```{r, echo=FALSE, message=FALSE, warning=FALSE, results='hide'}
system("rm -rf ./data")  # remove data/ directory created by downloading pancreas .h5ad file
rm(meta_data, rna_assay, rna_counts, spliced_assay, spliced_counts, unspliced_assay, unspliced_counts)
```

## Preprocessing

We preprocess the counts using a typical pipeline with QC, normalization & scaling, dimension reduction, and graph-based clustering via the Leiden algorithm. 

```{r, message=FALSE, warning=FALSE}
seu <- PercentageFeatureSet(seu, 
                            pattern = "^mt-", 
                            col.name = "percent_mito", 
                            assay = "spliced") %>% 
       PercentageFeatureSet(pattern = "^Rp[sl]", 
                            col.name = "percent_ribo", 
                            assay = "spliced") %>% 
       NormalizeData(assay = "spliced", verbose = FALSE) %>% 
       NormalizeData(assay = "unspliced", verbose = FALSE) %>% 
       NormalizeData(assay = "RNA", verbose = FALSE) %>% 
       FindVariableFeatures(assay = "spliced", 
                            nfeatures = 3000, 
                            verbose = FALSE) %>% 
       ScaleData(assay = "spliced", 
                 vars.to.regress = c("percent_mito", "percent_ribo"), 
                 model.use = "poisson", 
                 verbose = FALSE) %>% 
       RunPCA(assay = "spliced", 
              npcs = 30, 
              approx = TRUE, 
              seed.use = 312, 
              verbose = FALSE) %>% 
       RunUMAP(reduction = "pca", 
               dims = 1:30, 
               n.components = 2, 
               metric = "cosine", 
               seed.use = 312, 
               verbose = FALSE) %>% 
       FindNeighbors(reduction = "pca", 
                     k.param = 30,
                     nn.method = "annoy", 
                     annoy.metric = "cosine", 
                     verbose = FALSE) %>% 
       FindClusters(algorithm = 4, 
                    method = "igraph", 
                    resolution = 0.5, 
                    random.seed = 312, 
                    verbose = FALSE)
```

Let's visualize the results on our UMAP embedding. The clustering generally agrees with the celltype labels, though there is some overclustering in the ductal cells & underclustering in the mature endocrine celltypes. 

```{r}
p0 <- Embeddings(seu, "umap") %>% 
      as.data.frame() %>% 
      magrittr::set_colnames(c("UMAP_1", "UMAP_2")) %>% 
      mutate(leiden = seu$seurat_clusters) %>% 
      ggplot(aes(x = UMAP_1, y = UMAP_2, color = leiden)) + 
      geom_point(size = 1.5, 
                 alpha = 0.75, 
                 stroke = 0) + 
      scale_color_manual(values = palette_cluster) + 
      labs(color = "Leiden Cluster") + 
      theme_scLANE() + 
      theme_umap() + 
      theme(plot.title = element_blank(), 
            axis.title = element_blank(), 
            axis.line.x = element_blank()) + 
      guide_umap()
p1 <- Embeddings(seu, "umap") %>% 
      as.data.frame() %>% 
      magrittr::set_colnames(c("UMAP_1", "UMAP_2")) %>% 
      mutate(celltype = seu$celltype) %>% 
      ggplot(aes(x = UMAP_1, y = UMAP_2, color = celltype)) + 
      geom_point(size = 1.5, 
                 alpha = 0.75, 
                 stroke = 0) + 
      scale_color_manual(values = palette_celltype) + 
      labs(x = "UMAP 1", 
           y = "UMAP 2", 
           color = "Celltype") + 
      theme_scLANE() + 
      theme_umap() + 
      theme(plot.title = element_blank()) + 
      guide_umap()
p2 <- (p0 / p1) +
      plot_layout(guides = "collect") + 
      plot_annotation(title = "Murine pancreatic endocrinogenesis", 
                      theme = theme_scLANE())
p2
```

# Trajectory Inference 

## Pseudotime Estimation

We'll start by fitting a trajectory using the `slingshot` R package. We define cluster 5 as the starting cluster, since in this case we're already aware of the dataset's underlying biology. After generating the estimates for each cell, we rescale the ordering to be defined on $[0, 1]$. This has no effect on the trajectory DE results however, and is mostly an aesthetic choice. 

```{r}
sling_res <- slingshot(Embeddings(seu, "umap"),
                       start.clus = "5",
                       clusterLabels = seu$seurat_clusters, 
                       approx_points = 500)
sling_pt <- slingPseudotime(sling_res) %>% 
            as.data.frame() %>% 
            magrittr::set_colnames(c("PT")) %>% 
            mutate(PT = (PT - min(PT)) / (max(PT) - min(PT)))
seu <- AddMetaData(seu, 
                   metadata = sling_pt, 
                   col.name = "sling_pt")
```

Let's visualize the results on our UMAP embedding. They match what we would expect (knowing the biological background of the data), with ductal cells at the start of the process and endocrine celltypes such as alpha, beta, & delta cells at the end of it.

```{r}
p3 <- Embeddings(seu, "umap") %>% 
      as.data.frame() %>% 
      magrittr::set_colnames(c("UMAP_1", "UMAP_2")) %>% 
      mutate(PT = sling_pt$PT) %>% 
      ggplot(aes(x = UMAP_1, y = UMAP_2, color = PT)) + 
      geom_point(size = 1.5, 
                 alpha = 0.75, 
                 stroke = 0) + 
      labs(color = "Pseudotime") + 
      scale_color_gradientn(colors = palette_heatmap, 
                            labels = scales::label_number(accuracy = 0.01)) + 
      theme_scLANE() + 
      theme_umap() + 
      theme(axis.title = element_blank(), 
            axis.line.x = element_blank())
p4 <- (p3 / p1) + 
      plot_layout(guides = "collect") + 
      plot_annotation(title = "Estimated cell ordering from Slingshot", 
                      theme = theme_scLANE())
p4
```

## Trajectory Differential Expression

Next, we prepare the primary inputs to `scLANE`: our `Seurat` object with the spliced counts set as the default assay, a dataframe containing our estimated pseudotime ordering, a vector of size factors to use as an offset in each model, and a set of genes whose dynamics we want to model. `scLANE` parallelizes over genes in order to speed up the computation at the expense of using a little more memory. The models are fit using NB GLMs with optimal spline knots identified empirically, and differential expression is quantified using a likelihood ratio test of the fitted model vs. a constant (intercept-only) model. In practice, genes designated as HVGs are usually the best candidates for modeling, so we choose the top 3,000 HVGs as our input. 

::: {.callout-note}
The testing of the HVG set on its own is also justified by the reality that almost all trajectories are inferred using some sort of dimension-reduced space, and those embeddings are nearly universally generated using a set of HVGs. As such, genes not included in the HVG set actually have no direct relationship with the estimated trajectory, & it's generally safe to exclude them from trajectory analyses. 
:::

```{r, results='hold'}
top3k_hvg <- HVFInfo(seu) %>% 
             arrange(desc(variance.standardized)) %>% 
             slice_head(n = 3000) %>% 
             rownames(.)
cell_offset <- createCellOffset(seu)
scLANE_res <- testDynamic(seu, 
                          pt = sling_pt, 
                          genes = top3k_hvg, 
                          size.factor.offset = cell_offset, 
                          n.cores = 6, 
                          track.time = TRUE)
```

After tidying the TDE results with `getResultsDE()`, we pull a sample of 6 genes from the results & display their test statistics. By default, any gene with an adjusted *p*-value less than 0.01 is predicted to be dynamic, though this threshold can be easily adjusted. 

```{r}
scLANE_res_tidy <- getResultsDE(scLANE_res)
select(scLANE_res_tidy, 
       Gene, 
       Test_Stat, 
       P_Val, 
       P_Val_Adj,
       Gene_Dynamic_Overall) %>% 
  mutate(Gene_Dynamic_Overall = if_else(Gene_Dynamic_Overall == 1, "Dynamic", "Static")) %>% 
  with_groups(Gene_Dynamic_Overall, 
              slice_sample, 
              n = 3) %>% 
  kableExtra::kbl(digits = 4, 
                  booktabs = TRUE, 
                  col.names = c("Gene", "LRT stat.", "P-value", "Adj. p-value", "Predicted gene status")) %>% 
  kableExtra::kable_classic(full_width = FALSE, "hover")
```

Next, we can use the `plotModels()` function to visualize the fitted models from `scLANE` and compare them to other modeling methods. The gene [*Neurog3*](https://www.ncbi.nlm.nih.gov/gene/11925) is strongly associated with epithelial cell differentiation, and indeed we see a clear, nonlinear transcriptional dynamic across pseudotime for that gene. A traditional GLM fails to capture that nonlinearity, and while a GAM fits the trend smoothly, it seems to overfit the dynamics near the boundaries of pseudotime - [a known issue with additive models](https://www.routledge.com/Generalized-Additive-Models-An-Introduction-with-R-Second-Edition/Wood/p/book/9781498728331). Only the `scLANE` model accurately models the rapid upregulation and equally swift downregulation of *Neurog3* over pseudotime, in addition to identifying the cutpoint in pseudotime at which downregulation begins. 

```{r, fig.width=9, fig.height=5}
p5 <- plotModels(scLANE_res, 
                 gene = "Neurog3", 
                 pt = sling_pt, 
                 expr.mat = seu, 
                 size.factor.offset = cell_offset, 
                 plot.glm = TRUE, 
                 plot.gam = TRUE) + 
      scale_color_manual(values = c("forestgreen"))
p5
```

# Downstream analysis 

## Gene dynamics plots

Using the `getFittedValues()` function allows us to generate predictions from the models we fit, which we then use to visualize the dynamics of a few genes that are known to be strongly associated with the differentiation of immature cells into mature endocrine phenotypes. For all four genes, the fitted models show knots chosen in the area of pseudotime around the pre-endocrine cells. This tells us that these driver genes are being upregulated in precursor celltypes & are driving differentiation into the mature celltypes such as alpha & beta cells, after which the genes are downregulated. 

```{r, fig.width=12, fig.height=6}
p6 <- getFittedValues(scLANE_res, 
                      genes = c("Chga", "Chgb", "Fev", "Cck"), 
                      pt = sling_pt, 
                      expr.mat = seu, 
                      size.factor.offset = cell_offset, 
                      cell.meta.data = select(seu@meta.data, celltype, celltype_coarse)) %>% 
      ggplot(aes(x = pt, y = rna_log1p)) + 
      facet_wrap(~gene, 
                 ncol = 2, 
                 scales = "free_y") + 
      geom_point(aes(color = celltype), 
                 size = 2, 
                 alpha = 0.75, 
                 stroke = 0) + 
      geom_vline(data = data.frame(gene = "Chga", knot = unique(scLANE_res$Chga$Lineage_A$MARGE_Slope_Data$Breakpoint)), 
                 mapping = aes(xintercept = knot), 
                 linetype = "dashed", 
                 color = "grey20") + 
      geom_vline(data = data.frame(gene = "Chgb", knot = unique(scLANE_res$Chgb$Lineage_A$MARGE_Slope_Data$Breakpoint)), 
                 mapping = aes(xintercept = knot), 
                 linetype = "dashed", 
                 color = "grey20") + 
      geom_vline(data = data.frame(gene = "Cck", knot = unique(scLANE_res$Cck$Lineage_A$MARGE_Slope_Data$Breakpoint)), 
                 mapping = aes(xintercept = knot), 
                 linetype = "dashed", 
                 color = "grey20") + 
      geom_vline(data = data.frame(gene = "Fev", knot = unique(scLANE_res$Fev$Lineage_A$MARGE_Slope_Data$Breakpoint)), 
                 mapping = aes(xintercept = knot), 
                 linetype = "dashed", 
                 color = "grey20") + 
      geom_ribbon(aes(ymin = scLANE_ci_ll_log1p, ymax = scLANE_ci_ul_log1p), 
                  linewidth = 0, 
                  fill = "grey70", 
                  alpha = 0.9) + 
      geom_line(aes(y = scLANE_pred_log1p), 
                color = "black", 
                linewidth = 0.75) + 
      scale_x_continuous(labels = scales::label_number(accuracy = 0.01)) + 
      scale_color_manual(values = palette_celltype) + 
      labs(x = "Pseudotime", 
           y = "Normalized Expression", 
           title = "Endrocrinogenesis driver genes across pseudotime", 
           subtitle = "scLANE piecewise negative binomial GLMs") + 
      theme_scLANE() + 
      theme(legend.title = element_blank(), 
            strip.text.x = element_text(face = "italic"), 
            plot.subtitle = element_text(face = "italic", size = 11)) + 
      guide_umap()
p6
```

On the other hand, if we use additive models the "peak" of expression is placed among the mature endocrine celltypes - which doesn't make biological sense if we know that these genes are driving that process of differentiation. This can of course be tweaked by changing the degree or degrees of freedom of the underlying basis spline, but choosing a "best" value for those hyperparameters can be difficult, whereas `scLANE` identifies optimal parameters internally by default. In addition, the knots chosen by `scLANE` for each gene can be informative with respect to the underlying biology, whereas the knots from GAMs are evenly spaced at quantiles & carry no biological interpretation. 

```{r, fig.width=12, fig.height=6}
p7 <- getFittedValues(scLANE_res, 
                      genes = c("Chga", "Chgb", "Fev", "Cck"), 
                      pt = sling_pt, 
                      expr.mat = seu, 
                      size.factor.offset = cell_offset, 
                      cell.meta.data = select(seu@meta.data, celltype, celltype_coarse)) %>% 
      mutate(rna_raw = rna / size_factor, .before = 7) %>% 
      with_groups(gene, 
                  mutate, 
                  GAM_fitted_link = predict(nbGAM(expr = rna_raw, 
                                                  pt = sling_pt, 
                                                  Y.offset = cell_offset, 
                                                  spline.df = 3)), 
                  GAM_se_link = predict(nbGAM(expr = rna_raw, 
                                              pt = sling_pt, 
                                              Y.offset = cell_offset, 
                                              spline.df = 3), se.fit = T)[[2]]) %>% 
      mutate(GAM_pred = exp(GAM_fitted_link) * cell_offset, 
             GAM_ci_ll = exp(GAM_fitted_link - qnorm(0.975) * GAM_se_link) * cell_offset, 
             GAM_ci_ul = exp(GAM_fitted_link + qnorm(0.975) * GAM_se_link) * cell_offset, 
             GAM_pred_log1p = log1p(GAM_pred), 
             GAM_ci_ll_log1p = log1p(GAM_ci_ll), 
             GAM_ci_ul_log1p = log1p(GAM_ci_ul)) %>% 
      ggplot(aes(x = pt, y = rna_log1p)) + 
      facet_wrap(~gene, 
                 ncol = 2, 
                 scales = "free_y") + 
      geom_point(aes(color = celltype), 
                 size = 2, 
                 alpha = 0.75, 
                 stroke = 0) + 
      geom_ribbon(aes(ymin = GAM_ci_ll_log1p, ymax = GAM_ci_ul_log1p), 
                  linewidth = 0, 
                  fill = "grey70", 
                  alpha = 0.9) + 
      geom_line(aes(y = GAM_pred_log1p), 
                color = "black", 
                linewidth = 0.75) + 
      scale_x_continuous(labels = scales::label_number(accuracy = 0.01)) + 
      scale_color_manual(values = palette_celltype) + 
      labs(x = "Pseudotime", 
           y = "Normalized Expression", 
           title = "Endrocrinogenesis driver genes across pseudotime", 
           subtitle = "Cubic basis spline negative binomial GAMs") + 
      theme_scLANE() + 
      theme(legend.title = element_blank(), 
            strip.text.x = element_text(face = "italic"), 
            plot.subtitle = element_text(face = "italic", size = 11)) + 
      guide_umap()
p7
```

## Distribution of knot locations

Let's take a broader view of the dataset by examining the distribution of adaptively chosen knots from our models. We limit the analysis to the set of genes determined to be dynamic. 

```{r}
dyn_genes <- filter(scLANE_res_tidy, Gene_Dynamic_Overall == 1) %>% 
             pull(Gene)
knot_df <- getKnotDist(scLANE_res, dyn_genes)
```

We'll plot a histogram of the knot values along with a ridgeplot of the pseudotime distribution for each celltype. We see that the majority of the selected knots are placed at the beginning of the trajectory, around where the ductal cells transition into endocrine progenitors. A smaller set of knots is placed about halfway through the trajectory, which we've annotated as the point at which pre-endocrine cells begin differentiating into mature endocrine phenotypes. 

```{r, fig.width=9, fig.height=6}
p8 <- ggplot(knot_df, aes(x = knot)) + 
      geom_histogram(aes(y = after_stat(density)), 
                     color = "black", 
                     fill = "white", 
                     linewidth = 0.5) + 
      geom_density(fill = "deepskyblue3", 
                   alpha = 0.5, 
                   color = "deepskyblue4", 
                   linewidth = 1) + 
      scale_x_continuous(limits = c(0, 1), labels = scales::label_number(accuracy = 0.01)) + 
      labs(x = "Knot Location") + 
      theme_scLANE() + 
      theme(axis.title.y = element_blank(), 
            axis.text.y = element_blank(), 
            axis.ticks.y = element_blank())
p9 <- data.frame(celltype = seu$celltype, 
                 pt = seu$sling_pt) %>% 
      ggplot(aes(x = pt, y = celltype, fill = celltype, color = celltype)) + 
      ggridges::geom_density_ridges(alpha = 0.75, size = 1, scale = 0.95) + 
      scale_x_continuous(labels = scales::label_number(accuracy = 0.01), limits = c(0, 1)) + 
      scale_fill_manual(values = palette_celltype) + 
      scale_color_manual(values = palette_celltype) + 
      labs(x = "Pseudotime") + 
      theme_scLANE() + 
      theme(axis.title.y = element_blank(), 
            legend.title = element_blank()) + 
      guide_umap()
p10 <- (p8 / p9) + 
       plot_layout(heights = c(1/4, 3/4)) + 
       plot_annotation(title = "Distribution of adaptively-chosen knots from scLANE", 
                       theme = theme_scLANE())
p10
```

## Dynamic gene clustering

We can extract a matrix of fitted values using `smoothedCountsMatrix()`; here we focus on the top 2,000 most dynamic genes, with the goal of identifying clusters of similarly-expressed genes. Next, the `embedGenes()` function reduces dimensionality with PCA, clusters the genes using the Leiden algorithm, & embeds the genes in two dimensions with UMAP.  

```{r}
smoothed_counts <- smoothedCountsMatrix(scLANE_res, 
                                        pt = sling_pt, 
                                        genes = dyn_genes[1:2000], 
                                        size.factor.offset = cell_offset, 
                                        n.cores = 2)
gene_embed <- embedGenes(smoothed_counts$Lineage_A, 
                         k.param = 20, 
                         resolution.param = 0.5)
```

First we'll visualize the gene clusters on the first two PCs. 

```{r}
p11 <- ggplot(gene_embed, aes(x = pc1, y = pc2, color = leiden)) + 
       geom_point(size = 2, alpha = 0.75, stroke = 0) + 
       labs(x = "PC 1", 
            y = "PC 2", 
            color = "Leiden Cluster", 
            title = "Unsupervised clustering of dynamic genes", 
            subtitle = "Top 2,000 TDE genes after PCA") +
       paletteer::scale_color_paletteer_d("ggsci::default_igv") + 
       theme_scLANE() + 
       theme_umap() + 
       guide_umap()
p11
```

The UMAP embedding shows that even with the relatively small number of genes, clear patterns are visible. 

```{r}
p12 <- ggplot(gene_embed, aes(x = umap1, y = umap2, color = leiden)) + 
       geom_point(size = 2, alpha = 0.75, stroke = 0) + 
       labs(x = "UMAP 1", 
            y = "UMAP 2", 
            color = "Leiden Cluster", 
            title = "Unsupervised clustering of dynamic genes", 
            subtitle = "Top 2,000 TDE genes after PCA") +
       paletteer::scale_color_paletteer_d("ggsci::default_igv") + 
       theme_scLANE() + 
       theme_umap() + 
       guide_umap()
p12
```

## Expression cascades

We can also plot a heatmap of the dynamic genes; this requires a bit of setup, for which we'll use the `ComplexHeatmap` package. We scale each gene, and clip values to be on $[-6, 6]$. The columns (cells) of the heatmap are ordered by estimated pseudotime, and the rows (genes) are ordered by expression peak. 

```{r}
col_anno_df <- select(seu@meta.data, 
                      cell_name, 
                      celltype, 
                      sling_pt) %>% 
               mutate(celltype = as.factor(celltype)) %>% 
               arrange(sling_pt)
gene_order <- sortGenesHeatmap(smoothed_counts$Lineage_A, pt.vec = sling_pt$PT)
heatmap_mat <- t(scale(smoothed_counts$Lineage_A))
heatmap_mat[heatmap_mat > 6] <- 6
heatmap_mat[heatmap_mat < -6] <- -6
colnames(heatmap_mat) <- seu$cell_name
heatmap_mat <- heatmap_mat[, col_anno_df$cell_name]
heatmap_mat <- heatmap_mat[gene_order, ]
palette_celltype_hm <- as.character(palette_celltype[1:length(unique(seu$celltype))])
names(palette_celltype_hm) <- levels(col_anno_df$celltype)
col_anno <- HeatmapAnnotation(Celltype = col_anno_df$celltype, 
                              Pseudotime = col_anno_df$sling_pt, 
                              col = list(Celltype = palette_celltype_hm, 
                                         Pseudotime = circlize::colorRamp2(seq(0, 1, by = 0.25), palette_heatmap)),
                              show_legend = TRUE, 
                              show_annotation_name = FALSE, 
                              gap = unit(1, "mm"), 
                              border = TRUE)
palette_cluster_hm <- as.character(paletteer::paletteer_d("ggsci::default_igv")[1:length(unique(gene_embed$leiden))])
names(palette_cluster_hm) <- as.character(unique(gene_embed$leiden))
row_anno <- HeatmapAnnotation(Cluster = as.factor(gene_embed$leiden), 
                              col = list(Cluster = palette_cluster_hm), 
                              show_legend = TRUE, 
                              show_annotation_name = FALSE, 
                              annotation_legend_param = list(title = "Gene\nCluster"), 
                              gap = unit(1, "mm"), 
                              border = TRUE, 
                              which = "row")
```

The heatmap shows clear dynamic patterns across pseudotime; these patterns are often referred to as *expression cascades*, and represent periodic up- and down-regulation of different gene programs during the course of the underlying biological process. 

```{r, fig.width=12, fig.height=6}
Heatmap(matrix = heatmap_mat, 
        name = "Spliced\nmRNA", 
        col = circlize::colorRamp2(colors = viridis::inferno(50), 
                                   breaks = seq(min(heatmap_mat), max(heatmap_mat), length.out = 50)), 
        cluster_columns = FALSE,
        width = 12, 
        height = 6, 
        column_title = "Dynamic genes across pseudotime in murine pancreatic endocrinogenesis",
        cluster_rows = FALSE,
        top_annotation = col_anno, 
        left_annotation = row_anno, 
        show_column_names = FALSE, 
        show_row_names = FALSE, 
        use_raster = TRUE,
        raster_by_magick = TRUE, 
        raster_quality = 5)
```

## Enrichment analysis & gene programs

Using our gene clusters & the `gprofiler2` package, we run an enrichment analysis against [the biological process (BP) set of gene ontologies](http://geneontology.org/docs/ontology-documentation/). We make sure to order the genes in each cluster by their test statistics by joining to the results table from `scLANE`. 

```{r}
gene_clust_list <- purrr::map(unique(gene_embed$leiden), \(x) { 
  filter(gene_embed, leiden == x) %>% 
  inner_join(scLANE_res_tidy, by = c("gene" = "Gene")) %>% 
  arrange(desc(Test_Stat)) %>% 
  pull(gene)
}) 
names(gene_clust_list) <- paste0("Leiden_", unique(gene_embed$leiden))
enrich_res <- gprofiler2::gost(gene_clust_list, 
                               organism = "mmusculus", 
                               ordered_query = TRUE, 
                               multi_query = FALSE, 
                               sources = "GO:BP", 
                               significant = TRUE)
```

A look at the top 3 most-significant GO terms for each gene cluster reveals heterogeneous functionalities across groups of genes.

```{r}
mutate(enrich_res$result, 
       query = gsub("Leiden_", "", query)) %>% 
  rename(cluster = query) %>% 
  with_groups(cluster, 
              slice_head,
              n = 3) %>% 
  select(cluster, term_name, p_value, term_size, query_size, intersection_size, term_id) %>% 
  kableExtra::kbl(digits = 3, 
                  booktabs = TRUE, 
                  caption = "<i>Top 3 biological process GO terms per cluster<\\i>", 
                  col.names = c("Gene Cluster", "Term Name", "Adj. P-value", "Term Size", 
                                "Query Size", "Intersection Size", "Term ID")) %>% 
  kableExtra::kable_classic(c("hover"), full_width = FALSE)
```

The terminal celltypes in this dataset excrete different types of peptides, and it stands to reason that one of the gene clusters might be associated with peptide production pathways. We isolate the genes from cluster `r mutate(enrich_res$result, query = gsub("Leiden_", "", query)) %>% filter(grepl("peptide", term_name)) %>% arrange(p_value) %>% slice_head(n = 1) %>% pull(query)`, which has the highest significance for peptide-related pathways, then create a per-cell module score for genes in that set. In effect, this will allow us to associate certain gene programs with certain celltypes. 

```{r}
peptide_cluster <- mutate(enrich_res$result, 
                          query = gsub("Leiden_", "", query)) %>% 
                   filter(grepl("peptide", term_name)) %>% 
                   arrange(p_value) %>% 
                   slice_head(n = 1) %>% 
                   pull(query)
peptide_gene_program <- filter(gene_embed, 
                               leiden == peptide_cluster) %>% 
                        pull(gene)
seu <- AddModuleScore(seu, 
                      features = list(peptide = peptide_gene_program), 
                      assay = "spliced", 
                      name = "peptide_program_score", 
                      seed = 312)
```

Visualizing the scores on our UMAP embedding shows us that the peptide program is highly-enriched only in mature endocrine cells. This makes sense biologically as mature endocrine celltypes' primary roles are to produce peptides such as glucagon (alpha cells), insulin (beta cells), somatostatin (ductal cells), and pancreatic polypeptide (gamma cells). 

```{r}
p13 <- Embeddings(seu, "umap") %>% 
       as.data.frame() %>% 
       magrittr::set_colnames(c("UMAP_1", "UMAP_2")) %>% 
       mutate(peptide_program_score = seu$peptide_program_score1) %>% 
       ggplot(aes(x = UMAP_1, y = UMAP_2, color = peptide_program_score)) + 
       geom_point(size = 1.5, alpha = 0.75, stroke = 0) + 
       labs(color = "Program Score") + 
       scale_color_gradientn(colors = palette_heatmap, 
                             labels = scales::label_number(accuracy = 0.1)) + 
       theme_scLANE() + 
       theme_umap() + 
       theme(axis.title = element_blank(), 
             axis.line.x = element_blank())
p14 <- (p13 / p1) + 
       plot_layout(guides = "collect") + 
       plot_annotation(title = "Enrichment of peptide regulation gene program", 
                       theme = theme_scLANE())
p14
```

We can also visualize the trend in the peptide program scores over time, which confirms the biological conclusions we came to by inspecting the UMAPs. 

```{r}
p15 <- data.frame(PT = sling_pt$PT, 
                  peptide_program_score = seu$peptide_program_score1, 
                  celltype = seu$celltype) %>% 
       ggplot(aes(x = PT, y = peptide_program_score, color = celltype)) + 
       geom_point(alpha = 0.75, stroke = 0, size = 2) + 
       geom_smooth(color = "black", method = "loess") + 
       scale_color_manual(values = palette_celltype) + 
       labs(x = "Pseudotime", y = "Peptide Program Score") + 
       theme_scLANE() + 
       theme(legend.title = element_blank()) + 
       guide_umap()
p15
```

# Conclusions

Hopefully this vignette has been a useful introduction to running the `scLANE` software and using its outputs to help better understand biology at single-cell resolution. If you have questions about how the models work or are interpreted, software issues, or simply want to compare results feel free to open an issue on [the GitHub repository](https://github.com/jr-leary7/scLANE) or reach out via email to <j.leary@ufl.edu>. 

# References

1. Bastidas-Ponce, Aimée *et al*. [Comprehensive single cell mRNA profiling reveals a detailed roadmap for pancreatic endocrinogenesis](https://doi.org/10.1242/dev.173849). *Development* (2019).

2. Street, Kelly *et al*. [Slingshot: cell lineage and pseudotime inference for single-cell transcriptomics](https://doi.org/10.1186/s12864-018-4772-0). *BMC Genomics* (2018). 

3. Stoklosa, Jakub & David Warton. [A generalized estimating equation approach to multivariate adaptive regression splines](https://doi.org/10.1080/10618600.2017.1360780). *Journal of Computational and Graphical Statistics* (2018). 

# Session Info 

```{r}
sessioninfo::session_info()
```
